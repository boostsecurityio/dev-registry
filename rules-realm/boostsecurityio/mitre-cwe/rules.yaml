rules:
  CWE-1004:
    categories:
    - ALL
    - cwe-1004
    - owasp-top-10
    description: The product uses a cookie to store sensitive information, but the
      cookie is not marked with the HttpOnly flag.
    group: top10-security-misconfiguration
    name: CWE-1004
    pretty_name: 'CWE-1004: Sensitive Cookie Without ''HttpOnly'' Flag'
    ref: https://cwe.mitre.org/data/definitions/1004.html
  CWE-1007:
    categories:
    - ALL
    - boost-hardened
    description: The product displays information or identifiers to a user, but the
      display mechanism does not make it easy for the user to distinguish between
      visually similar or identical glyphs (homoglyphs), which may cause the user
      to misinterpret a glyph and perform an unintended, insecure action.
    group: top10-insecure-design
    name: CWE-1007
    pretty_name: 'CWE-1007: Insufficient Visual Distinction of Homoglyphs Presented
      to User'
    ref: https://cwe.mitre.org/data/definitions/1007.html
  CWE-102:
    categories:
    - ALL
    - boost-hardened
    description: The product uses multiple validation forms with the same name, which
      might cause the Struts Validator to validate a form that the programmer does
      not expect.
    group: top10-injection
    name: CWE-102
    pretty_name: 'CWE-102: Struts: Duplicate Validation Forms'
    ref: https://cwe.mitre.org/data/definitions/102.html
  CWE-1021:
    categories:
    - ALL
    - boost-hardened
    description: The web application does not restrict or incorrectly restricts frame
      objects or UI layers that belong to another application or domain, which can
      lead to user confusion about which interface the user is interacting with.
    group: top10-insecure-design
    name: CWE-1021
    pretty_name: 'CWE-1021: Improper Restriction of Rendered UI Layers or Frames'
    ref: https://cwe.mitre.org/data/definitions/1021.html
  CWE-1022:
    categories:
    - ALL
    - cwe-1022
    - boost-hardened
    description: The web application produces links to untrusted external sites outside
      of its sphere of control, but it does not properly prevent the external site
      from modifying security-critical properties of the window.opener object, such
      as the location property.
    group: top10-security-misconfiguration
    name: CWE-1022
    pretty_name: 'CWE-1022: Use of Web Link to Untrusted Target with window.opener
      Access'
    ref: https://cwe.mitre.org/data/definitions/1022.html
  CWE-1023:
    categories:
    - ALL
    - boost-hardened
    description: The product performs a comparison between entities that must consider
      multiple factors or characteristics of each entity, but the comparison does
      not include one or more of these factors.
    group: top10-insecure-design
    name: CWE-1023
    pretty_name: 'CWE-1023: Incomplete Comparison with Missing Factors'
    ref: https://cwe.mitre.org/data/definitions/1023.html
  CWE-1024:
    categories:
    - ALL
    - boost-hardened
    description: The product performs a comparison between two entities, but the entities
      are of different, incompatible types that cannot be guaranteed to provide correct
      results when they are directly compared.
    group: top10-insecure-design
    name: CWE-1024
    pretty_name: 'CWE-1024: Comparison of Incompatible Types'
    ref: https://cwe.mitre.org/data/definitions/1024.html
  CWE-1025:
    categories:
    - ALL
    - boost-hardened
    description: The code performs a comparison between two entities, but the comparison
      examines the wrong factors or characteristics of the entities, which can lead
      to incorrect results and resultant weaknesses.
    group: top10-insecure-design
    name: CWE-1025
    pretty_name: 'CWE-1025: Comparison Using Wrong Factors'
    ref: https://cwe.mitre.org/data/definitions/1025.html
  CWE-103:
    categories:
    - ALL
    - boost-hardened
    description: The product has a validator form that either does not define a validate()
      method, or defines a validate() method but does not call super.validate().
    group: top10-insecure-design
    name: CWE-103
    pretty_name: 'CWE-103: Struts: Incomplete validate() Method Definition'
    ref: https://cwe.mitre.org/data/definitions/103.html
  CWE-1037:
    categories:
    - ALL
    - boost-hardened
    description: The developer builds a security-critical protection mechanism into
      the software, but the processor optimizes the execution of the program such
      that the mechanism is removed or modified.
    group: top10-insecure-design
    name: CWE-1037
    pretty_name: 'CWE-1037: Processor Optimization Removal or Modification of Security-critical
      Code'
    ref: https://cwe.mitre.org/data/definitions/1037.html
  CWE-1038:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a mechanism that automatically optimizes code, e.g.
      to improve a characteristic such as performance, but the optimizations can have
      an unintended side effect that might violate an intended security assumption.
    group: top10-insecure-design
    name: CWE-1038
    pretty_name: 'CWE-1038: Insecure Automated Optimizations'
    ref: https://cwe.mitre.org/data/definitions/1038.html
  CWE-1039:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an automated mechanism such as machine learning
      to recognize complex data inputs (e.g. image or audio) as a particular concept
      or category, but it does not properly detect or handle inputs that have been
      modified or constructed in a way that causes the mechanism to detect a different,
      incorrect concept.
    group: top10-insecure-design
    name: CWE-1039
    pretty_name: 'CWE-1039: Automated Recognition Mechanism with Inadequate Detection
      or Handling of Adversarial Input Perturbations'
    ref: https://cwe.mitre.org/data/definitions/1039.html
  CWE-104:
    categories:
    - ALL
    - boost-hardened
    description: If a form bean does not extend an ActionForm subclass of the Validator
      framework, it can expose the application to other weaknesses related to insufficient
      input validation.
    group: top10-insecure-design
    name: CWE-104
    pretty_name: 'CWE-104: Struts: Form Bean Does Not Extend Validation Class'
    ref: https://cwe.mitre.org/data/definitions/104.html
  CWE-1041:
    categories:
    - ALL
    - boost-hardened
    description: The product has multiple functions, methods, procedures, macros,
      etc. that contain the same code.
    group: top10-insecure-design
    name: CWE-1041
    pretty_name: 'CWE-1041: Use of Redundant Code'
    ref: https://cwe.mitre.org/data/definitions/1041.html
  CWE-1042:
    categories:
    - ALL
    - boost-hardened
    description: The code contains a member element that is declared as static (but
      not final), in which its parent class element is not a singleton class - that
      is, a class element that can be used only once in the 'to' association of a
      Create action.
    group: top10-insecure-design
    name: CWE-1042
    pretty_name: 'CWE-1042: Static Member Data Element outside of a Singleton Class
      Element'
    ref: https://cwe.mitre.org/data/definitions/1042.html
  CWE-1043:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a data element that has an excessively large number
      of sub-elements with non-primitive data types such as structures or aggregated
      objects.
    group: top10-insecure-design
    name: CWE-1043
    pretty_name: 'CWE-1043: Data Element Aggregating an Excessively Large Number of
      Non-Primitive Elements'
    ref: https://cwe.mitre.org/data/definitions/1043.html
  CWE-1044:
    categories:
    - ALL
    - boost-hardened
    description: The product's architecture contains too many - or too few - horizontal
      layers.
    group: top10-insecure-design
    name: CWE-1044
    pretty_name: 'CWE-1044: Architecture with Number of Horizontal Layers Outside
      of Expected Range'
    ref: https://cwe.mitre.org/data/definitions/1044.html
  CWE-1045:
    categories:
    - ALL
    - boost-hardened
    description: A parent class has a virtual destructor method, but the parent has
      a child class that does not have a virtual destructor.
    group: top10-insecure-design
    name: CWE-1045
    pretty_name: 'CWE-1045: Parent Class with a Virtual Destructor and a Child Class
      without a Virtual Destructor'
    ref: https://cwe.mitre.org/data/definitions/1045.html
  CWE-1046:
    categories:
    - ALL
    - boost-hardened
    description: The product creates an immutable text string using string concatenation
      operations.
    group: top10-insecure-design
    name: CWE-1046
    pretty_name: 'CWE-1046: Creation of Immutable Text Using String Concatenation'
    ref: https://cwe.mitre.org/data/definitions/1046.html
  CWE-1047:
    categories:
    - ALL
    - boost-hardened
    description: The product contains modules in which one module has references that
      cycle back to itself, i.e., there are circular dependencies.
    group: top10-insecure-design
    name: CWE-1047
    pretty_name: 'CWE-1047: Modules with Circular Dependencies'
    ref: https://cwe.mitre.org/data/definitions/1047.html
  CWE-1048:
    categories:
    - ALL
    - boost-hardened
    description: The code contains callable control elements that contain an excessively
      large number of references to other application objects external to the context
      of the callable, i.e. a Fan-Out value that is excessively large.
    group: top10-insecure-design
    name: CWE-1048
    pretty_name: 'CWE-1048: Invokable Control Element with Large Number of Outward
      Calls'
    ref: https://cwe.mitre.org/data/definitions/1048.html
  CWE-1049:
    categories:
    - ALL
    - boost-hardened
    description: The product performs a data query with a large number of joins and
      sub-queries on a large data table.
    group: top10-insecure-design
    name: CWE-1049
    pretty_name: 'CWE-1049: Excessive Data Query Operations in a Large Data Table'
    ref: https://cwe.mitre.org/data/definitions/1049.html
  CWE-105:
    categories:
    - ALL
    - boost-hardened
    description: The product has a form field that is not validated by a corresponding
      validation form, which can introduce other weaknesses related to insufficient
      input validation.
    group: top10-insecure-design
    name: CWE-105
    pretty_name: 'CWE-105: Struts: Form Field Without Validator'
    ref: https://cwe.mitre.org/data/definitions/105.html
  CWE-1050:
    categories:
    - ALL
    - boost-hardened
    description: The product has a loop body or loop condition that contains a control
      element that directly or indirectly consumes platform resources, e.g. messaging,
      sessions, locks, or file descriptors.
    group: top10-insecure-design
    name: CWE-1050
    pretty_name: 'CWE-1050: Excessive Platform Resource Consumption within a Loop'
    ref: https://cwe.mitre.org/data/definitions/1050.html
  CWE-1051:
    categories:
    - ALL
    - boost-hardened
    description: The product initializes data using hard-coded values that act as
      network resource identifiers.
    group: top10-insecure-design
    name: CWE-1051
    pretty_name: 'CWE-1051: Initialization with Hard-Coded Network Resource Configuration
      Data'
    ref: https://cwe.mitre.org/data/definitions/1051.html
  CWE-1052:
    categories:
    - ALL
    - boost-hardened
    description: The product initializes a data element using a hard-coded literal
      that is not a simple integer or static constant element.
    group: top10-insecure-design
    name: CWE-1052
    pretty_name: 'CWE-1052: Excessive Use of Hard-Coded Literals in Initialization'
    ref: https://cwe.mitre.org/data/definitions/1052.html
  CWE-1053:
    categories:
    - ALL
    - boost-hardened
    description: The product does not have documentation that represents how it is
      designed.
    group: top10-insecure-design
    name: CWE-1053
    pretty_name: 'CWE-1053: Missing Documentation for Design'
    ref: https://cwe.mitre.org/data/definitions/1053.html
  CWE-1054:
    categories:
    - ALL
    - boost-hardened
    description: The code at one architectural layer invokes code that resides at
      a deeper layer than the adjacent layer, i.e., the invocation skips at least
      one layer, and the invoked code is not part of a vertical utility layer that
      can be referenced from any horizontal layer.
    group: top10-insecure-design
    name: CWE-1054
    pretty_name: 'CWE-1054: Invocation of a Control Element at an Unnecessarily Deep
      Horizontal Layer'
    ref: https://cwe.mitre.org/data/definitions/1054.html
  CWE-1055:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a class with inheritance from more than one
      concrete class.
    group: top10-insecure-design
    name: CWE-1055
    pretty_name: 'CWE-1055: Multiple Inheritance from Concrete Classes'
    ref: https://cwe.mitre.org/data/definitions/1055.html
  CWE-1056:
    categories:
    - ALL
    - boost-hardened
    description: A named-callable or method control element has a signature that supports
      a variable (variadic) number of parameters or arguments.
    group: top10-insecure-design
    name: CWE-1056
    pretty_name: 'CWE-1056: Invokable Control Element with Variadic Parameters'
    ref: https://cwe.mitre.org/data/definitions/1056.html
  CWE-1057:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a dedicated, central data manager component as required
      by design, but it contains code that performs data-access operations that do
      not use this data manager.
    group: top10-insecure-design
    name: CWE-1057
    pretty_name: 'CWE-1057: Data Access Operations Outside of Expected Data Manager
      Component'
    ref: https://cwe.mitre.org/data/definitions/1057.html
  CWE-1058:
    categories:
    - ALL
    - boost-hardened
    description: The code contains a function or method that operates in a multi-threaded
      environment but owns an unsafe non-final static storable or member data element.
    group: top10-insecure-design
    name: CWE-1058
    pretty_name: 'CWE-1058: Invokable Control Element in Multi-Thread Context with
      non-Final Static Storable or Member Element'
    ref: https://cwe.mitre.org/data/definitions/1058.html
  CWE-1059:
    categories:
    - ALL
    - boost-hardened
    description: The product does not contain sufficient technical or engineering
      documentation (whether on paper or in electronic form) that contains descriptions
      of all the relevant software/hardware elements of the product, such as its usage,
      structure, architectural components, interfaces, design, implementation, configuration,
      operation, etc.
    group: top10-insecure-design
    name: CWE-1059
    pretty_name: 'CWE-1059: Insufficient Technical Documentation'
    ref: https://cwe.mitre.org/data/definitions/1059.html
  CWE-106:
    categories:
    - ALL
    - boost-hardened
    description: When an application does not use an input validation framework such
      as the Struts Validator, there is a greater risk of introducing weaknesses related
      to insufficient input validation.
    group: top10-insecure-design
    name: CWE-106
    pretty_name: 'CWE-106: Struts: Plug-in Framework not in Use'
    ref: https://cwe.mitre.org/data/definitions/106.html
  CWE-1060:
    categories:
    - ALL
    - boost-hardened
    description: The product performs too many data queries without using efficient
      data processing functionality such as stored procedures.
    group: top10-insecure-design
    name: CWE-1060
    pretty_name: 'CWE-1060: Excessive Number of Inefficient Server-Side Data Accesses'
    ref: https://cwe.mitre.org/data/definitions/1060.html
  CWE-1061:
    categories:
    - ALL
    - boost-hardened
    description: The product does not sufficiently hide the internal representation
      and implementation details of data or methods, which might allow external components
      or modules to modify data unexpectedly, invoke unexpected functionality, or
      introduce dependencies that the programmer did not intend.
    group: top10-insecure-design
    name: CWE-1061
    pretty_name: 'CWE-1061: Insufficient Encapsulation'
    ref: https://cwe.mitre.org/data/definitions/1061.html
  CWE-1062:
    categories:
    - ALL
    - boost-hardened
    description: The code has a parent class that contains references to a child class,
      its methods, or its members.
    group: top10-insecure-design
    name: CWE-1062
    pretty_name: 'CWE-1062: Parent Class with References to Child Class'
    ref: https://cwe.mitre.org/data/definitions/1062.html
  CWE-1063:
    categories:
    - ALL
    - boost-hardened
    description: A static code block creates an instance of a class.
    group: top10-insecure-design
    name: CWE-1063
    pretty_name: 'CWE-1063: Creation of Class Instance within a Static Code Block'
    ref: https://cwe.mitre.org/data/definitions/1063.html
  CWE-1064:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a function, subroutine, or method whose signature
      has an unnecessarily large number of parameters/arguments.
    group: top10-insecure-design
    name: CWE-1064
    pretty_name: 'CWE-1064: Invokable Control Element with Signature Containing an
      Excessive Number of Parameters'
    ref: https://cwe.mitre.org/data/definitions/1064.html
  CWE-1065:
    categories:
    - ALL
    - boost-hardened
    description: The product uses deployed components from application servers, but
      it also uses low-level functions/methods for management of resources, instead
      of the API provided by the application server.
    group: top10-insecure-design
    name: CWE-1065
    pretty_name: 'CWE-1065: Runtime Resource Management Control Element in a Component
      Built to Run on Application Servers'
    ref: https://cwe.mitre.org/data/definitions/1065.html
  CWE-1066:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a serializable data element that does not have
      an associated serialization method.
    group: top10-insecure-design
    name: CWE-1066
    pretty_name: 'CWE-1066: Missing Serialization Control Element'
    ref: https://cwe.mitre.org/data/definitions/1066.html
  CWE-1067:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a data query against an SQL table or view that
      is configured in a way that does not utilize an index and may cause sequential
      searches to be performed.
    group: top10-insecure-design
    name: CWE-1067
    pretty_name: 'CWE-1067: Excessive Execution of Sequential Searches of Data Resource'
    ref: https://cwe.mitre.org/data/definitions/1067.html
  CWE-1068:
    categories:
    - ALL
    - boost-hardened
    description: The implementation of the product is not consistent with the design
      as described within the relevant documentation.
    group: top10-insecure-design
    name: CWE-1068
    pretty_name: 'CWE-1068: Inconsistency Between Implementation and Documented Design'
    ref: https://cwe.mitre.org/data/definitions/1068.html
  CWE-1069:
    categories:
    - ALL
    - boost-hardened
    description: An invokable code block contains an exception handling block that
      does not contain any code, i.e. is empty.
    group: top10-insecure-design
    name: CWE-1069
    pretty_name: 'CWE-1069: Empty Exception Block'
    ref: https://cwe.mitre.org/data/definitions/1069.html
  CWE-107:
    categories:
    - ALL
    - boost-hardened
    description: An unused validation form indicates that validation logic is not
      up-to-date.
    group: top10-insecure-design
    name: CWE-107
    pretty_name: 'CWE-107: Struts: Unused Validation Form'
    ref: https://cwe.mitre.org/data/definitions/107.html
  CWE-1070:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a serializable, storable data element such as
      a field or member, but the data element contains member elements that are not
      serializable.
    group: top10-insecure-design
    name: CWE-1070
    pretty_name: 'CWE-1070: Serializable Data Element Containing non-Serializable
      Item Elements'
    ref: https://cwe.mitre.org/data/definitions/1070.html
  CWE-1071:
    categories:
    - ALL
    - boost-hardened
    description: The source code contains a block that does not contain any code,
      i.e., the block is empty.
    group: top10-insecure-design
    name: CWE-1071
    pretty_name: 'CWE-1071: Empty Code Block'
    ref: https://cwe.mitre.org/data/definitions/1071.html
  CWE-1072:
    categories:
    - ALL
    - boost-hardened
    description: The product accesses a data resource through a database without using
      a connection pooling capability.
    group: top10-insecure-design
    name: CWE-1072
    pretty_name: 'CWE-1072: Data Resource Access without Use of Connection Pooling'
    ref: https://cwe.mitre.org/data/definitions/1072.html
  CWE-1073:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a client with a function or method that contains
      a large number of data accesses/queries that are sent through a data manager,
      i.e., does not use efficient database capabilities.
    group: top10-insecure-design
    name: CWE-1073
    pretty_name: 'CWE-1073: Non-SQL Invokable Control Element with Excessive Number
      of Data Resource Accesses'
    ref: https://cwe.mitre.org/data/definitions/1073.html
  CWE-1074:
    categories:
    - ALL
    - boost-hardened
    description: A class has an inheritance level that is too high, i.e., it has a
      large number of parent classes.
    group: top10-insecure-design
    name: CWE-1074
    pretty_name: 'CWE-1074: Class with Excessively Deep Inheritance'
    ref: https://cwe.mitre.org/data/definitions/1074.html
  CWE-1075:
    categories:
    - ALL
    - boost-hardened
    description: The product performs unconditional control transfer (such as a "goto")
      in code outside of a branching structure such as a switch block.
    group: top10-insecure-design
    name: CWE-1075
    pretty_name: 'CWE-1075: Unconditional Control Flow Transfer outside of Switch
      Block'
    ref: https://cwe.mitre.org/data/definitions/1075.html
  CWE-1076:
    categories:
    - ALL
    - boost-hardened
    description: The product's architecture, source code, design, documentation, or
      other artifact does not follow required conventions.
    group: top10-insecure-design
    name: CWE-1076
    pretty_name: 'CWE-1076: Insufficient Adherence to Expected Conventions'
    ref: https://cwe.mitre.org/data/definitions/1076.html
  CWE-1077:
    categories:
    - ALL
    - boost-hardened
    description: The code performs a comparison such as an equality test between two
      float (floating point) values, but it uses comparison operators that do not
      account for the possibility of loss of precision.
    group: top10-insecure-design
    name: CWE-1077
    pretty_name: 'CWE-1077: Floating Point Comparison with Incorrect Operator'
    ref: https://cwe.mitre.org/data/definitions/1077.html
  CWE-1078:
    categories:
    - ALL
    - boost-hardened
    description: The source code does not follow desired style or formatting for indentation,
      white space, comments, etc.
    group: top10-insecure-design
    name: CWE-1078
    pretty_name: 'CWE-1078: Inappropriate Source Code Style or Formatting'
    ref: https://cwe.mitre.org/data/definitions/1078.html
  CWE-1079:
    categories:
    - ALL
    - boost-hardened
    description: A parent class contains one or more child classes, but the parent
      class does not have a virtual destructor method.
    group: top10-insecure-design
    name: CWE-1079
    pretty_name: 'CWE-1079: Parent Class without Virtual Destructor Method'
    ref: https://cwe.mitre.org/data/definitions/1079.html
  CWE-108:
    categories:
    - ALL
    - boost-hardened
    description: Every Action Form must have a corresponding validation form.
    group: top10-insecure-design
    name: CWE-108
    pretty_name: 'CWE-108: Struts: Unvalidated Action Form'
    ref: https://cwe.mitre.org/data/definitions/108.html
  CWE-1080:
    categories:
    - ALL
    - boost-hardened
    description: A source code file has too many lines of code.
    group: top10-insecure-design
    name: CWE-1080
    pretty_name: 'CWE-1080: Source Code File with Excessive Number of Lines of Code'
    ref: https://cwe.mitre.org/data/definitions/1080.html
  CWE-1082:
    categories:
    - ALL
    - boost-hardened
    description: The code contains a class instance that calls the method or function
      to delete or destroy itself.
    group: top10-insecure-design
    name: CWE-1082
    pretty_name: 'CWE-1082: Class Instance Self Destruction Control Element'
    ref: https://cwe.mitre.org/data/definitions/1082.html
  CWE-1083:
    categories:
    - ALL
    - boost-hardened
    description: The product is intended to manage data access through a particular
      data manager component such as a relational or non-SQL database, but it contains
      code that performs data access operations without using that component.
    group: top10-insecure-design
    name: CWE-1083
    pretty_name: 'CWE-1083: Data Access from Outside Expected Data Manager Component'
    ref: https://cwe.mitre.org/data/definitions/1083.html
  CWE-1084:
    categories:
    - ALL
    - boost-hardened
    description: A function or method contains too many operations that utilize a
      data manager or file resource.
    group: top10-insecure-design
    name: CWE-1084
    pretty_name: 'CWE-1084: Invokable Control Element with Excessive File or Data
      Access Operations'
    ref: https://cwe.mitre.org/data/definitions/1084.html
  CWE-1085:
    categories:
    - ALL
    - boost-hardened
    description: A function, method, procedure, etc. contains an excessive amount
      of code that has been commented out within its body.
    group: top10-insecure-design
    name: CWE-1085
    pretty_name: 'CWE-1085: Invokable Control Element with Excessive Volume of Commented-out
      Code'
    ref: https://cwe.mitre.org/data/definitions/1085.html
  CWE-1086:
    categories:
    - ALL
    - boost-hardened
    description: A class contains an unnecessarily large number of children.
    group: top10-insecure-design
    name: CWE-1086
    pretty_name: 'CWE-1086: Class with Excessive Number of Child Classes'
    ref: https://cwe.mitre.org/data/definitions/1086.html
  CWE-1087:
    categories:
    - ALL
    - boost-hardened
    description: A class contains a virtual method, but the method does not have an
      associated virtual destructor.
    group: top10-insecure-design
    name: CWE-1087
    pretty_name: 'CWE-1087: Class with Virtual Method without a Virtual Destructor'
    ref: https://cwe.mitre.org/data/definitions/1087.html
  CWE-1088:
    categories:
    - ALL
    - boost-hardened
    description: The code has a synchronous call to a remote resource, but there is
      no timeout for the call, or the timeout is set to infinite.
    group: top10-insecure-design
    name: CWE-1088
    pretty_name: 'CWE-1088: Synchronous Access of Remote Resource without Timeout'
    ref: https://cwe.mitre.org/data/definitions/1088.html
  CWE-1089:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a large data table that contains an excessively
      large number of indices.
    group: top10-insecure-design
    name: CWE-1089
    pretty_name: 'CWE-1089: Large Data Table with Excessive Number of Indices'
    ref: https://cwe.mitre.org/data/definitions/1089.html
  CWE-109:
    categories:
    - ALL
    - boost-hardened
    description: Automatic filtering via a Struts bean has been turned off, which
      disables the Struts Validator and custom validation logic. This exposes the
      application to other weaknesses related to insufficient input validation.
    group: top10-insecure-design
    name: CWE-109
    pretty_name: 'CWE-109: Struts: Validator Turned Off'
    ref: https://cwe.mitre.org/data/definitions/109.html
  CWE-1090:
    categories:
    - ALL
    - boost-hardened
    description: A method for a class performs an operation that directly accesses
      a member element from another class.
    group: top10-insecure-design
    name: CWE-1090
    pretty_name: 'CWE-1090: Method Containing Access of a Member Element from Another
      Class'
    ref: https://cwe.mitre.org/data/definitions/1090.html
  CWE-1091:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a method that accesses an object but does not
      later invoke the element's associated finalize/destructor method.
    group: top10-insecure-design
    name: CWE-1091
    pretty_name: 'CWE-1091: Use of Object without Invoking Destructor Method'
    ref: https://cwe.mitre.org/data/definitions/1091.html
  CWE-1092:
    categories:
    - ALL
    - boost-hardened
    description: The product uses the same control element across multiple architectural
      layers.
    group: top10-insecure-design
    name: CWE-1092
    pretty_name: 'CWE-1092: Use of Same Invokable Control Element in Multiple Architectural
      Layers'
    ref: https://cwe.mitre.org/data/definitions/1092.html
  CWE-1093:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an unnecessarily complex internal representation
      for its data structures or interrelationships between those structures.
    group: top10-insecure-design
    name: CWE-1093
    pretty_name: 'CWE-1093: Excessively Complex Data Representation'
    ref: https://cwe.mitre.org/data/definitions/1093.html
  CWE-1094:
    categories:
    - ALL
    - boost-hardened
    description: The product contains an index range scan for a large data table,
      but the scan can cover a large number of rows.
    group: top10-insecure-design
    name: CWE-1094
    pretty_name: 'CWE-1094: Excessive Index Range Scan for a Data Resource'
    ref: https://cwe.mitre.org/data/definitions/1094.html
  CWE-1095:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a loop with a control flow condition based on a
      value that is updated within the body of the loop.
    group: top10-insecure-design
    name: CWE-1095
    pretty_name: 'CWE-1095: Loop Condition Value Update within the Loop'
    ref: https://cwe.mitre.org/data/definitions/1095.html
  CWE-1096:
    categories:
    - ALL
    - boost-hardened
    description: The product implements a Singleton design pattern but does not use
      appropriate locking or other synchronization mechanism to ensure that the singleton
      class is only instantiated once.
    group: top10-insecure-design
    name: CWE-1096
    pretty_name: 'CWE-1096: Singleton Class Instance Creation without Proper Locking
      or Synchronization'
    ref: https://cwe.mitre.org/data/definitions/1096.html
  CWE-1097:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a storable data element that does not have all of
      the associated functions or methods that are necessary to support comparison.
    group: top10-insecure-design
    name: CWE-1097
    pretty_name: 'CWE-1097: Persistent Storable Data Element without Associated Comparison
      Control Element'
    ref: https://cwe.mitre.org/data/definitions/1097.html
  CWE-1098:
    categories:
    - ALL
    - boost-hardened
    description: The code contains a data element with a pointer that does not have
      an associated copy or constructor method.
    group: top10-insecure-design
    name: CWE-1098
    pretty_name: 'CWE-1098: Data Element containing Pointer Item without Proper Copy
      Control Element'
    ref: https://cwe.mitre.org/data/definitions/1098.html
  CWE-1099:
    categories:
    - ALL
    - boost-hardened
    description: The product's code, documentation, or other artifacts do not consistently
      use the same naming conventions for variables, callables, groups of related
      callables, I/O capabilities, data types, file names, or similar types of elements.
    group: top10-insecure-design
    name: CWE-1099
    pretty_name: 'CWE-1099: Inconsistent Naming Conventions for Identifiers'
    ref: https://cwe.mitre.org/data/definitions/1099.html
  CWE-11:
    categories:
    - ALL
    - boost-hardened
    description: Debugging messages help attackers learn about the system and plan
      a form of attack.
    group: top10-security-misconfiguration
    name: CWE-11
    pretty_name: 'CWE-11: ASP.NET Misconfiguration: Creating Debug Binary'
    ref: https://cwe.mitre.org/data/definitions/11.html
  CWE-110:
    categories:
    - ALL
    - boost-hardened
    description: Validation fields that do not appear in forms they are associated
      with indicate that the validation logic is out of date.
    group: top10-insecure-design
    name: CWE-110
    pretty_name: 'CWE-110: Struts: Validator Without Form Field'
    ref: https://cwe.mitre.org/data/definitions/110.html
  CWE-1100:
    categories:
    - ALL
    - boost-hardened
    description: The product or code does not isolate system-dependent functionality
      into separate standalone modules.
    group: top10-insecure-design
    name: CWE-1100
    pretty_name: 'CWE-1100: Insufficient Isolation of System-Dependent Functions'
    ref: https://cwe.mitre.org/data/definitions/1100.html
  CWE-1101:
    categories:
    - ALL
    - boost-hardened
    description: The product uses automatically-generated code that cannot be executed
      without a specific runtime support component.
    group: top10-insecure-design
    name: CWE-1101
    pretty_name: 'CWE-1101: Reliance on Runtime Component in Generated Code'
    ref: https://cwe.mitre.org/data/definitions/1101.html
  CWE-1102:
    categories:
    - ALL
    - boost-hardened
    description: The code uses a data representation that relies on low-level data
      representation or constructs that may vary across different processors, physical
      machines, OSes, or other physical components.
    group: top10-insecure-design
    name: CWE-1102
    pretty_name: 'CWE-1102: Reliance on Machine-Dependent Data Representation'
    ref: https://cwe.mitre.org/data/definitions/1102.html
  CWE-1103:
    categories:
    - ALL
    - boost-hardened
    description: The product relies on third-party components that do not provide
      equivalent functionality across all desirable platforms.
    group: top10-insecure-design
    name: CWE-1103
    pretty_name: 'CWE-1103: Use of Platform-Dependent Third Party Components'
    ref: https://cwe.mitre.org/data/definitions/1103.html
  CWE-1104:
    categories:
    - ALL
    - cwe-1104
    - boost-hardened
    - owasp-top-10
    description: The product relies on third-party components that are not actively
      supported or maintained by the original developer or a trusted proxy for the
      original developer.
    group: top10-vulnerable-components
    name: CWE-1104
    pretty_name: 'CWE-1104: Use of Unmaintained Third Party Components'
    ref: https://cwe.mitre.org/data/definitions/1104.html
  CWE-1105:
    categories:
    - ALL
    - boost-hardened
    description: The product or code uses machine-dependent functionality, but it
      does not sufficiently encapsulate or isolate this functionality from the rest
      of the code.
    group: top10-insecure-design
    name: CWE-1105
    pretty_name: 'CWE-1105: Insufficient Encapsulation of Machine-Dependent Functionality'
    ref: https://cwe.mitre.org/data/definitions/1105.html
  CWE-1106:
    categories:
    - ALL
    - boost-hardened
    description: The source code uses literal constants that may need to change or
      evolve over time, instead of using symbolic constants.
    group: top10-insecure-design
    name: CWE-1106
    pretty_name: 'CWE-1106: Insufficient Use of Symbolic Constants'
    ref: https://cwe.mitre.org/data/definitions/1106.html
  CWE-1107:
    categories:
    - ALL
    - boost-hardened
    description: The source code uses symbolic constants, but it does not sufficiently
      place the definitions of these constants into a more centralized or isolated
      location.
    group: top10-insecure-design
    name: CWE-1107
    pretty_name: 'CWE-1107: Insufficient Isolation of Symbolic Constant Definitions'
    ref: https://cwe.mitre.org/data/definitions/1107.html
  CWE-1108:
    categories:
    - ALL
    - boost-hardened
    description: The code is structured in a way that relies too much on using or
      setting global variables throughout various points in the code, instead of preserving
      the associated information in a narrower, more local context.
    group: top10-insecure-design
    name: CWE-1108
    pretty_name: 'CWE-1108: Excessive Reliance on Global Variables'
    ref: https://cwe.mitre.org/data/definitions/1108.html
  CWE-1109:
    categories:
    - ALL
    - boost-hardened
    description: The code contains a callable, block, or other code element in which
      the same variable is used to control more than one unique task or store more
      than one instance of data.
    group: top10-insecure-design
    name: CWE-1109
    pretty_name: 'CWE-1109: Use of Same Variable for Multiple Purposes'
    ref: https://cwe.mitre.org/data/definitions/1109.html
  CWE-111:
    categories:
    - ALL
    - boost-hardened
    description: When a Java application uses the Java Native Interface (JNI) to call
      code written in another programming language, it can expose the application
      to weaknesses in that code, even if those weaknesses cannot occur in Java.
    group: top10-insecure-design
    name: CWE-111
    pretty_name: 'CWE-111: Direct Use of Unsafe JNI'
    ref: https://cwe.mitre.org/data/definitions/111.html
  CWE-1110:
    categories:
    - ALL
    - boost-hardened
    description: The product's design documentation does not adequately describe control
      flow, data flow, system initialization, relationships between tasks, components,
      rationales, or other important aspects of the design.
    group: top10-insecure-design
    name: CWE-1110
    pretty_name: 'CWE-1110: Incomplete Design Documentation'
    ref: https://cwe.mitre.org/data/definitions/1110.html
  CWE-1111:
    categories:
    - ALL
    - boost-hardened
    description: The product's documentation does not adequately define inputs, outputs,
      or system/software interfaces.
    group: top10-insecure-design
    name: CWE-1111
    pretty_name: 'CWE-1111: Incomplete I/O Documentation'
    ref: https://cwe.mitre.org/data/definitions/1111.html
  CWE-1112:
    categories:
    - ALL
    - boost-hardened
    description: The document does not fully define all mechanisms that are used to
      control or influence how product-specific programs are executed.
    group: top10-insecure-design
    name: CWE-1112
    pretty_name: 'CWE-1112: Incomplete Documentation of Program Execution'
    ref: https://cwe.mitre.org/data/definitions/1112.html
  CWE-1113:
    categories:
    - ALL
    - boost-hardened
    description: The source code uses comment styles or formats that are inconsistent
      or do not follow expected standards for the product.
    group: top10-insecure-design
    name: CWE-1113
    pretty_name: 'CWE-1113: Inappropriate Comment Style'
    ref: https://cwe.mitre.org/data/definitions/1113.html
  CWE-1114:
    categories:
    - ALL
    - boost-hardened
    description: The source code contains whitespace that is inconsistent across the
      code or does not follow expected standards for the product.
    group: top10-insecure-design
    name: CWE-1114
    pretty_name: 'CWE-1114: Inappropriate Whitespace Style'
    ref: https://cwe.mitre.org/data/definitions/1114.html
  CWE-1115:
    categories:
    - ALL
    - boost-hardened
    description: The source code contains elements such as source files that do not
      consistently provide a prologue or header that has been standardized for the
      project.
    group: top10-insecure-design
    name: CWE-1115
    pretty_name: 'CWE-1115: Source Code Element without Standard Prologue'
    ref: https://cwe.mitre.org/data/definitions/1115.html
  CWE-1116:
    categories:
    - ALL
    - boost-hardened
    description: The source code contains comments that do not accurately describe
      or explain aspects of the portion of the code with which the comment is associated.
    group: top10-insecure-design
    name: CWE-1116
    pretty_name: 'CWE-1116: Inaccurate Comments'
    ref: https://cwe.mitre.org/data/definitions/1116.html
  CWE-1117:
    categories:
    - ALL
    - boost-hardened
    description: The code contains a function or method whose signature and/or associated
      inline documentation does not sufficiently describe the callable's inputs, outputs,
      side effects, assumptions, or return codes.
    group: top10-insecure-design
    name: CWE-1117
    pretty_name: 'CWE-1117: Callable with Insufficient Behavioral Summary'
    ref: https://cwe.mitre.org/data/definitions/1117.html
  CWE-1118:
    categories:
    - ALL
    - boost-hardened
    description: The documentation does not sufficiently describe the techniques that
      are used for error handling, exception processing, or similar mechanisms.
    group: top10-insecure-design
    name: CWE-1118
    pretty_name: 'CWE-1118: Insufficient Documentation of Error Handling Techniques'
    ref: https://cwe.mitre.org/data/definitions/1118.html
  CWE-1119:
    categories:
    - ALL
    - boost-hardened
    description: The code uses too many unconditional branches (such as "goto").
    group: top10-insecure-design
    name: CWE-1119
    pretty_name: 'CWE-1119: Excessive Use of Unconditional Branching'
    ref: https://cwe.mitre.org/data/definitions/1119.html
  CWE-112:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts XML from an untrusted source but does not validate
      the XML against the proper schema.
    group: top10-injection
    name: CWE-112
    pretty_name: 'CWE-112: Missing XML Validation'
    ref: https://cwe.mitre.org/data/definitions/112.html
  CWE-1120:
    categories:
    - ALL
    - boost-hardened
    description: The code is too complex, as calculated using a well-defined, quantitative
      measure.
    group: top10-insecure-design
    name: CWE-1120
    pretty_name: 'CWE-1120: Excessive Code Complexity'
    ref: https://cwe.mitre.org/data/definitions/1120.html
  CWE-1121:
    categories:
    - ALL
    - boost-hardened
    description: The code contains McCabe cyclomatic complexity that exceeds a desirable
      maximum.
    group: top10-insecure-design
    name: CWE-1121
    pretty_name: 'CWE-1121: Excessive McCabe Cyclomatic Complexity'
    ref: https://cwe.mitre.org/data/definitions/1121.html
  CWE-1122:
    categories:
    - ALL
    - boost-hardened
    description: The code is structured in a way that a Halstead complexity measure
      exceeds a desirable maximum.
    group: top10-insecure-design
    name: CWE-1122
    pretty_name: 'CWE-1122: Excessive Halstead Complexity'
    ref: https://cwe.mitre.org/data/definitions/1122.html
  CWE-1123:
    categories:
    - ALL
    - boost-hardened
    description: The product uses too much self-modifying code.
    group: top10-insecure-design
    name: CWE-1123
    pretty_name: 'CWE-1123: Excessive Use of Self-Modifying Code'
    ref: https://cwe.mitre.org/data/definitions/1123.html
  CWE-1124:
    categories:
    - ALL
    - boost-hardened
    description: The code contains a callable or other code grouping in which the
      nesting / branching is too deep.
    group: top10-insecure-design
    name: CWE-1124
    pretty_name: 'CWE-1124: Excessively Deep Nesting'
    ref: https://cwe.mitre.org/data/definitions/1124.html
  CWE-1125:
    categories:
    - ALL
    - boost-hardened
    description: The product has an attack surface whose quantitative measurement
      exceeds a desirable maximum.
    group: top10-insecure-design
    name: CWE-1125
    pretty_name: 'CWE-1125: Excessive Attack Surface'
    ref: https://cwe.mitre.org/data/definitions/1125.html
  CWE-1126:
    categories:
    - ALL
    - boost-hardened
    description: The source code declares a variable in one scope, but the variable
      is only used within a narrower scope.
    group: top10-insecure-design
    name: CWE-1126
    pretty_name: 'CWE-1126: Declaration of Variable with Unnecessarily Wide Scope'
    ref: https://cwe.mitre.org/data/definitions/1126.html
  CWE-1127:
    categories:
    - ALL
    - boost-hardened
    description: The code is compiled without sufficient warnings enabled, which may
      prevent the detection of subtle bugs or quality issues.
    group: top10-insecure-design
    name: CWE-1127
    pretty_name: 'CWE-1127: Compilation with Insufficient Warnings or Errors'
    ref: https://cwe.mitre.org/data/definitions/1127.html
  CWE-113:
    categories:
    - ALL
    - boost-hardened
    description: The product receives data from an HTTP agent/component (e.g., web
      server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes
      CR and LF characters before the data is included in outgoing HTTP headers.
    group: top10-injection
    name: CWE-113
    pretty_name: 'CWE-113: Improper Neutralization of CRLF Sequences in HTTP Headers
      (''HTTP Request/Response Splitting'')'
    ref: https://cwe.mitre.org/data/definitions/113.html
  CWE-114:
    categories:
    - ALL
    - boost-hardened
    description: Executing commands or loading libraries from an untrusted source
      or in an untrusted environment can cause an application to execute malicious
      commands (and payloads) on behalf of an attacker.
    group: top10-insecure-design
    name: CWE-114
    pretty_name: 'CWE-114: Process Control'
    ref: https://cwe.mitre.org/data/definitions/114.html
  CWE-115:
    categories:
    - ALL
    - boost-hardened
    description: The product misinterprets an input, whether from an attacker or another
      product, in a security-relevant fashion.
    group: top10-insecure-design
    name: CWE-115
    pretty_name: 'CWE-115: Misinterpretation of Input'
    ref: https://cwe.mitre.org/data/definitions/115.html
  CWE-116:
    categories:
    - ALL
    - cwe-116
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product prepares a structured message for communication with
      another component, but encoding or escaping of the data is either missing or
      done incorrectly. As a result, the intended structure of the message is not
      preserved.
    group: top10-injection
    name: CWE-116
    pretty_name: 'CWE-116: Improper Encoding or Escaping of Output'
    ref: https://cwe.mitre.org/data/definitions/116.html
    recommended: true
  CWE-1164:
    categories:
    - ALL
    - boost-hardened
    description: The product contains code that is not essential for execution, i.e.
      makes no state changes and has no side effects that alter data or control flow,
      such that removal of the code would have no impact to functionality or correctness.
    group: top10-insecure-design
    name: CWE-1164
    pretty_name: 'CWE-1164: Irrelevant Code'
    ref: https://cwe.mitre.org/data/definitions/1164.html
  CWE-117:
    categories:
    - ALL
    - boost-hardened
    description: The product does not neutralize or incorrectly neutralizes output
      that is written to logs.
    group: top10-security-logging-monitoring-failures
    name: CWE-117
    pretty_name: 'CWE-117: Improper Output Neutralization for Logs'
    ref: https://cwe.mitre.org/data/definitions/117.html
  CWE-1173:
    categories:
    - ALL
    - boost-hardened
    description: The product does not use, or incorrectly uses, an input validation
      framework that is provided by the source language or an independent library.
    group: top10-insecure-design
    name: CWE-1173
    pretty_name: 'CWE-1173: Improper Use of Validation Framework'
    ref: https://cwe.mitre.org/data/definitions/1173.html
  CWE-1174:
    categories:
    - ALL
    - boost-hardened
    description: The ASP.NET application does not use, or incorrectly uses, the model
      validation framework.
    group: top10-security-misconfiguration
    name: CWE-1174
    pretty_name: 'CWE-1174: ASP.NET Misconfiguration: Improper Model Validation'
    ref: https://cwe.mitre.org/data/definitions/1174.html
  CWE-1176:
    categories:
    - ALL
    - boost-hardened
    description: The product performs CPU computations using algorithms that are not
      as efficient as they could be for the needs of the developer, i.e., the computations
      can be optimized further.
    group: top10-insecure-design
    name: CWE-1176
    pretty_name: 'CWE-1176: Inefficient CPU Computation'
    ref: https://cwe.mitre.org/data/definitions/1176.html
  CWE-1177:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a function, library, or third party component that
      has been explicitly prohibited, whether by the developer or the customer.
    group: top10-insecure-design
    name: CWE-1177
    pretty_name: 'CWE-1177: Use of Prohibited Code'
    ref: https://cwe.mitre.org/data/definitions/1177.html
  CWE-118:
    categories:
    - ALL
    - boost-hardened
    description: The product does not restrict or incorrectly restricts operations
      within the boundaries of a resource that is accessed using an index or pointer,
      such as memory or files.
    group: top10-insecure-design
    name: CWE-118
    pretty_name: 'CWE-118: Incorrect Access of Indexable Resource (''Range Error'')'
    ref: https://cwe.mitre.org/data/definitions/118.html
  CWE-1188:
    categories:
    - ALL
    - boost-hardened
    description: The product initializes or sets a resource with a default that is
      intended to be changed by the administrator, but the default is not secure.
    group: top10-insecure-design
    name: CWE-1188
    pretty_name: 'CWE-1188: Insecure Default Initialization of Resource'
    ref: https://cwe.mitre.org/data/definitions/1188.html
  CWE-1189:
    categories:
    - ALL
    - boost-hardened
    description: The System-On-a-Chip (SoC) does not properly isolate shared resources
      between trusted and untrusted agents.
    group: top10-insecure-design
    name: CWE-1189
    pretty_name: 'CWE-1189: Improper Isolation of Shared Resources on System-on-a-Chip
      (SoC)'
    ref: https://cwe.mitre.org/data/definitions/1189.html
  CWE-119:
    categories:
    - ALL
    - cwe-119
    - boost-hardened
    - cwe-top-25
    description: The product performs operations on a memory buffer, but it can read
      from or write to a memory location that is outside of the intended boundary
      of the buffer.
    group: top10-insecure-design
    name: CWE-119
    pretty_name: 'CWE-119: Improper Restriction of Operations within the Bounds of
      a Memory Buffer'
    ref: https://cwe.mitre.org/data/definitions/119.html
  CWE-1190:
    categories:
    - ALL
    - boost-hardened
    description: The product enables a Direct Memory Access (DMA) capable device before
      the security configuration settings are established, which allows an attacker
      to extract data from or gain privileges on the product.
    group: top10-insecure-design
    name: CWE-1190
    pretty_name: 'CWE-1190: DMA Device Enabled Too Early in Boot Phase'
    ref: https://cwe.mitre.org/data/definitions/1190.html
  CWE-1191:
    categories:
    - ALL
    - boost-hardened
    description: The chip does not implement or does not correctly perform access
      control to check whether users are authorized to access internal registers and
      test modes through the physical debug/test interface.
    group: top10-broken-access-control
    name: CWE-1191
    pretty_name: 'CWE-1191: On-Chip Debug and Test Interface With Improper Access
      Control'
    ref: https://cwe.mitre.org/data/definitions/1191.html
  CWE-1192:
    categories:
    - ALL
    - boost-hardened
    description: The System-on-Chip (SoC) does not have unique, immutable identifiers
      for each of its components.
    group: top10-insecure-design
    name: CWE-1192
    pretty_name: 'CWE-1192: System-on-Chip (SoC) Using Components without Unique,
      Immutable Identifiers'
    ref: https://cwe.mitre.org/data/definitions/1192.html
  CWE-1193:
    categories:
    - ALL
    - boost-hardened
    description: The product enables components that contain untrusted firmware before
      memory and fabric access controls have been enabled.
    group: top10-insecure-design
    name: CWE-1193
    pretty_name: 'CWE-1193: Power-On of Untrusted Execution Core Before Enabling Fabric
      Access Control'
    ref: https://cwe.mitre.org/data/definitions/1193.html
  CWE-12:
    categories:
    - ALL
    - boost-hardened
    description: An ASP .NET application must enable custom error pages in order to
      prevent attackers from mining information from the framework's built-in responses.
    group: top10-security-misconfiguration
    name: CWE-12
    pretty_name: 'CWE-12: ASP.NET Misconfiguration: Missing Custom Error Page'
    ref: https://cwe.mitre.org/data/definitions/12.html
  CWE-120:
    categories:
    - ALL
    - boost-hardened
    description: The product copies an input buffer to an output buffer without verifying
      that the size of the input buffer is less than the size of the output buffer,
      leading to a buffer overflow.
    group: top10-insecure-design
    name: CWE-120
    pretty_name: 'CWE-120: Buffer Copy without Checking Size of Input (''Classic Buffer
      Overflow'')'
    ref: https://cwe.mitre.org/data/definitions/120.html
  CWE-1204:
    categories:
    - ALL
    - boost-hardened
    description: 'The product uses a cryptographic primitive that uses an Initialization
      Vector (IV), but the product does not generate IVs that are sufficiently unpredictable
      or unique according to the expected cryptographic requirements for that primitive. '
    group: top10-crypto-failures
    name: CWE-1204
    pretty_name: 'CWE-1204: Generation of Weak Initialization Vector (IV)'
    ref: https://cwe.mitre.org/data/definitions/1204.html
  CWE-1209:
    categories:
    - ALL
    - boost-hardened
    description: The reserved bits in a hardware design are not disabled prior to
      production. Typically, reserved bits are used for future capabilities and should
      not support any functional logic in the design. However, designers might covertly
      use these bits to debug or further develop new capabilities in production hardware.
      Adversaries with access to these bits will write to them in hopes of compromising
      hardware state.
    group: top10-insecure-design
    name: CWE-1209
    pretty_name: 'CWE-1209: Failure to Disable Reserved Bits'
    ref: https://cwe.mitre.org/data/definitions/1209.html
  CWE-121:
    categories:
    - ALL
    - boost-hardened
    description: A stack-based buffer overflow condition is a condition where the
      buffer being overwritten is allocated on the stack (i.e., is a local variable
      or, rarely, a parameter to a function).
    group: top10-insecure-design
    name: CWE-121
    pretty_name: 'CWE-121: Stack-based Buffer Overflow'
    ref: https://cwe.mitre.org/data/definitions/121.html
  CWE-122:
    categories:
    - ALL
    - boost-hardened
    description: A heap overflow condition is a buffer overflow, where the buffer
      that can be overwritten is allocated in the heap portion of memory, generally
      meaning that the buffer was allocated using a routine such as malloc().
    group: top10-insecure-design
    name: CWE-122
    pretty_name: 'CWE-122: Heap-based Buffer Overflow'
    ref: https://cwe.mitre.org/data/definitions/122.html
  CWE-1220:
    categories:
    - ALL
    - boost-hardened
    description: The product implements access controls via a policy or other feature
      with the intention to disable or restrict accesses (reads and/or writes) to
      assets in a system from untrusted agents. However, implemented access controls
      lack required granularity, which renders the control policy too broad because
      it allows accesses from unauthorized agents to the security-sensitive assets.
    group: top10-broken-access-control
    name: CWE-1220
    pretty_name: 'CWE-1220: Insufficient Granularity of Access Control'
    ref: https://cwe.mitre.org/data/definitions/1220.html
  CWE-1221:
    categories:
    - ALL
    - boost-hardened
    description: Hardware description language code incorrectly defines register defaults
      or hardware IP parameters to insecure values.
    group: top10-insecure-design
    name: CWE-1221
    pretty_name: 'CWE-1221: Incorrect Register Defaults or Module Parameters'
    ref: https://cwe.mitre.org/data/definitions/1221.html
  CWE-1222:
    categories:
    - ALL
    - boost-hardened
    description: The product defines a large address region protected from modification
      by the same register lock control bit. This results in a conflict between the
      functional requirement that some addresses need to be writable by software during
      operation and the security requirement that the system configuration lock bit
      must be set during the boot process.
    group: top10-broken-access-control
    name: CWE-1222
    pretty_name: 'CWE-1222: Insufficient Granularity of Address Regions Protected
      by Register Locks'
    ref: https://cwe.mitre.org/data/definitions/1222.html
  CWE-1223:
    categories:
    - ALL
    - boost-hardened
    description: A write-once register in hardware design is programmable by an untrusted
      software component earlier than the trusted software component, resulting in
      a race condition issue.
    group: top10-insecure-design
    name: CWE-1223
    pretty_name: 'CWE-1223: Race Condition for Write-Once Attributes'
    ref: https://cwe.mitre.org/data/definitions/1223.html
  CWE-1224:
    categories:
    - ALL
    - boost-hardened
    description: The hardware design control register "sticky bits" or write-once
      bit fields are improperly implemented, such that they can be reprogrammed by
      software.
    group: top10-broken-access-control
    name: CWE-1224
    pretty_name: 'CWE-1224: Improper Restriction of Write-Once Bit Fields'
    ref: https://cwe.mitre.org/data/definitions/1224.html
  CWE-1229:
    categories:
    - ALL
    - boost-hardened
    description: The product manages resources or behaves in a way that indirectly
      creates a new, distinct resource that can be used by attackers in violation
      of the intended policy.
    group: top10-insecure-design
    name: CWE-1229
    pretty_name: 'CWE-1229: Creation of Emergent Resource'
    ref: https://cwe.mitre.org/data/definitions/1229.html
  CWE-123:
    categories:
    - ALL
    - boost-hardened
    description: Any condition where the attacker has the ability to write an arbitrary
      value to an arbitrary location, often as the result of a buffer overflow.
    group: top10-insecure-design
    name: CWE-123
    pretty_name: 'CWE-123: Write-what-where Condition'
    ref: https://cwe.mitre.org/data/definitions/123.html
  CWE-1230:
    categories:
    - ALL
    - boost-hardened
    description: The product prevents direct access to a resource containing sensitive
      information, but it does not sufficiently limit access to metadata that is derived
      from the original, sensitive information.
    group: top10-broken-access-control
    name: CWE-1230
    pretty_name: 'CWE-1230: Exposure of Sensitive Information Through Metadata'
    ref: https://cwe.mitre.org/data/definitions/1230.html
  CWE-1231:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a trusted lock bit for restricting access to registers,
      address regions, or other resources, but the product does not prevent the value
      of the lock bit from being modified after it has been set.
    group: top10-broken-access-control
    name: CWE-1231
    pretty_name: 'CWE-1231: Improper Prevention of Lock Bit Modification'
    ref: https://cwe.mitre.org/data/definitions/1231.html
  CWE-1232:
    categories:
    - ALL
    - boost-hardened
    description: Register lock bit protection disables changes to system configuration
      once the bit is set. Some of the protected registers or lock bits become programmable
      after power state transitions (e.g., Entry and wake from low power sleep modes)
      causing the system configuration to be changeable.
    group: top10-insecure-design
    name: CWE-1232
    pretty_name: 'CWE-1232: Improper Lock Behavior After Power State Transition'
    ref: https://cwe.mitre.org/data/definitions/1232.html
  CWE-1233:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a register lock bit protection mechanism, but it
      does not ensure that the lock bit prevents modification of system registers
      or controls that perform changes to important hardware system configuration.
    group: top10-broken-access-control
    name: CWE-1233
    pretty_name: 'CWE-1233: Security-Sensitive Hardware Controls with Missing Lock
      Bit Protection'
    ref: https://cwe.mitre.org/data/definitions/1233.html
  CWE-1234:
    categories:
    - ALL
    - boost-hardened
    description: System configuration protection may be bypassed during debug mode.
    group: top10-insecure-design
    name: CWE-1234
    pretty_name: 'CWE-1234: Hardware Internal or Debug Modes Allow Override of Locks'
    ref: https://cwe.mitre.org/data/definitions/1234.html
  CWE-1235:
    categories:
    - ALL
    - boost-hardened
    description: The code uses boxed primitives, which may introduce inefficiencies
      into performance-critical operations.
    group: top10-insecure-design
    name: CWE-1235
    pretty_name: 'CWE-1235: Incorrect Use of Autoboxing and Unboxing for Performance
      Critical Operations'
    ref: https://cwe.mitre.org/data/definitions/1235.html
  CWE-1236:
    categories:
    - ALL
    - cwe-1236
    - boost-hardened
    description: The product saves user-provided information into a Comma-Separated
      Value (CSV) file, but it does not neutralize or incorrectly neutralizes special
      elements that could be interpreted as a command when the file is opened by a
      spreadsheet product.
    group: top10-injection
    name: CWE-1236
    pretty_name: 'CWE-1236: Improper Neutralization of Formula Elements in a CSV File'
    ref: https://cwe.mitre.org/data/definitions/1236.html
  CWE-1239:
    categories:
    - ALL
    - boost-hardened
    description: The hardware product does not properly clear sensitive information
      from built-in registers when the user of the hardware block changes.
    group: top10-insecure-design
    name: CWE-1239
    pretty_name: 'CWE-1239: Improper Zeroization of Hardware Register'
    ref: https://cwe.mitre.org/data/definitions/1239.html
  CWE-124:
    categories:
    - ALL
    - boost-hardened
    description: The product writes to a buffer using an index or pointer that references
      a memory location prior to the beginning of the buffer.
    group: top10-insecure-design
    name: CWE-124
    pretty_name: 'CWE-124: Buffer Underwrite (''Buffer Underflow'')'
    ref: https://cwe.mitre.org/data/definitions/124.html
  CWE-1240:
    categories:
    - ALL
    - boost-hardened
    description: To fulfill the need for a cryptographic primitive, the product implements
      a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant
      cryptographic implementation.
    group: top10-crypto-failures
    name: CWE-1240
    pretty_name: 'CWE-1240: Use of a Cryptographic Primitive with a Risky Implementation'
    ref: https://cwe.mitre.org/data/definitions/1240.html
  CWE-1241:
    categories:
    - ALL
    - boost-hardened
    description: The device uses an algorithm that is predictable and generates a
      pseudo-random number.
    group: top10-crypto-failures
    name: CWE-1241
    pretty_name: 'CWE-1241: Use of Predictable Algorithm in Random Number Generator'
    ref: https://cwe.mitre.org/data/definitions/1241.html
  CWE-1242:
    categories:
    - ALL
    - boost-hardened
    description: The device includes chicken bits or undocumented features that can
      create entry points for unauthorized actors.
    group: top10-broken-access-control
    name: CWE-1242
    pretty_name: 'CWE-1242: Inclusion of Undocumented Features or Chicken Bits'
    ref: https://cwe.mitre.org/data/definitions/1242.html
  CWE-1243:
    categories:
    - ALL
    - boost-hardened
    description: Access to security-sensitive information stored in fuses is not limited
      during debug.
    group: top10-broken-access-control
    name: CWE-1243
    pretty_name: 'CWE-1243: Sensitive Non-Volatile Information Not Protected During
      Debug'
    ref: https://cwe.mitre.org/data/definitions/1243.html
  CWE-1244:
    categories:
    - ALL
    - boost-hardened
    description: The product uses physical debug or test interfaces with support for
      multiple access levels, but it assigns the wrong debug access level to an internal
      asset, providing unintended access to the asset from untrusted debug agents.
    group: top10-broken-access-control
    name: CWE-1244
    pretty_name: 'CWE-1244: Internal Asset Exposed to Unsafe Debug Access Level or
      State'
    ref: https://cwe.mitre.org/data/definitions/1244.html
  CWE-1245:
    categories:
    - ALL
    - boost-hardened
    description: Faulty finite state machines (FSMs) in the hardware logic allow an
      attacker to put the system in an undefined state, to cause a denial of service
      (DoS) or gain privileges on the victim's system.
    group: top10-insecure-design
    name: CWE-1245
    pretty_name: 'CWE-1245: Improper Finite State Machines (FSMs) in Hardware Logic'
    ref: https://cwe.mitre.org/data/definitions/1245.html
  CWE-1246:
    categories:
    - ALL
    - boost-hardened
    description: The product does not implement or incorrectly implements wear leveling
      operations in limited-write non-volatile memories.
    group: top10-insecure-design
    name: CWE-1246
    pretty_name: 'CWE-1246: Improper Write Handling in Limited-write Non-Volatile
      Memories'
    ref: https://cwe.mitre.org/data/definitions/1246.html
  CWE-1247:
    categories:
    - ALL
    - boost-hardened
    description: The device does not contain or contains incorrectly implemented circuitry
      or sensors to detect and mitigate voltage and clock glitches and protect sensitive
      information or software contained on the device.
    group: top10-insecure-design
    name: CWE-1247
    pretty_name: 'CWE-1247: Improper Protection Against Voltage and Clock Glitches'
    ref: https://cwe.mitre.org/data/definitions/1247.html
  CWE-1248:
    categories:
    - ALL
    - boost-hardened
    description: The security-sensitive hardware module contains semiconductor defects.
    group: top10-insecure-design
    name: CWE-1248
    pretty_name: 'CWE-1248: Semiconductor Defects in Hardware Logic with Security-Sensitive
      Implications'
    ref: https://cwe.mitre.org/data/definitions/1248.html
  CWE-1249:
    categories:
    - ALL
    - boost-hardened
    description: The product provides an application for administrators to manage
      parts of the underlying operating system, but the application does not accurately
      identify all of the relevant entities or resources that exist in the OS; that
      is, the application's model of the OS's state is inconsistent with the OS's
      actual state.
    group: top10-insecure-design
    name: CWE-1249
    pretty_name: 'CWE-1249: Application-Level Admin Tool with Inconsistent View of
      Underlying Operating System'
    ref: https://cwe.mitre.org/data/definitions/1249.html
  CWE-125:
    categories:
    - ALL
    - cwe-125
    - boost-hardened
    - cwe-top-25
    description: The product reads data past the end, or before the beginning, of
      the intended buffer.
    group: top10-insecure-design
    name: CWE-125
    pretty_name: 'CWE-125: Out-of-bounds Read'
    ref: https://cwe.mitre.org/data/definitions/125.html
  CWE-1250:
    categories:
    - ALL
    - boost-hardened
    description: The product has or supports multiple distributed components or sub-systems
      that are each required to keep their own local copy of shared data - such as
      state or cache - but the product does not ensure that all local copies remain
      consistent with each other.
    group: top10-insecure-design
    name: CWE-1250
    pretty_name: 'CWE-1250: Improper Preservation of Consistency Between Independent
      Representations of Shared State'
    ref: https://cwe.mitre.org/data/definitions/1250.html
  CWE-1251:
    categories:
    - ALL
    - boost-hardened
    description: The product's architecture mirrors regions without ensuring that
      their contents always stay in sync.
    group: top10-insecure-design
    name: CWE-1251
    pretty_name: 'CWE-1251: Mirrored Regions with Different Values'
    ref: https://cwe.mitre.org/data/definitions/1251.html
  CWE-1252:
    categories:
    - ALL
    - boost-hardened
    description: The CPU is not configured to provide hardware support for exclusivity
      of write and execute operations on memory. This allows an attacker to execute
      data from all of memory.
    group: top10-broken-access-control
    name: CWE-1252
    pretty_name: 'CWE-1252: CPU Hardware Not Configured to Support Exclusivity of
      Write and Execute Operations'
    ref: https://cwe.mitre.org/data/definitions/1252.html
  CWE-1253:
    categories:
    - ALL
    - boost-hardened
    description: The logic level used to set a system to a secure state relies on
      a fuse being unblown. An attacker can set the system to an insecure state merely
      by blowing the fuse.
    group: top10-insecure-design
    name: CWE-1253
    pretty_name: 'CWE-1253: Incorrect Selection of Fuse Values'
    ref: https://cwe.mitre.org/data/definitions/1253.html
  CWE-1254:
    categories:
    - ALL
    - cwe-1254
    - boost-hardened
    description: The product's comparison logic is performed over a series of steps
      rather than across the entire string in one operation. If there is a comparison
      logic failure on one of these steps, the operation may be vulnerable to a timing
      attack that can result in the interception of the process for nefarious purposes.
    group: top10-insecure-design
    name: CWE-1254
    pretty_name: 'CWE-1254: Incorrect Comparison Logic Granularity'
    ref: https://cwe.mitre.org/data/definitions/1254.html
  CWE-1255:
    categories:
    - ALL
    - boost-hardened
    description: A device's real time power consumption may be monitored during security
      token evaluation and the information gleaned may be used to determine the value
      of the reference token.
    group: top10-broken-access-control
    name: CWE-1255
    pretty_name: 'CWE-1255: Comparison Logic is Vulnerable to Power Side-Channel Attacks'
    ref: https://cwe.mitre.org/data/definitions/1255.html
  CWE-1256:
    categories:
    - ALL
    - boost-hardened
    description: The product provides software-controllable device functionality for
      capabilities such as power and clock management, but it does not properly limit
      functionality that can lead to modification of hardware memory or register bits,
      or the ability to observe physical side channels.
    group: top10-broken-access-control
    name: CWE-1256
    pretty_name: 'CWE-1256: Improper Restriction of Software Interfaces to Hardware
      Features'
    ref: https://cwe.mitre.org/data/definitions/1256.html
  CWE-1257:
    categories:
    - ALL
    - boost-hardened
    description: 'Aliased or mirrored memory regions in hardware designs may have
      inconsistent read/write permissions enforced by the hardware. A possible result
      is that an untrusted agent is blocked from accessing a memory region but is
      not blocked from accessing the corresponding aliased memory region. '
    group: top10-broken-access-control
    name: CWE-1257
    pretty_name: 'CWE-1257: Improper Access Control Applied to Mirrored or Aliased
      Memory Regions'
    ref: https://cwe.mitre.org/data/definitions/1257.html
  CWE-1258:
    categories:
    - ALL
    - boost-hardened
    description: The hardware does not fully clear security-sensitive values, such
      as keys and intermediate values in cryptographic operations, when debug mode
      is entered.
    group: top10-insecure-design
    name: CWE-1258
    pretty_name: 'CWE-1258: Exposure of Sensitive System Information Due to Uncleared
      Debug Information'
    ref: https://cwe.mitre.org/data/definitions/1258.html
  CWE-1259:
    categories:
    - ALL
    - boost-hardened
    description: The System-On-A-Chip (SoC) implements a Security Token mechanism
      to differentiate what actions are allowed or disallowed when a transaction originates
      from an entity. However, the Security Tokens are improperly protected.
    group: top10-broken-access-control
    name: CWE-1259
    pretty_name: 'CWE-1259: Improper Restriction of Security Token Assignment'
    ref: https://cwe.mitre.org/data/definitions/1259.html
  CWE-126:
    categories:
    - ALL
    - boost-hardened
    description: The product reads from a buffer using buffer access mechanisms such
      as indexes or pointers that reference memory locations after the targeted buffer.
    group: top10-insecure-design
    name: CWE-126
    pretty_name: 'CWE-126: Buffer Over-read'
    ref: https://cwe.mitre.org/data/definitions/126.html
  CWE-1260:
    categories:
    - ALL
    - boost-hardened
    description: The product allows address regions to overlap, which can result in
      the bypassing of intended memory protection.
    group: top10-broken-access-control
    name: CWE-1260
    pretty_name: 'CWE-1260: Improper Handling of Overlap Between Protected Memory
      Ranges'
    ref: https://cwe.mitre.org/data/definitions/1260.html
  CWE-1261:
    categories:
    - ALL
    - boost-hardened
    description: The hardware logic does not effectively handle when single-event
      upsets (SEUs) occur.
    group: top10-insecure-design
    name: CWE-1261
    pretty_name: 'CWE-1261: Improper Handling of Single Event Upsets'
    ref: https://cwe.mitre.org/data/definitions/1261.html
  CWE-1262:
    categories:
    - ALL
    - boost-hardened
    description: The product uses memory-mapped I/O registers that act as an interface
      to hardware functionality from software, but there is improper access control
      to those registers.
    group: top10-broken-access-control
    name: CWE-1262
    pretty_name: 'CWE-1262: Improper Access Control for Register Interface'
    ref: https://cwe.mitre.org/data/definitions/1262.html
  CWE-1263:
    categories:
    - ALL
    - boost-hardened
    description: The product is designed with access restricted to certain information,
      but it does not sufficiently protect against an unauthorized actor with physical
      access to these areas.
    group: top10-broken-access-control
    name: CWE-1263
    pretty_name: 'CWE-1263: Improper Physical Access Control'
    ref: https://cwe.mitre.org/data/definitions/1263.html
  CWE-1264:
    categories:
    - ALL
    - boost-hardened
    description: The hardware logic for error handling and security checks can incorrectly
      forward data before the security check is complete.
    group: top10-insecure-design
    name: CWE-1264
    pretty_name: 'CWE-1264: Hardware Logic with Insecure De-Synchronization between
      Control and Data Channels'
    ref: https://cwe.mitre.org/data/definitions/1264.html
  CWE-1265:
    categories:
    - ALL
    - boost-hardened
    description: During execution of non-reentrant code, the product performs a call
      that unintentionally produces a nested invocation of the non-reentrant code.
    group: top10-insecure-design
    name: CWE-1265
    pretty_name: 'CWE-1265: Unintended Reentrant Invocation of Non-reentrant Code
      Via Nested Calls'
    ref: https://cwe.mitre.org/data/definitions/1265.html
  CWE-1266:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly provide a capability for the product
      administrator to remove sensitive data at the time the product is decommissioned.
      A scrubbing capability could be missing, insufficient, or incorrect.
    group: top10-insecure-design
    name: CWE-1266
    pretty_name: 'CWE-1266: Improper Scrubbing of Sensitive Data from Decommissioned
      Device'
    ref: https://cwe.mitre.org/data/definitions/1266.html
  CWE-1267:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an obsolete encoding mechanism to implement access
      controls.
    group: top10-broken-access-control
    name: CWE-1267
    pretty_name: 'CWE-1267: Policy Uses Obsolete Encoding'
    ref: https://cwe.mitre.org/data/definitions/1267.html
  CWE-1268:
    categories:
    - ALL
    - boost-hardened
    description: 'The product''s hardware-enforced access control for a particular
      resource improperly accounts for privilege discrepancies between control and
      write policies. '
    group: top10-broken-access-control
    name: CWE-1268
    pretty_name: 'CWE-1268: Policy Privileges are not Assigned Consistently Between
      Control and Data Agents'
    ref: https://cwe.mitre.org/data/definitions/1268.html
  CWE-1269:
    categories:
    - ALL
    - boost-hardened
    description: The product released to market is released in pre-production or manufacturing
      configuration.
    group: top10-insecure-design
    name: CWE-1269
    pretty_name: 'CWE-1269: Product Released in Non-Release Configuration'
    ref: https://cwe.mitre.org/data/definitions/1269.html
  CWE-127:
    categories:
    - ALL
    - boost-hardened
    description: The product reads from a buffer using buffer access mechanisms such
      as indexes or pointers that reference memory locations prior to the targeted
      buffer.
    group: top10-insecure-design
    name: CWE-127
    pretty_name: 'CWE-127: Buffer Under-read'
    ref: https://cwe.mitre.org/data/definitions/127.html
  CWE-1270:
    categories:
    - ALL
    - boost-hardened
    description: The product implements a Security Token mechanism to differentiate
      what actions are allowed or disallowed when a transaction originates from an
      entity. However, the Security Tokens generated in the system are incorrect.
    group: top10-broken-access-control
    name: CWE-1270
    pretty_name: 'CWE-1270: Generation of Incorrect Security Tokens'
    ref: https://cwe.mitre.org/data/definitions/1270.html
  CWE-1271:
    categories:
    - ALL
    - boost-hardened
    description: Security-critical logic is not set to a known value on reset.
    group: top10-insecure-design
    name: CWE-1271
    pretty_name: 'CWE-1271: Uninitialized Value on Reset for Registers Holding Security
      Settings'
    ref: https://cwe.mitre.org/data/definitions/1271.html
  CWE-1272:
    categories:
    - ALL
    - boost-hardened
    description: The product performs a power or debug state transition, but it does
      not clear sensitive information that should no longer be accessible due to changes
      to information access restrictions.
    group: top10-insecure-design
    name: CWE-1272
    pretty_name: 'CWE-1272: Sensitive Information Uncleared Before Debug/Power State
      Transition'
    ref: https://cwe.mitre.org/data/definitions/1272.html
  CWE-1273:
    categories:
    - ALL
    - boost-hardened
    description: The credentials necessary for unlocking a device are shared across
      multiple parties and may expose sensitive information.
    group: top10-broken-access-control
    name: CWE-1273
    pretty_name: 'CWE-1273: Device Unlock Credential Sharing'
    ref: https://cwe.mitre.org/data/definitions/1273.html
  CWE-1274:
    categories:
    - ALL
    - boost-hardened
    description: The product conducts a secure-boot process that transfers bootloader
      code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not
      have sufficient access control or other protections for the Volatile Memory.
    group: top10-broken-access-control
    name: CWE-1274
    pretty_name: 'CWE-1274: Improper Access Control for Volatile Memory Containing
      Boot Code'
    ref: https://cwe.mitre.org/data/definitions/1274.html
  CWE-1275:
    categories:
    - ALL
    - cwe-1275
    - owasp-top-10
    description: The SameSite attribute for sensitive cookies is not set, or an insecure
      value is used.
    group: top10-broken-access-control
    name: CWE-1275
    pretty_name: 'CWE-1275: Sensitive Cookie with Improper SameSite Attribute'
    ref: https://cwe.mitre.org/data/definitions/1275.html
  CWE-1276:
    categories:
    - ALL
    - boost-hardened
    description: Signals between a hardware IP and the parent system design are incorrectly
      connected causing security risks.
    group: top10-broken-access-control
    name: CWE-1276
    pretty_name: 'CWE-1276: Hardware Child Block Incorrectly Connected to Parent System'
    ref: https://cwe.mitre.org/data/definitions/1276.html
  CWE-1277:
    categories:
    - ALL
    - boost-hardened
    description: The product does not provide its users with the ability to update
      or patch its firmware to address any vulnerabilities or weaknesses that may
      be present.
    group: top10-insecure-design
    name: CWE-1277
    pretty_name: 'CWE-1277: Firmware Not Updateable'
    ref: https://cwe.mitre.org/data/definitions/1277.html
  CWE-1278:
    categories:
    - ALL
    - boost-hardened
    description: Information stored in hardware may be recovered by an attacker with
      the capability to capture and analyze images of the integrated circuit using
      techniques such as scanning electron microscopy.
    group: top10-insecure-design
    name: CWE-1278
    pretty_name: 'CWE-1278: Missing Protection Against Hardware Reverse Engineering
      Using Integrated Circuit (IC) Imaging Techniques'
    ref: https://cwe.mitre.org/data/definitions/1278.html
  CWE-1279:
    categories:
    - ALL
    - boost-hardened
    description: Performing cryptographic operations without ensuring that the supporting
      inputs are ready to supply valid data may compromise the cryptographic result.
    group: top10-insecure-design
    name: CWE-1279
    pretty_name: 'CWE-1279: Cryptographic Operations are run Before Supporting Units
      are Ready'
    ref: https://cwe.mitre.org/data/definitions/1279.html
  CWE-128:
    categories:
    - ALL
    - boost-hardened
    description: Wrap around errors occur whenever a value is incremented past the
      maximum value for its type and therefore "wraps around" to a very small, negative,
      or undefined value.
    group: top10-insecure-design
    name: CWE-128
    pretty_name: 'CWE-128: Wrap-around Error'
    ref: https://cwe.mitre.org/data/definitions/128.html
  CWE-1280:
    categories:
    - ALL
    - boost-hardened
    description: A product's hardware-based access control check occurs after the
      asset has been accessed.
    group: top10-insecure-design
    name: CWE-1280
    pretty_name: 'CWE-1280: Access Control Check Implemented After Asset is Accessed'
    ref: https://cwe.mitre.org/data/definitions/1280.html
  CWE-1281:
    categories:
    - ALL
    - boost-hardened
    description: Specific combinations of processor instructions lead to undesirable
      behavior such as locking the processor until a hard reset performed.
    group: top10-insecure-design
    name: CWE-1281
    pretty_name: 'CWE-1281: Sequence of Processor Instructions Leads to Unexpected
      Behavior'
    ref: https://cwe.mitre.org/data/definitions/1281.html
  CWE-1282:
    categories:
    - ALL
    - boost-hardened
    description: Immutable data, such as a first-stage bootloader, device identifiers,
      and "write-once" configuration settings are stored in writable memory that can
      be re-programmed or updated in the field.
    group: top10-broken-access-control
    name: CWE-1282
    pretty_name: 'CWE-1282: Assumed-Immutable Data is Stored in Writable Memory'
    ref: https://cwe.mitre.org/data/definitions/1282.html
  CWE-1283:
    categories:
    - ALL
    - boost-hardened
    description: The register contents used for attestation or measurement reporting
      data to verify boot flow are modifiable by an adversary.
    group: top10-broken-access-control
    name: CWE-1283
    pretty_name: 'CWE-1283: Mutable Attestation or Measurement Reporting Data'
    ref: https://cwe.mitre.org/data/definitions/1283.html
  CWE-1284:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input that is expected to specify a quantity
      (such as size or length), but it does not validate or incorrectly validates
      that the quantity has the required properties.
    group: top10-injection
    name: CWE-1284
    pretty_name: 'CWE-1284: Improper Validation of Specified Quantity in Input'
    ref: https://cwe.mitre.org/data/definitions/1284.html
  CWE-1285:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input that is expected to specify an index,
      position, or offset into an indexable resource such as a buffer or file, but
      it does not validate or incorrectly validates that the specified index/position/offset
      has the required properties.
    group: top10-injection
    name: CWE-1285
    pretty_name: 'CWE-1285: Improper Validation of Specified Index, Position, or Offset
      in Input'
    ref: https://cwe.mitre.org/data/definitions/1285.html
  CWE-1286:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input that is expected to be well-formed - i.e.,
      to comply with a certain syntax - but it does not validate or incorrectly validates
      that the input complies with the syntax.
    group: top10-injection
    name: CWE-1286
    pretty_name: 'CWE-1286: Improper Validation of Syntactic Correctness of Input'
    ref: https://cwe.mitre.org/data/definitions/1286.html
  CWE-1287:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input that is expected to be of a certain type,
      but it does not validate or incorrectly validates that the input is actually
      of the expected type.
    group: top10-injection
    name: CWE-1287
    pretty_name: 'CWE-1287: Improper Validation of Specified Type of Input'
    ref: https://cwe.mitre.org/data/definitions/1287.html
  CWE-1288:
    categories:
    - ALL
    - boost-hardened
    description: The product receives a complex input with multiple elements or fields
      that must be consistent with each other, but it does not validate or incorrectly
      validates that the input is actually consistent.
    group: top10-injection
    name: CWE-1288
    pretty_name: 'CWE-1288: Improper Validation of Consistency within Input'
    ref: https://cwe.mitre.org/data/definitions/1288.html
  CWE-1289:
    categories:
    - ALL
    - boost-hardened
    description: The product receives an input value that is used as a resource identifier
      or other type of reference, but it does not validate or incorrectly validates
      that the input is equivalent to a potentially-unsafe value.
    group: top10-injection
    name: CWE-1289
    pretty_name: 'CWE-1289: Improper Validation of Unsafe Equivalence in Input'
    ref: https://cwe.mitre.org/data/definitions/1289.html
  CWE-129:
    categories:
    - ALL
    - boost-hardened
    description: The product uses untrusted input when calculating or using an array
      index, but the product does not validate or incorrectly validates the index
      to ensure the index references a valid position within the array.
    group: top10-injection
    name: CWE-129
    pretty_name: 'CWE-129: Improper Validation of Array Index'
    ref: https://cwe.mitre.org/data/definitions/129.html
  CWE-1290:
    categories:
    - ALL
    - boost-hardened
    description: The product implements a decoding mechanism to decode certain bus-transaction
      signals to security identifiers. If the decoding is implemented incorrectly,
      then untrusted agents can now gain unauthorized access to the asset.
    group: top10-broken-access-control
    name: CWE-1290
    pretty_name: 'CWE-1290: Incorrect Decoding of Security Identifiers '
    ref: https://cwe.mitre.org/data/definitions/1290.html
  CWE-1291:
    categories:
    - ALL
    - boost-hardened
    description: The same public key is used for signing both debug and production
      code.
    group: top10-insecure-design
    name: CWE-1291
    pretty_name: 'CWE-1291: Public Key Re-Use for Signing both Debug and Production
      Code'
    ref: https://cwe.mitre.org/data/definitions/1291.html
  CWE-1292:
    categories:
    - ALL
    - boost-hardened
    description: The product implements a conversion mechanism to map certain bus-transaction
      signals to security identifiers. However, if the conversion is incorrectly implemented,
      untrusted agents can gain unauthorized access to the asset.
    group: top10-broken-access-control
    name: CWE-1292
    pretty_name: 'CWE-1292: Incorrect Conversion of Security Identifiers'
    ref: https://cwe.mitre.org/data/definitions/1292.html
  CWE-1293:
    categories:
    - ALL
    - boost-hardened
    description: The product relies on one source of data, preventing the ability
      to detect if an adversary has compromised a data source.
    group: top10-software-data-integrity-failures
    name: CWE-1293
    pretty_name: 'CWE-1293: Missing Source Correlation of Multiple Independent Data'
    ref: https://cwe.mitre.org/data/definitions/1293.html
  CWE-1294:
    categories:
    - ALL
    - boost-hardened
    description: The System-on-Chip (SoC) implements a Security Identifier mechanism
      to differentiate what actions are allowed or disallowed when a transaction originates
      from an entity. However, the Security Identifiers are not correctly implemented.
    group: top10-broken-access-control
    name: CWE-1294
    pretty_name: 'CWE-1294: Insecure Security Identifier Mechanism'
    ref: https://cwe.mitre.org/data/definitions/1294.html
  CWE-1295:
    categories:
    - ALL
    - boost-hardened
    description: The product fails to adequately prevent the revealing of unnecessary
      and potentially sensitive system information within debugging messages.
    group: top10-broken-access-control
    name: CWE-1295
    pretty_name: 'CWE-1295: Debug Messages Revealing Unnecessary Information'
    ref: https://cwe.mitre.org/data/definitions/1295.html
  CWE-1296:
    categories:
    - ALL
    - boost-hardened
    description: The product's debug components contain incorrect chaining or granularity
      of debug components.
    group: top10-broken-access-control
    name: CWE-1296
    pretty_name: 'CWE-1296: Incorrect Chaining or Granularity of Debug Components'
    ref: https://cwe.mitre.org/data/definitions/1296.html
  CWE-1297:
    categories:
    - ALL
    - boost-hardened
    description: The product does not adequately protect confidential information
      on the device from being accessed by Outsourced Semiconductor Assembly and Test
      (OSAT) vendors.
    group: top10-broken-access-control
    name: CWE-1297
    pretty_name: 'CWE-1297: Unprotected Confidential Information on Device is Accessible
      by OSAT Vendors'
    ref: https://cwe.mitre.org/data/definitions/1297.html
  CWE-1298:
    categories:
    - ALL
    - boost-hardened
    description: A race condition in the hardware logic results in undermining security
      guarantees of the system.
    group: top10-insecure-design
    name: CWE-1298
    pretty_name: 'CWE-1298: Hardware Logic Contains Race Conditions'
    ref: https://cwe.mitre.org/data/definitions/1298.html
  CWE-1299:
    categories:
    - ALL
    - boost-hardened
    description: The lack of protections on alternate paths to access control-protected
      assets (such as unprotected shadow registers and other external facing unguarded
      interfaces) allows an attacker to bypass existing protections to the asset that
      are only performed against the primary path.
    group: top10-broken-access-control
    name: CWE-1299
    pretty_name: 'CWE-1299: Missing Protection Mechanism for Alternate Hardware Interface'
    ref: https://cwe.mitre.org/data/definitions/1299.html
  CWE-13:
    categories:
    - ALL
    - boost-hardened
    description: Storing a plaintext password in a configuration file allows anyone
      who can read the file access to the password-protected resource making them
      an easy target for attackers.
    group: top10-security-misconfiguration
    name: CWE-13
    pretty_name: 'CWE-13: ASP.NET Misconfiguration: Password in Configuration File'
    ref: https://cwe.mitre.org/data/definitions/13.html
  CWE-130:
    categories:
    - ALL
    - boost-hardened
    description: The product parses a formatted message or structure, but it does
      not handle or incorrectly handles a length field that is inconsistent with the
      actual length of the associated data.
    group: top10-injection
    name: CWE-130
    pretty_name: 'CWE-130: Improper Handling of Length Parameter Inconsistency'
    ref: https://cwe.mitre.org/data/definitions/130.html
  CWE-1300:
    categories:
    - ALL
    - boost-hardened
    description: The device does not contain sufficient protection mechanisms to prevent
      physical side channels from exposing sensitive information due to patterns in
      physically observable phenomena such as variations in power consumption, electromagnetic
      emissions (EME), or acoustic emissions.
    group: top10-broken-access-control
    name: CWE-1300
    pretty_name: 'CWE-1300: Improper Protection of Physical Side Channels'
    ref: https://cwe.mitre.org/data/definitions/1300.html
  CWE-1301:
    categories:
    - ALL
    - boost-hardened
    description: The product's data removal process does not completely delete all
      data and potentially sensitive information within hardware components.
    group: top10-insecure-design
    name: CWE-1301
    pretty_name: 'CWE-1301: Insufficient or Incomplete Data Removal within Hardware
      Component'
    ref: https://cwe.mitre.org/data/definitions/1301.html
  CWE-1302:
    categories:
    - ALL
    - boost-hardened
    description: The product implements a security identifier mechanism to differentiate
      what actions are allowed or disallowed when a transaction originates from an
      entity. A transaction is sent without a security identifier.
    group: top10-broken-access-control
    name: CWE-1302
    pretty_name: 'CWE-1302: Missing Security Identifier'
    ref: https://cwe.mitre.org/data/definitions/1302.html
  CWE-1303:
    categories:
    - ALL
    - boost-hardened
    description: Hardware structures shared across execution contexts (e.g., caches
      and branch predictors) can violate the expected architecture isolation between
      contexts.
    group: top10-insecure-design
    name: CWE-1303
    pretty_name: 'CWE-1303: Non-Transparent Sharing of Microarchitectural Resources'
    ref: https://cwe.mitre.org/data/definitions/1303.html
  CWE-1304:
    categories:
    - ALL
    - boost-hardened
    description: The product performs a power save/restore operation, but it does
      not ensure that the integrity of the configuration state is maintained and/or
      verified between the beginning and ending of the operation.
    group: top10-broken-access-control
    name: CWE-1304
    pretty_name: 'CWE-1304: Improperly Preserved Integrity of Hardware Configuration
      State During a Power Save/Restore Operation'
    ref: https://cwe.mitre.org/data/definitions/1304.html
  CWE-131:
    categories:
    - ALL
    - boost-hardened
    description: The product does not correctly calculate the size to be used when
      allocating a buffer, which could lead to a buffer overflow.
    group: top10-insecure-design
    name: CWE-131
    pretty_name: 'CWE-131: Incorrect Calculation of Buffer Size'
    ref: https://cwe.mitre.org/data/definitions/131.html
  CWE-1310:
    categories:
    - ALL
    - boost-hardened
    description: Missing an ability to patch ROM code may leave a System or System-on-Chip
      (SoC) in a vulnerable state.
    group: top10-insecure-design
    name: CWE-1310
    pretty_name: 'CWE-1310: Missing Ability to Patch ROM Code'
    ref: https://cwe.mitre.org/data/definitions/1310.html
  CWE-1311:
    categories:
    - ALL
    - boost-hardened
    description: The bridge incorrectly translates security attributes from either
      trusted to untrusted or from untrusted to trusted when converting from one fabric
      protocol to another.
    group: top10-broken-access-control
    name: CWE-1311
    pretty_name: 'CWE-1311: Improper Translation of Security Attributes by Fabric
      Bridge'
    ref: https://cwe.mitre.org/data/definitions/1311.html
  CWE-1312:
    categories:
    - ALL
    - boost-hardened
    description: The firewall in an on-chip fabric protects the main addressed region,
      but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.
    group: top10-broken-access-control
    name: CWE-1312
    pretty_name: 'CWE-1312: Missing Protection for Mirrored Regions in On-Chip Fabric
      Firewall'
    ref: https://cwe.mitre.org/data/definitions/1312.html
  CWE-1313:
    categories:
    - ALL
    - boost-hardened
    description: During runtime, the hardware allows for test or debug logic (feature)
      to be activated, which allows for changing the state of the hardware. This feature
      can alter the intended behavior of the system and allow for alteration and leakage
      of sensitive data by an adversary.
    group: top10-broken-access-control
    name: CWE-1313
    pretty_name: 'CWE-1313: Hardware Allows Activation of Test or Debug Logic at Runtime'
    ref: https://cwe.mitre.org/data/definitions/1313.html
  CWE-1314:
    categories:
    - ALL
    - boost-hardened
    description: The device does not write-protect the parametric data values for
      sensors that scale the sensor value, allowing untrusted software to manipulate
      the apparent result and potentially damage hardware or cause operational failure.
    group: top10-broken-access-control
    name: CWE-1314
    pretty_name: 'CWE-1314: Missing Write Protection for Parametric Data Values'
    ref: https://cwe.mitre.org/data/definitions/1314.html
  CWE-1315:
    categories:
    - ALL
    - boost-hardened
    description: The bus controller enables bits in the fabric end-point to allow
      responder devices to control transactions on the fabric.
    group: top10-broken-access-control
    name: CWE-1315
    pretty_name: 'CWE-1315: Improper Setting of Bus Controlling Capability in Fabric
      End-point'
    ref: https://cwe.mitre.org/data/definitions/1315.html
  CWE-1316:
    categories:
    - ALL
    - boost-hardened
    description: The address map of the on-chip fabric has protected and unprotected
      regions overlapping, allowing an attacker to bypass access control to the overlapping
      portion of the protected region.
    group: top10-broken-access-control
    name: CWE-1316
    pretty_name: 'CWE-1316: Fabric-Address Map Allows Programming of Unwarranted Overlaps
      of Protected and Unprotected Ranges'
    ref: https://cwe.mitre.org/data/definitions/1316.html
  CWE-1317:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a fabric bridge for transactions between two Intellectual
      Property (IP) blocks, but the bridge does not properly perform the expected
      privilege, identity, or other access control checks between those IP blocks.
    group: top10-broken-access-control
    name: CWE-1317
    pretty_name: 'CWE-1317: Improper Access Control in Fabric Bridge'
    ref: https://cwe.mitre.org/data/definitions/1317.html
  CWE-1318:
    categories:
    - ALL
    - boost-hardened
    description: ' On-chip fabrics or buses either do not support or are not configured
      to support privilege separation or other security features, such as access control. '
    group: top10-insecure-design
    name: CWE-1318
    pretty_name: 'CWE-1318: Missing Support for Security Features in On-chip Fabrics
      or Buses'
    ref: https://cwe.mitre.org/data/definitions/1318.html
  CWE-1319:
    categories:
    - ALL
    - boost-hardened
    description: The device is susceptible to electromagnetic fault injection attacks,
      causing device internal information to be compromised or security mechanisms
      to be bypassed.
    group: top10-insecure-design
    name: CWE-1319
    pretty_name: 'CWE-1319: Improper Protection against Electromagnetic Fault Injection
      (EM-FI)'
    ref: https://cwe.mitre.org/data/definitions/1319.html
  CWE-1320:
    categories:
    - ALL
    - boost-hardened
    description: 'Untrusted agents can disable alerts about signal conditions exceeding
      limits or the response mechanism that handles such alerts. '
    group: top10-broken-access-control
    name: CWE-1320
    pretty_name: 'CWE-1320: Improper Protection for Outbound Error Messages and Alert
      Signals'
    ref: https://cwe.mitre.org/data/definitions/1320.html
  CWE-1321:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component that specifies
      attributes that are to be initialized or updated in an object, but it does not
      properly control modifications of attributes of the object prototype.
    group: top10-software-data-integrity-failures
    name: CWE-1321
    pretty_name: 'CWE-1321: Improperly Controlled Modification of Object Prototype
      Attributes (''Prototype Pollution'')'
    ref: https://cwe.mitre.org/data/definitions/1321.html
  CWE-1322:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a non-blocking model that relies on a single threaded
      process for features such as scalability, but it contains code that can block
      when it is invoked.
    group: top10-insecure-design
    name: CWE-1322
    pretty_name: 'CWE-1322: Use of Blocking Code in Single-threaded, Non-blocking
      Context'
    ref: https://cwe.mitre.org/data/definitions/1322.html
  CWE-1323:
    categories:
    - ALL
    - boost-hardened
    description: Trace data collected from several sources on the System-on-Chip (SoC)
      is stored in unprotected locations or transported to untrusted agents.
    group: top10-broken-access-control
    name: CWE-1323
    pretty_name: 'CWE-1323: Improper Management of Sensitive Trace Data'
    ref: https://cwe.mitre.org/data/definitions/1323.html
  CWE-1325:
    categories:
    - ALL
    - boost-hardened
    description: The product manages a group of objects or resources and performs
      a separate memory allocation for each object, but it does not properly limit
      the total amount of memory that is consumed by all of the combined objects.
    group: top10-insecure-design
    name: CWE-1325
    pretty_name: 'CWE-1325: Improperly Controlled Sequential Memory Allocation'
    ref: https://cwe.mitre.org/data/definitions/1325.html
  CWE-1326:
    categories:
    - ALL
    - boost-hardened
    description: A missing immutable root of trust in the hardware results in the
      ability to bypass secure boot or execute untrusted or adversarial boot code.
    group: top10-insecure-design
    name: CWE-1326
    pretty_name: 'CWE-1326: Missing Immutable Root of Trust in Hardware'
    ref: https://cwe.mitre.org/data/definitions/1326.html
  CWE-1327:
    categories:
    - ALL
    - cwe-1327
    - boost-hardened
    description: The product assigns the address 0.0.0.0 for a database server, a
      cloud service/instance, or any computing resource that communicates remotely.
    group: top10-broken-access-control
    name: CWE-1327
    pretty_name: 'CWE-1327: Binding to an Unrestricted IP Address'
    ref: https://cwe.mitre.org/data/definitions/1327.html
  CWE-1328:
    categories:
    - ALL
    - boost-hardened
    description: Security-version number in hardware is mutable, resulting in the
      ability to downgrade (roll-back) the boot firmware to vulnerable code versions.
    group: top10-broken-access-control
    name: CWE-1328
    pretty_name: 'CWE-1328: Security Version Number Mutable to Older Versions'
    ref: https://cwe.mitre.org/data/definitions/1328.html
  CWE-1329:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a component that cannot be updated or patched
      in order to remove vulnerabilities or significant bugs.
    group: top10-insecure-design
    name: CWE-1329
    pretty_name: 'CWE-1329: Reliance on Component That is Not Updateable'
    ref: https://cwe.mitre.org/data/definitions/1329.html
  CWE-1330:
    categories:
    - ALL
    - boost-hardened
    description: Confidential information stored in memory circuits is readable or
      recoverable after being cleared or erased.
    group: top10-insecure-design
    name: CWE-1330
    pretty_name: 'CWE-1330: Remanent Data Readable after Memory Erase'
    ref: https://cwe.mitre.org/data/definitions/1330.html
  CWE-1331:
    categories:
    - ALL
    - boost-hardened
    description: The Network On Chip (NoC) does not isolate or incorrectly isolates
      its on-chip-fabric and internal resources such that they are shared between
      trusted and untrusted agents, creating timing channels.
    group: top10-insecure-design
    name: CWE-1331
    pretty_name: 'CWE-1331: Improper Isolation of Shared Resources in Network On Chip
      (NoC)'
    ref: https://cwe.mitre.org/data/definitions/1331.html
  CWE-1332:
    categories:
    - ALL
    - boost-hardened
    description: The device is missing or incorrectly implements circuitry or sensors
      that detect and mitigate the skipping of security-critical CPU instructions
      when they occur.
    group: top10-insecure-design
    name: CWE-1332
    pretty_name: 'CWE-1332: Improper Handling of Faults that Lead to Instruction Skips'
    ref: https://cwe.mitre.org/data/definitions/1332.html
  CWE-1333:
    categories:
    - ALL
    - cwe-1333
    description: The product uses a regular expression with an inefficient, possibly
      exponential worst-case computational complexity that consumes excessive CPU
      cycles.
    group: top10-insecure-design
    name: CWE-1333
    pretty_name: 'CWE-1333: Inefficient Regular Expression Complexity'
    ref: https://cwe.mitre.org/data/definitions/1333.html
  CWE-1334:
    categories:
    - ALL
    - boost-hardened
    description: An unauthorized agent can inject errors into a redundant block to
      deprive the system of redundancy or put the system in a degraded operating mode.
    group: top10-broken-access-control
    name: CWE-1334
    pretty_name: 'CWE-1334: Unauthorized Error Injection Can Degrade Hardware Redundancy'
    ref: https://cwe.mitre.org/data/definitions/1334.html
  CWE-1335:
    categories:
    - ALL
    - boost-hardened
    description: An integer value is specified to be shifted by a negative amount
      or an amount greater than or equal to the number of bits contained in the value
      causing an unexpected or indeterminate result.
    group: top10-insecure-design
    name: CWE-1335
    pretty_name: 'CWE-1335: Incorrect Bitwise Shift of Integer'
    ref: https://cwe.mitre.org/data/definitions/1335.html
  CWE-1336:
    categories:
    - ALL
    - cwe-1336
    - boost-hardened
    description: The product uses a template engine to insert or process externally-influenced
      input, but it does not neutralize or incorrectly neutralizes special elements
      or syntax that can be interpreted as template expressions or other code directives
      when processed by the engine.
    group: top10-injection
    name: CWE-1336
    pretty_name: 'CWE-1336: Improper Neutralization of Special Elements Used in a
      Template Engine'
    ref: https://cwe.mitre.org/data/definitions/1336.html
  CWE-1338:
    categories:
    - ALL
    - boost-hardened
    description: A hardware device is missing or has inadequate protection features
      to prevent overheating.
    group: top10-insecure-design
    name: CWE-1338
    pretty_name: 'CWE-1338: Improper Protections Against Hardware Overheating'
    ref: https://cwe.mitre.org/data/definitions/1338.html
  CWE-1339:
    categories:
    - ALL
    - boost-hardened
    description: The product processes a real number with an implementation in which
      the number's representation does not preserve required accuracy and precision
      in its fractional part, causing an incorrect result.
    group: top10-insecure-design
    name: CWE-1339
    pretty_name: 'CWE-1339: Insufficient Precision or Accuracy of a Real Number'
    ref: https://cwe.mitre.org/data/definitions/1339.html
  CWE-134:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a function that accepts a format string as an argument,
      but the format string originates from an external source.
    group: top10-broken-access-control
    name: CWE-134
    pretty_name: 'CWE-134: Use of Externally-Controlled Format String'
    ref: https://cwe.mitre.org/data/definitions/134.html
  CWE-1341:
    categories:
    - ALL
    - boost-hardened
    description: The product attempts to close or release a resource or handle more
      than once, without any successful open between the close operations.
    group: top10-insecure-design
    name: CWE-1341
    pretty_name: 'CWE-1341: Multiple Releases of Same Resource or Handle'
    ref: https://cwe.mitre.org/data/definitions/1341.html
  CWE-1342:
    categories:
    - ALL
    - boost-hardened
    description: The processor does not properly clear microarchitectural state after
      incorrect microcode assists or speculative execution, resulting in transient
      execution.
    group: top10-insecure-design
    name: CWE-1342
    pretty_name: 'CWE-1342: Information Exposure through Microarchitectural State
      after Transient Execution'
    ref: https://cwe.mitre.org/data/definitions/1342.html
  CWE-135:
    categories:
    - ALL
    - boost-hardened
    description: The product does not correctly calculate the length of strings that
      can contain wide or multi-byte characters.
    group: top10-insecure-design
    name: CWE-135
    pretty_name: 'CWE-135: Incorrect Calculation of Multi-Byte String Length'
    ref: https://cwe.mitre.org/data/definitions/135.html
  CWE-1351:
    categories:
    - ALL
    - boost-hardened
    description: A hardware device, or the firmware running on it, is missing or has
      incorrect protection features to maintain goals of security primitives when
      the device is cooled below standard operating temperatures.
    group: top10-insecure-design
    name: CWE-1351
    pretty_name: 'CWE-1351: Improper Handling of Hardware Behavior in Exceptionally
      Cold Environments'
    ref: https://cwe.mitre.org/data/definitions/1351.html
  CWE-1357:
    categories:
    - ALL
    - boost-hardened
    description: The product is built from multiple separate components, but it uses
      a component that is not sufficiently trusted to meet expectations for security,
      reliability, updateability, and maintainability.
    group: top10-insecure-design
    name: CWE-1357
    pretty_name: 'CWE-1357: Reliance on Insufficiently Trustworthy Component'
    ref: https://cwe.mitre.org/data/definitions/1357.html
  CWE-138:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as control elements or syntactic markers when they are sent to a downstream
      component.
    group: top10-injection
    name: CWE-138
    pretty_name: 'CWE-138: Improper Neutralization of Special Elements'
    ref: https://cwe.mitre.org/data/definitions/138.html
  CWE-1384:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle unexpected physical or environmental
      conditions that occur naturally or are artificially induced.
    group: top10-insecure-design
    name: CWE-1384
    pretty_name: 'CWE-1384: Improper Handling of Physical or Environmental Conditions'
    ref: https://cwe.mitre.org/data/definitions/1384.html
  CWE-1385:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a WebSocket, but it does not properly verify that
      the source of data or communication is valid.
    group: top10-id-authn-failures
    name: CWE-1385
    pretty_name: 'CWE-1385: Missing Origin Validation in WebSockets'
    ref: https://cwe.mitre.org/data/definitions/1385.html
  CWE-1386:
    categories:
    - ALL
    - boost-hardened
    description: The product opens a file or directory, but it does not properly prevent
      the name from being associated with a junction or mount point to a destination
      that is outside of the intended control sphere.
    group: top10-broken-access-control
    name: CWE-1386
    pretty_name: 'CWE-1386: Insecure Operation on Windows Junction / Mount Point'
    ref: https://cwe.mitre.org/data/definitions/1386.html
  CWE-1389:
    categories:
    - ALL
    - boost-hardened
    description: The product parses numeric input assuming base 10 (decimal) values,
      but it does not account for inputs that use a different base number (radix).
    group: top10-insecure-design
    name: CWE-1389
    pretty_name: 'CWE-1389: Incorrect Parsing of Numbers with Different Radices'
    ref: https://cwe.mitre.org/data/definitions/1389.html
  CWE-1390:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an authentication mechanism to restrict access to
      specific users or identities, but the mechanism does not sufficiently prove
      that the claimed identity is correct.
    group: top10-id-authn-failures
    name: CWE-1390
    pretty_name: 'CWE-1390: Weak Authentication'
    ref: https://cwe.mitre.org/data/definitions/1390.html
  CWE-1391:
    categories:
    - ALL
    - boost-hardened
    description: The product uses weak credentials (such as a default key or hard-coded
      password) that can be calculated, derived, reused, or guessed by an attacker.
    group: top10-id-authn-failures
    name: CWE-1391
    pretty_name: 'CWE-1391: Use of Weak Credentials'
    ref: https://cwe.mitre.org/data/definitions/1391.html
  CWE-1392:
    categories:
    - ALL
    - boost-hardened
    description: The product uses default credentials (such as passwords or cryptographic
      keys) for potentially critical functionality.
    group: top10-id-authn-failures
    name: CWE-1392
    pretty_name: 'CWE-1392: Use of Default Credentials'
    ref: https://cwe.mitre.org/data/definitions/1392.html
  CWE-1393:
    categories:
    - ALL
    - boost-hardened
    description: The product uses default passwords for potentially critical functionality.
    group: top10-id-authn-failures
    name: CWE-1393
    pretty_name: 'CWE-1393: Use of Default Password'
    ref: https://cwe.mitre.org/data/definitions/1393.html
  CWE-1394:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a default cryptographic key for potentially critical
      functionality.
    group: top10-id-authn-failures
    name: CWE-1394
    pretty_name: 'CWE-1394: Use of Default Cryptographic Key'
    ref: https://cwe.mitre.org/data/definitions/1394.html
  CWE-1395:
    categories:
    - ALL
    - boost-hardened
    description: The product has a dependency on a third-party component that contains
      one or more known vulnerabilities.
    group: top10-insecure-design
    name: CWE-1395
    pretty_name: 'CWE-1395: Dependency on Vulnerable Third-Party Component'
    ref: https://cwe.mitre.org/data/definitions/1395.html
  CWE-14:
    categories:
    - ALL
    - boost-hardened
    description: Sensitive memory is cleared according to the source code, but compiler
      optimizations leave the memory untouched when it is not read from again, aka
      "dead store removal."
    group: top10-insecure-design
    name: CWE-14
    pretty_name: 'CWE-14: Compiler Removal of Code to Clear Buffers'
    ref: https://cwe.mitre.org/data/definitions/14.html
  CWE-140:
    categories:
    - ALL
    - boost-hardened
    description: The product does not neutralize or incorrectly neutralizes delimiters.
    group: top10-injection
    name: CWE-140
    pretty_name: 'CWE-140: Improper Neutralization of Delimiters'
    ref: https://cwe.mitre.org/data/definitions/140.html
  CWE-141:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as parameter or argument delimiters when they are sent to a downstream component.
    group: top10-injection
    name: CWE-141
    pretty_name: 'CWE-141: Improper Neutralization of Parameter/Argument Delimiters'
    ref: https://cwe.mitre.org/data/definitions/141.html
  CWE-142:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as value delimiters when they are sent to a downstream component.
    group: top10-injection
    name: CWE-142
    pretty_name: 'CWE-142: Improper Neutralization of Value Delimiters'
    ref: https://cwe.mitre.org/data/definitions/142.html
  CWE-143:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as record delimiters when they are sent to a downstream component.
    group: top10-injection
    name: CWE-143
    pretty_name: 'CWE-143: Improper Neutralization of Record Delimiters'
    ref: https://cwe.mitre.org/data/definitions/143.html
  CWE-144:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as line delimiters when they are sent to a downstream component.
    group: top10-injection
    name: CWE-144
    pretty_name: 'CWE-144: Improper Neutralization of Line Delimiters'
    ref: https://cwe.mitre.org/data/definitions/144.html
  CWE-145:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as section delimiters when they are sent to a downstream component.
    group: top10-injection
    name: CWE-145
    pretty_name: 'CWE-145: Improper Neutralization of Section Delimiters'
    ref: https://cwe.mitre.org/data/definitions/145.html
  CWE-146:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as expression or command delimiters when they are sent to a downstream component.
    group: top10-injection
    name: CWE-146
    pretty_name: 'CWE-146: Improper Neutralization of Expression/Command Delimiters'
    ref: https://cwe.mitre.org/data/definitions/146.html
  CWE-147:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as input terminators when they are sent to a downstream component.
    group: top10-injection
    name: CWE-147
    pretty_name: 'CWE-147: Improper Neutralization of Input Terminators'
    ref: https://cwe.mitre.org/data/definitions/147.html
  CWE-148:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle when a leading character or
      sequence ("leader") is missing or malformed, or if multiple leaders are used
      when only one should be allowed.
    group: top10-injection
    name: CWE-148
    pretty_name: 'CWE-148: Improper Neutralization of Input Leaders'
    ref: https://cwe.mitre.org/data/definitions/148.html
  CWE-149:
    categories:
    - ALL
    - boost-hardened
    description: Quotes injected into a product can be used to compromise a system.
      As data are parsed, an injected/absent/duplicate/malformed use of quotes may
      cause the process to take unexpected actions.
    group: top10-injection
    name: CWE-149
    pretty_name: 'CWE-149: Improper Neutralization of Quoting Syntax'
    ref: https://cwe.mitre.org/data/definitions/149.html
  CWE-15:
    categories:
    - ALL
    - boost-hardened
    description: One or more system settings or configuration elements can be externally
      controlled by a user.
    group: top10-security-misconfiguration
    name: CWE-15
    pretty_name: 'CWE-15: External Control of System or Configuration Setting'
    ref: https://cwe.mitre.org/data/definitions/15.html
  CWE-150:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as escape, meta, or control character sequences when they are sent to a downstream
      component.
    group: top10-injection
    name: CWE-150
    pretty_name: 'CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences'
    ref: https://cwe.mitre.org/data/definitions/150.html
  CWE-151:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as comment delimiters when they are sent to a downstream component.
    group: top10-injection
    name: CWE-151
    pretty_name: 'CWE-151: Improper Neutralization of Comment Delimiters'
    ref: https://cwe.mitre.org/data/definitions/151.html
  CWE-152:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as macro symbols when they are sent to a downstream component.
    group: top10-injection
    name: CWE-152
    pretty_name: 'CWE-152: Improper Neutralization of Macro Symbols'
    ref: https://cwe.mitre.org/data/definitions/152.html
  CWE-153:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as substitution characters when they are sent to a downstream component.
    group: top10-injection
    name: CWE-153
    pretty_name: 'CWE-153: Improper Neutralization of Substitution Characters'
    ref: https://cwe.mitre.org/data/definitions/153.html
  CWE-154:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as variable name delimiters when they are sent to a downstream component.
    group: top10-injection
    name: CWE-154
    pretty_name: 'CWE-154: Improper Neutralization of Variable Name Delimiters'
    ref: https://cwe.mitre.org/data/definitions/154.html
  CWE-155:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as wildcards or matching symbols when they are sent to a downstream component.
    group: top10-injection
    name: CWE-155
    pretty_name: 'CWE-155: Improper Neutralization of Wildcards or Matching Symbols'
    ref: https://cwe.mitre.org/data/definitions/155.html
  CWE-156:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special elements that could be interpreted
      as whitespace when they are sent to a downstream component.
    group: top10-injection
    name: CWE-156
    pretty_name: 'CWE-156: Improper Neutralization of Whitespace'
    ref: https://cwe.mitre.org/data/definitions/156.html
  CWE-157:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle the characters that are used
      to mark the beginning and ending of a group of entities, such as parentheses,
      brackets, and braces.
    group: top10-injection
    name: CWE-157
    pretty_name: 'CWE-157: Failure to Sanitize Paired Delimiters'
    ref: https://cwe.mitre.org/data/definitions/157.html
  CWE-158:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes NUL characters or null bytes when
      they are sent to a downstream component.
    group: top10-injection
    name: CWE-158
    pretty_name: 'CWE-158: Improper Neutralization of Null Byte or NUL Character'
    ref: https://cwe.mitre.org/data/definitions/158.html
  CWE-159:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly filter, remove, quote, or otherwise
      manage the invalid use of special elements in user-controlled input, which could
      cause adverse effect on its behavior and integrity.
    group: top10-injection
    name: CWE-159
    pretty_name: 'CWE-159: Improper Handling of Invalid Use of Special Elements'
    ref: https://cwe.mitre.org/data/definitions/159.html
  CWE-160:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes leading special elements that could
      be interpreted in unexpected ways when they are sent to a downstream component.
    group: top10-injection
    name: CWE-160
    pretty_name: 'CWE-160: Improper Neutralization of Leading Special Elements'
    ref: https://cwe.mitre.org/data/definitions/160.html
  CWE-161:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes multiple leading special elements
      that could be interpreted in unexpected ways when they are sent to a downstream
      component.
    group: top10-injection
    name: CWE-161
    pretty_name: 'CWE-161: Improper Neutralization of Multiple Leading Special Elements'
    ref: https://cwe.mitre.org/data/definitions/161.html
  CWE-162:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes trailing special elements that could
      be interpreted in unexpected ways when they are sent to a downstream component.
    group: top10-injection
    name: CWE-162
    pretty_name: 'CWE-162: Improper Neutralization of Trailing Special Elements'
    ref: https://cwe.mitre.org/data/definitions/162.html
  CWE-163:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes multiple trailing special elements
      that could be interpreted in unexpected ways when they are sent to a downstream
      component.
    group: top10-injection
    name: CWE-163
    pretty_name: 'CWE-163: Improper Neutralization of Multiple Trailing Special Elements'
    ref: https://cwe.mitre.org/data/definitions/163.html
  CWE-164:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes internal special elements that could
      be interpreted in unexpected ways when they are sent to a downstream component.
    group: top10-injection
    name: CWE-164
    pretty_name: 'CWE-164: Improper Neutralization of Internal Special Elements'
    ref: https://cwe.mitre.org/data/definitions/164.html
  CWE-165:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes multiple internal special elements
      that could be interpreted in unexpected ways when they are sent to a downstream
      component.
    group: top10-injection
    name: CWE-165
    pretty_name: 'CWE-165: Improper Neutralization of Multiple Internal Special Elements'
    ref: https://cwe.mitre.org/data/definitions/165.html
  CWE-166:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not handle or incorrectly handles when an expected special element is missing.
    group: top10-injection
    name: CWE-166
    pretty_name: 'CWE-166: Improper Handling of Missing Special Element'
    ref: https://cwe.mitre.org/data/definitions/166.html
  CWE-167:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not handle or incorrectly handles when an additional unexpected special element
      is provided.
    group: top10-injection
    name: CWE-167
    pretty_name: 'CWE-167: Improper Handling of Additional Special Element'
    ref: https://cwe.mitre.org/data/definitions/167.html
  CWE-168:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle input in which an inconsistency
      exists between two or more special characters or reserved words.
    group: top10-injection
    name: CWE-168
    pretty_name: 'CWE-168: Improper Handling of Inconsistent Special Elements'
    ref: https://cwe.mitre.org/data/definitions/168.html
  CWE-170:
    categories:
    - ALL
    - boost-hardened
    description: The product does not terminate or incorrectly terminates a string
      or array with a null character or equivalent terminator.
    group: top10-injection
    name: CWE-170
    pretty_name: 'CWE-170: Improper Null Termination'
    ref: https://cwe.mitre.org/data/definitions/170.html
  CWE-172:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly encode or decode the data, resulting
      in unexpected values.
    group: top10-injection
    name: CWE-172
    pretty_name: 'CWE-172: Encoding Error'
    ref: https://cwe.mitre.org/data/definitions/172.html
  CWE-173:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle when an input uses an alternate
      encoding that is valid for the control sphere to which the input is being sent.
    group: top10-injection
    name: CWE-173
    pretty_name: 'CWE-173: Improper Handling of Alternate Encoding'
    ref: https://cwe.mitre.org/data/definitions/173.html
  CWE-174:
    categories:
    - ALL
    - boost-hardened
    description: The product decodes the same input twice, which can limit the effectiveness
      of any protection mechanism that occurs in between the decoding operations.
    group: top10-insecure-design
    name: CWE-174
    pretty_name: 'CWE-174: Double Decoding of the Same Data'
    ref: https://cwe.mitre.org/data/definitions/174.html
  CWE-175:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle when the same input uses several
      different (mixed) encodings.
    group: top10-injection
    name: CWE-175
    pretty_name: 'CWE-175: Improper Handling of Mixed Encoding'
    ref: https://cwe.mitre.org/data/definitions/175.html
  CWE-176:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle when an input contains Unicode
      encoding.
    group: top10-injection
    name: CWE-176
    pretty_name: 'CWE-176: Improper Handling of Unicode Encoding'
    ref: https://cwe.mitre.org/data/definitions/176.html
  CWE-177:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle when all or part of an input
      has been URL encoded.
    group: top10-injection
    name: CWE-177
    pretty_name: 'CWE-177: Improper Handling of URL Encoding (Hex Encoding)'
    ref: https://cwe.mitre.org/data/definitions/177.html
  CWE-178:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly account for differences in case sensitivity
      when accessing or determining the properties of a resource, leading to inconsistent
      results.
    group: top10-broken-access-control
    name: CWE-178
    pretty_name: 'CWE-178: Improper Handling of Case Sensitivity'
    ref: https://cwe.mitre.org/data/definitions/178.html
  CWE-179:
    categories:
    - ALL
    - boost-hardened
    description: The product validates input before applying protection mechanisms
      that modify the input, which could allow an attacker to bypass the validation
      via dangerous inputs that only arise after the modification.
    group: top10-insecure-design
    name: CWE-179
    pretty_name: 'CWE-179: Incorrect Behavior Order: Early Validation'
    ref: https://cwe.mitre.org/data/definitions/179.html
  CWE-180:
    categories:
    - ALL
    - boost-hardened
    description: The product validates input before it is canonicalized, which prevents
      the product from detecting data that becomes invalid after the canonicalization
      step.
    group: top10-insecure-design
    name: CWE-180
    pretty_name: 'CWE-180: Incorrect Behavior Order: Validate Before Canonicalize'
    ref: https://cwe.mitre.org/data/definitions/180.html
  CWE-181:
    categories:
    - ALL
    - boost-hardened
    description: The product validates data before it has been filtered, which prevents
      the product from detecting data that becomes invalid after the filtering step.
    group: top10-insecure-design
    name: CWE-181
    pretty_name: 'CWE-181: Incorrect Behavior Order: Validate Before Filter'
    ref: https://cwe.mitre.org/data/definitions/181.html
  CWE-182:
    categories:
    - ALL
    - boost-hardened
    description: The product filters data in a way that causes it to be reduced or
      "collapsed" into an unsafe value that violates an expected security property.
    group: top10-insecure-design
    name: CWE-182
    pretty_name: 'CWE-182: Collapse of Data into Unsafe Value'
    ref: https://cwe.mitre.org/data/definitions/182.html
  CWE-183:
    categories:
    - ALL
    - boost-hardened
    description: The product implements a protection mechanism that relies on a list
      of inputs (or properties of inputs) that are explicitly allowed by policy because
      the inputs are assumed to be safe, but the list is too permissive - that is,
      it allows an input that is unsafe, leading to resultant weaknesses.
    group: top10-insecure-design
    name: CWE-183
    pretty_name: 'CWE-183: Permissive List of Allowed Inputs'
    ref: https://cwe.mitre.org/data/definitions/183.html
  CWE-184:
    categories:
    - ALL
    - boost-hardened
    description: The product implements a protection mechanism that relies on a list
      of inputs (or properties of inputs) that are not allowed by policy or otherwise
      require other action to neutralize before additional processing takes place,
      but the list is incomplete, leading to resultant weaknesses.
    group: top10-injection
    name: CWE-184
    pretty_name: 'CWE-184: Incomplete List of Disallowed Inputs'
    ref: https://cwe.mitre.org/data/definitions/184.html
  CWE-185:
    categories:
    - ALL
    - cwe-185
    - boost-hardened
    description: The product specifies a regular expression in a way that causes data
      to be improperly matched or compared.
    group: top10-insecure-design
    name: CWE-185
    pretty_name: 'CWE-185: Incorrect Regular Expression'
    ref: https://cwe.mitre.org/data/definitions/185.html
  CWE-186:
    categories:
    - ALL
    - boost-hardened
    description: A regular expression is overly restrictive, which prevents dangerous
      values from being detected.
    group: top10-insecure-design
    name: CWE-186
    pretty_name: 'CWE-186: Overly Restrictive Regular Expression'
    ref: https://cwe.mitre.org/data/definitions/186.html
  CWE-187:
    categories:
    - ALL
    - boost-hardened
    description: The product performs a comparison that only examines a portion of
      a factor before determining whether there is a match, such as a substring, leading
      to resultant weaknesses.
    group: top10-insecure-design
    name: CWE-187
    pretty_name: 'CWE-187: Partial String Comparison'
    ref: https://cwe.mitre.org/data/definitions/187.html
  CWE-188:
    categories:
    - ALL
    - boost-hardened
    description: The product makes invalid assumptions about how protocol data or
      memory is organized at a lower level, resulting in unintended program behavior.
    group: top10-insecure-design
    name: CWE-188
    pretty_name: 'CWE-188: Reliance on Data/Memory Layout'
    ref: https://cwe.mitre.org/data/definitions/188.html
  CWE-190:
    categories:
    - ALL
    - boost-hardened
    description: The product performs a calculation that can produce an integer overflow
      or wraparound, when the logic assumes that the resulting value will always be
      larger than the original value. This can introduce other weaknesses when the
      calculation is used for resource management or execution control.
    group: top10-insecure-design
    name: CWE-190
    pretty_name: 'CWE-190: Integer Overflow or Wraparound'
    ref: https://cwe.mitre.org/data/definitions/190.html
  CWE-191:
    categories:
    - ALL
    - boost-hardened
    description: The product subtracts one value from another, such that the result
      is less than the minimum allowable integer value, which produces a value that
      is not equal to the correct result.
    group: top10-insecure-design
    name: CWE-191
    pretty_name: 'CWE-191: Integer Underflow (Wrap or Wraparound)'
    ref: https://cwe.mitre.org/data/definitions/191.html
  CWE-192:
    categories:
    - ALL
    - boost-hardened
    description: Integer coercion refers to a set of flaws pertaining to the type
      casting, extension, or truncation of primitive data types.
    group: top10-insecure-design
    name: CWE-192
    pretty_name: 'CWE-192: Integer Coercion Error'
    ref: https://cwe.mitre.org/data/definitions/192.html
  CWE-193:
    categories:
    - ALL
    - boost-hardened
    description: A product calculates or uses an incorrect maximum or minimum value
      that is 1 more, or 1 less, than the correct value.
    group: top10-insecure-design
    name: CWE-193
    pretty_name: 'CWE-193: Off-by-one Error'
    ref: https://cwe.mitre.org/data/definitions/193.html
  CWE-194:
    categories:
    - ALL
    - boost-hardened
    description: The product performs an operation on a number that causes it to be
      sign extended when it is transformed into a larger data type. When the original
      number is negative, this can produce unexpected values that lead to resultant
      weaknesses.
    group: top10-insecure-design
    name: CWE-194
    pretty_name: 'CWE-194: Unexpected Sign Extension'
    ref: https://cwe.mitre.org/data/definitions/194.html
  CWE-195:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a signed primitive and performs a cast to an unsigned
      primitive, which can produce an unexpected value if the value of the signed
      primitive can not be represented using an unsigned primitive.
    group: top10-insecure-design
    name: CWE-195
    pretty_name: 'CWE-195: Signed to Unsigned Conversion Error'
    ref: https://cwe.mitre.org/data/definitions/195.html
  CWE-196:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an unsigned primitive and performs a cast to a signed
      primitive, which can produce an unexpected value if the value of the unsigned
      primitive can not be represented using a signed primitive.
    group: top10-insecure-design
    name: CWE-196
    pretty_name: 'CWE-196: Unsigned to Signed Conversion Error'
    ref: https://cwe.mitre.org/data/definitions/196.html
  CWE-197:
    categories:
    - ALL
    - boost-hardened
    description: Truncation errors occur when a primitive is cast to a primitive of
      a smaller size and data is lost in the conversion.
    group: top10-insecure-design
    name: CWE-197
    pretty_name: 'CWE-197: Numeric Truncation Error'
    ref: https://cwe.mitre.org/data/definitions/197.html
  CWE-198:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not account for byte ordering (e.g. big-endian and little-endian) when processing
      the input, causing an incorrect number or value to be used.
    group: top10-insecure-design
    name: CWE-198
    pretty_name: 'CWE-198: Use of Incorrect Byte Ordering'
    ref: https://cwe.mitre.org/data/definitions/198.html
  CWE-20:
    categories:
    - ALL
    - cwe-20
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product receives input or data, but it does not validate or incorrectly
      validates that the input has the properties that are required to process the
      data safely and correctly.
    group: top10-injection
    name: CWE-20
    pretty_name: 'CWE-20: Improper Input Validation'
    ref: https://cwe.mitre.org/data/definitions/20.html
    recommended: true
  CWE-200:
    categories:
    - ALL
    - cwe-200
    - stored-secrets
    - boost-hardened
    - owasp-top-10
    description: The product exposes sensitive information to an actor that is not
      explicitly authorized to have access to that information.
    group: top10-broken-access-control
    name: CWE-200
    pretty_name: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'
    ref: https://cwe.mitre.org/data/definitions/200.html
  CWE-201:
    categories:
    - ALL
    - boost-hardened
    description: The code transmits data to another actor, but a portion of the data
      includes sensitive information that should not be accessible to that actor.
    group: top10-broken-access-control
    name: CWE-201
    pretty_name: 'CWE-201: Insertion of Sensitive Information Into Sent Data'
    ref: https://cwe.mitre.org/data/definitions/201.html
  CWE-202:
    categories:
    - ALL
    - boost-hardened
    description: When trying to keep information confidential, an attacker can often
      infer some of the information by using statistics.
    group: top10-broken-access-control
    name: CWE-202
    pretty_name: 'CWE-202: Exposure of Sensitive Information Through Data Queries'
    ref: https://cwe.mitre.org/data/definitions/202.html
  CWE-203:
    categories:
    - ALL
    - boost-hardened
    description: The product behaves differently or sends different responses under
      different circumstances in a way that is observable to an unauthorized actor,
      which exposes security-relevant information about the state of the product,
      such as whether a particular operation was successful or not.
    group: top10-broken-access-control
    name: CWE-203
    pretty_name: 'CWE-203: Observable Discrepancy'
    ref: https://cwe.mitre.org/data/definitions/203.html
  CWE-204:
    categories:
    - ALL
    - boost-hardened
    description: The product provides different responses to incoming requests in
      a way that reveals internal state information to an unauthorized actor outside
      of the intended control sphere.
    group: top10-broken-access-control
    name: CWE-204
    pretty_name: 'CWE-204: Observable Response Discrepancy'
    ref: https://cwe.mitre.org/data/definitions/204.html
  CWE-205:
    categories:
    - ALL
    - boost-hardened
    description: The product's behaviors indicate important differences that may be
      observed by unauthorized actors in a way that reveals (1) its internal state
      or decision process, or (2) differences from other products with equivalent
      functionality.
    group: top10-broken-access-control
    name: CWE-205
    pretty_name: 'CWE-205: Observable Behavioral Discrepancy'
    ref: https://cwe.mitre.org/data/definitions/205.html
  CWE-206:
    categories:
    - ALL
    - boost-hardened
    description: The product performs multiple behaviors that are combined to produce
      a single result, but the individual behaviors are observable separately in a
      way that allows attackers to reveal internal state or internal decision points.
    group: top10-broken-access-control
    name: CWE-206
    pretty_name: 'CWE-206: Observable Internal Behavioral Discrepancy'
    ref: https://cwe.mitre.org/data/definitions/206.html
  CWE-207:
    categories:
    - ALL
    - boost-hardened
    description: The product operates in an environment in which its existence or
      specific identity should not be known, but it behaves differently than other
      products with equivalent functionality, in a way that is observable to an attacker.
    group: top10-broken-access-control
    name: CWE-207
    pretty_name: 'CWE-207: Observable Behavioral Discrepancy With Equivalent Products'
    ref: https://cwe.mitre.org/data/definitions/207.html
  CWE-208:
    categories:
    - ALL
    - boost-hardened
    description: Two separate operations in a product require different amounts of
      time to complete, in a way that is observable to an actor and reveals security-relevant
      information about the state of the product, such as whether a particular operation
      was successful or not.
    group: top10-broken-access-control
    name: CWE-208
    pretty_name: 'CWE-208: Observable Timing Discrepancy'
    ref: https://cwe.mitre.org/data/definitions/208.html
  CWE-209:
    categories:
    - ALL
    - boost-hardened
    description: The product generates an error message that includes sensitive information
      about its environment, users, or associated data.
    group: top10-insecure-design
    name: CWE-209
    pretty_name: 'CWE-209: Generation of Error Message Containing Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/209.html
  CWE-210:
    categories:
    - ALL
    - boost-hardened
    description: The product identifies an error condition and creates its own diagnostic
      or error messages that contain sensitive information.
    group: top10-insecure-design
    name: CWE-210
    pretty_name: 'CWE-210: Self-generated Error Message Containing Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/210.html
  CWE-211:
    categories:
    - ALL
    - boost-hardened
    description: The product performs an operation that triggers an external diagnostic
      or error message that is not directly generated or controlled by the product,
      such as an error generated by the programming language interpreter that a software
      application uses. The error can contain sensitive system information.
    group: top10-insecure-design
    name: CWE-211
    pretty_name: 'CWE-211: Externally-Generated Error Message Containing Sensitive
      Information'
    ref: https://cwe.mitre.org/data/definitions/211.html
  CWE-212:
    categories:
    - ALL
    - boost-hardened
    description: The product stores, transfers, or shares a resource that contains
      sensitive information, but it does not properly remove that information before
      the product makes the resource available to unauthorized actors.
    group: top10-insecure-design
    name: CWE-212
    pretty_name: 'CWE-212: Improper Removal of Sensitive Information Before Storage
      or Transfer'
    ref: https://cwe.mitre.org/data/definitions/212.html
  CWE-213:
    categories:
    - ALL
    - boost-hardened
    description: The product's intended functionality exposes information to certain
      actors in accordance with the developer's security policy, but this information
      is regarded as sensitive according to the intended security policies of other
      stakeholders such as the product's administrator, users, or others whose information
      is being processed.
    group: top10-insecure-design
    name: CWE-213
    pretty_name: 'CWE-213: Exposure of Sensitive Information Due to Incompatible Policies'
    ref: https://cwe.mitre.org/data/definitions/213.html
  CWE-214:
    categories:
    - ALL
    - boost-hardened
    description: A process is invoked with sensitive command-line arguments, environment
      variables, or other elements that can be seen by other processes on the operating
      system.
    group: top10-broken-access-control
    name: CWE-214
    pretty_name: 'CWE-214: Invocation of Process Using Visible Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/214.html
  CWE-215:
    categories:
    - ALL
    - boost-hardened
    description: The product inserts sensitive information into debugging code, which
      could expose this information if the debugging code is not disabled in production.
    group: top10-broken-access-control
    name: CWE-215
    pretty_name: 'CWE-215: Insertion of Sensitive Information Into Debugging Code'
    ref: https://cwe.mitre.org/data/definitions/215.html
  CWE-219:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive data under the web document root with
      insufficient access control, which might make it accessible to untrusted parties.
    group: top10-broken-access-control
    name: CWE-219
    pretty_name: 'CWE-219: Storage of File with Sensitive Data Under Web Root'
    ref: https://cwe.mitre.org/data/definitions/219.html
  CWE-22:
    categories:
    - ALL
    - cwe-22
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product uses external input to construct a pathname that is intended
      to identify a file or directory that is located underneath a restricted parent
      directory, but the product does not properly neutralize special elements within
      the pathname that can cause the pathname to resolve to a location that is outside
      of the restricted directory.
    group: top10-broken-access-control
    name: CWE-22
    pretty_name: 'CWE-22: Improper Limitation of a Pathname to a Restricted Directory
      (''Path Traversal'')'
    ref: https://cwe.mitre.org/data/definitions/22.html
    recommended: true
  CWE-220:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive data under the FTP server root with
      insufficient access control, which might make it accessible to untrusted parties.
    group: top10-broken-access-control
    name: CWE-220
    pretty_name: 'CWE-220: Storage of File With Sensitive Data Under FTP Root'
    ref: https://cwe.mitre.org/data/definitions/220.html
  CWE-221:
    categories:
    - ALL
    - boost-hardened
    description: The product does not record, or improperly records, security-relevant
      information that leads to an incorrect decision or hampers later analysis.
    group: top10-insecure-design
    name: CWE-221
    pretty_name: 'CWE-221: Information Loss or Omission'
    ref: https://cwe.mitre.org/data/definitions/221.html
  CWE-222:
    categories:
    - ALL
    - boost-hardened
    description: The product truncates the display, recording, or processing of security-relevant
      information in a way that can obscure the source or nature of an attack.
    group: top10-insecure-design
    name: CWE-222
    pretty_name: 'CWE-222: Truncation of Security-relevant Information'
    ref: https://cwe.mitre.org/data/definitions/222.html
  CWE-223:
    categories:
    - ALL
    - boost-hardened
    description: The product does not record or display information that would be
      important for identifying the source or nature of an attack, or determining
      if an action is safe.
    group: top10-security-logging-monitoring-failures
    name: CWE-223
    pretty_name: 'CWE-223: Omission of Security-relevant Information'
    ref: https://cwe.mitre.org/data/definitions/223.html
  CWE-224:
    categories:
    - ALL
    - boost-hardened
    description: The product records security-relevant information according to an
      alternate name of the affected entity, instead of the canonical name.
    group: top10-insecure-design
    name: CWE-224
    pretty_name: 'CWE-224: Obscured Security-relevant Information by Alternate Name'
    ref: https://cwe.mitre.org/data/definitions/224.html
  CWE-226:
    categories:
    - ALL
    - boost-hardened
    description: The product releases a resource such as memory or a file so that
      it can be made available for reuse, but it does not clear or "zeroize" the information
      contained in the resource before the product performs a critical state transition
      or makes the resource available for reuse by other entities.
    group: top10-insecure-design
    name: CWE-226
    pretty_name: 'CWE-226: Sensitive Information in Resource Not Removed Before Reuse'
    ref: https://cwe.mitre.org/data/definitions/226.html
  CWE-228:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles input that is
      not syntactically well-formed with respect to the associated specification.
    group: top10-injection
    name: CWE-228
    pretty_name: 'CWE-228: Improper Handling of Syntactically Invalid Structure'
    ref: https://cwe.mitre.org/data/definitions/228.html
  CWE-229:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle when the expected number of
      values for parameters, fields, or arguments is not provided in input, or if
      those values are undefined.
    group: top10-injection
    name: CWE-229
    pretty_name: 'CWE-229: Improper Handling of Values'
    ref: https://cwe.mitre.org/data/definitions/229.html
  CWE-23:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize sequences
      such as ".." that can resolve to a location that is outside of that directory.
    group: top10-broken-access-control
    name: CWE-23
    pretty_name: 'CWE-23: Relative Path Traversal'
    ref: https://cwe.mitre.org/data/definitions/23.html
  CWE-230:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles when a parameter,
      field, or argument name is specified, but the associated value is missing, i.e.
      it is empty, blank, or null.
    group: top10-injection
    name: CWE-230
    pretty_name: 'CWE-230: Improper Handling of Missing Values'
    ref: https://cwe.mitre.org/data/definitions/230.html
  CWE-231:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles when more values
      are provided than expected.
    group: top10-injection
    name: CWE-231
    pretty_name: 'CWE-231: Improper Handling of Extra Values'
    ref: https://cwe.mitre.org/data/definitions/231.html
  CWE-232:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles when a value is
      not defined or supported for the associated parameter, field, or argument name.
    group: top10-injection
    name: CWE-232
    pretty_name: 'CWE-232: Improper Handling of Undefined Values'
    ref: https://cwe.mitre.org/data/definitions/232.html
  CWE-233:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle when the expected number of
      parameters, fields, or arguments is not provided in input, or if those parameters
      are undefined.
    group: top10-injection
    name: CWE-233
    pretty_name: 'CWE-233: Improper Handling of Parameters'
    ref: https://cwe.mitre.org/data/definitions/233.html
  CWE-234:
    categories:
    - ALL
    - boost-hardened
    description: If too few arguments are sent to a function, the function will still
      pop the expected number of arguments from the stack. Potentially, a variable
      number of arguments could be exhausted in a function as well.
    group: top10-injection
    name: CWE-234
    pretty_name: 'CWE-234: Failure to Handle Missing Parameter'
    ref: https://cwe.mitre.org/data/definitions/234.html
  CWE-235:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles when the number
      of parameters, fields, or arguments with the same name exceeds the expected
      amount.
    group: top10-insecure-design
    name: CWE-235
    pretty_name: 'CWE-235: Improper Handling of Extra Parameters'
    ref: https://cwe.mitre.org/data/definitions/235.html
  CWE-236:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles when a particular
      parameter, field, or argument name is not defined or supported by the product.
    group: top10-injection
    name: CWE-236
    pretty_name: 'CWE-236: Improper Handling of Undefined Parameters'
    ref: https://cwe.mitre.org/data/definitions/236.html
  CWE-237:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles inputs that are
      related to complex structures.
    group: top10-injection
    name: CWE-237
    pretty_name: 'CWE-237: Improper Handling of Structural Elements'
    ref: https://cwe.mitre.org/data/definitions/237.html
  CWE-238:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles when a particular
      structural element is not completely specified.
    group: top10-injection
    name: CWE-238
    pretty_name: 'CWE-238: Improper Handling of Incomplete Structural Elements'
    ref: https://cwe.mitre.org/data/definitions/238.html
  CWE-239:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle when a particular element is
      not completely specified.
    group: top10-injection
    name: CWE-239
    pretty_name: 'CWE-239: Failure to Handle Incomplete Element'
    ref: https://cwe.mitre.org/data/definitions/239.html
  CWE-24:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize "../"
      sequences that can resolve to a location that is outside of that directory.
    group: top10-broken-access-control
    name: CWE-24
    pretty_name: 'CWE-24: Path Traversal: ''../filedir'''
    ref: https://cwe.mitre.org/data/definitions/24.html
  CWE-240:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles when two or more
      structural elements should be consistent, but are not.
    group: top10-injection
    name: CWE-240
    pretty_name: 'CWE-240: Improper Handling of Inconsistent Structural Elements'
    ref: https://cwe.mitre.org/data/definitions/240.html
  CWE-241:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles when a particular
      element is not the expected type, e.g. it expects a digit (0-9) but is provided
      with a letter (A-Z).
    group: top10-injection
    name: CWE-241
    pretty_name: 'CWE-241: Improper Handling of Unexpected Data Type'
    ref: https://cwe.mitre.org/data/definitions/241.html
  CWE-242:
    categories:
    - ALL
    - boost-hardened
    description: The product calls a function that can never be guaranteed to work
      safely.
    group: top10-insecure-design
    name: CWE-242
    pretty_name: 'CWE-242: Use of Inherently Dangerous Function'
    ref: https://cwe.mitre.org/data/definitions/242.html
  CWE-243:
    categories:
    - ALL
    - boost-hardened
    description: The product uses the chroot() system call to create a jail, but does
      not change the working directory afterward. This does not prevent access to
      files outside of the jail.
    group: top10-insecure-design
    name: CWE-243
    pretty_name: 'CWE-243: Creation of chroot Jail Without Changing Working Directory'
    ref: https://cwe.mitre.org/data/definitions/243.html
  CWE-244:
    categories:
    - ALL
    - boost-hardened
    description: Using realloc() to resize buffers that store sensitive information
      can leave the sensitive information exposed to attack, because it is not removed
      from memory.
    group: top10-insecure-design
    name: CWE-244
    pretty_name: 'CWE-244: Improper Clearing of Heap Memory Before Release (''Heap
      Inspection'')'
    ref: https://cwe.mitre.org/data/definitions/244.html
  CWE-245:
    categories:
    - ALL
    - boost-hardened
    description: The J2EE application directly manages connections, instead of using
      the container's connection management facilities.
    group: top10-insecure-design
    name: CWE-245
    pretty_name: 'CWE-245: J2EE Bad Practices: Direct Management of Connections'
    ref: https://cwe.mitre.org/data/definitions/245.html
  CWE-246:
    categories:
    - ALL
    - boost-hardened
    description: The J2EE application directly uses sockets instead of using framework
      method calls.
    group: top10-insecure-design
    name: CWE-246
    pretty_name: 'CWE-246: J2EE Bad Practices: Direct Use of Sockets'
    ref: https://cwe.mitre.org/data/definitions/246.html
  CWE-248:
    categories:
    - ALL
    - boost-hardened
    description: An exception is thrown from a function, but it is not caught.
    group: top10-insecure-design
    name: CWE-248
    pretty_name: 'CWE-248: Uncaught Exception'
    ref: https://cwe.mitre.org/data/definitions/248.html
  CWE-25:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize "/../"
      sequences that can resolve to a location that is outside of that directory.
    group: top10-broken-access-control
    name: CWE-25
    pretty_name: 'CWE-25: Path Traversal: ''/../filedir'''
    ref: https://cwe.mitre.org/data/definitions/25.html
  CWE-250:
    categories:
    - ALL
    - cwe-250
    - boost-hardened
    description: The product performs an operation at a privilege level that is higher
      than the minimum level required, which creates new weaknesses or amplifies the
      consequences of other weaknesses.
    group: top10-security-misconfiguration
    name: CWE-250
    pretty_name: 'CWE-250: Execution with Unnecessary Privileges'
    ref: https://cwe.mitre.org/data/definitions/250.html
  CWE-252:
    categories:
    - ALL
    - boost-hardened
    description: The product does not check the return value from a method or function,
      which can prevent it from detecting unexpected states and conditions.
    group: top10-insecure-design
    name: CWE-252
    pretty_name: 'CWE-252: Unchecked Return Value'
    ref: https://cwe.mitre.org/data/definitions/252.html
  CWE-253:
    categories:
    - ALL
    - boost-hardened
    description: The product incorrectly checks a return value from a function, which
      prevents it from detecting errors or exceptional conditions.
    group: top10-insecure-design
    name: CWE-253
    pretty_name: 'CWE-253: Incorrect Check of Function Return Value'
    ref: https://cwe.mitre.org/data/definitions/253.html
  CWE-256:
    categories:
    - ALL
    - boost-hardened
    description: Storing a password in plaintext may result in a system compromise.
    group: top10-insecure-design
    name: CWE-256
    pretty_name: 'CWE-256: Plaintext Storage of a Password'
    ref: https://cwe.mitre.org/data/definitions/256.html
  CWE-257:
    categories:
    - ALL
    - boost-hardened
    description: The storage of passwords in a recoverable format makes them subject
      to password reuse attacks by malicious users. In fact, it should be noted that
      recoverable encrypted passwords provide no significant benefit over plaintext
      passwords since they are subject not only to reuse by malicious attackers but
      also by malicious insiders. If a system administrator can recover a password
      directly, or use a brute force search on the available information, the administrator
      can use the password on other accounts.
    group: top10-insecure-design
    name: CWE-257
    pretty_name: 'CWE-257: Storing Passwords in a Recoverable Format'
    ref: https://cwe.mitre.org/data/definitions/257.html
  CWE-258:
    categories:
    - ALL
    - boost-hardened
    description: Using an empty string as a password is insecure.
    group: top10-security-misconfiguration
    name: CWE-258
    pretty_name: 'CWE-258: Empty Password in Configuration File'
    ref: https://cwe.mitre.org/data/definitions/258.html
  CWE-259:
    categories:
    - ALL
    - cwe-259
    - boost-hardened
    - owasp-top-10
    description: The product contains a hard-coded password, which it uses for its
      own inbound authentication or for outbound communication to external components.
    group: top10-id-authn-failures
    name: CWE-259
    pretty_name: 'CWE-259: Use of Hard-coded Password'
    ref: https://cwe.mitre.org/data/definitions/259.html
  CWE-26:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize "/dir/../filename"
      sequences that can resolve to a location that is outside of that directory.
    group: top10-broken-access-control
    name: CWE-26
    pretty_name: 'CWE-26: Path Traversal: ''/dir/../filename'''
    ref: https://cwe.mitre.org/data/definitions/26.html
  CWE-260:
    categories:
    - ALL
    - boost-hardened
    description: The product stores a password in a configuration file that might
      be accessible to actors who do not know the password.
    group: top10-security-misconfiguration
    name: CWE-260
    pretty_name: 'CWE-260: Password in Configuration File'
    ref: https://cwe.mitre.org/data/definitions/260.html
  CWE-261:
    categories:
    - ALL
    - boost-hardened
    description: Obscuring a password with a trivial encoding does not protect the
      password.
    group: top10-crypto-failures
    name: CWE-261
    pretty_name: 'CWE-261: Weak Encoding for Password'
    ref: https://cwe.mitre.org/data/definitions/261.html
  CWE-262:
    categories:
    - ALL
    - boost-hardened
    description: The product does not have a mechanism in place for managing password
      aging.
    group: top10-id-authn-failures
    name: CWE-262
    pretty_name: 'CWE-262: Not Using Password Aging'
    ref: https://cwe.mitre.org/data/definitions/262.html
  CWE-263:
    categories:
    - ALL
    - boost-hardened
    description: The product supports password aging, but the expiration period is
      too long.
    group: top10-id-authn-failures
    name: CWE-263
    pretty_name: 'CWE-263: Password Aging with Long Expiration'
    ref: https://cwe.mitre.org/data/definitions/263.html
  CWE-266:
    categories:
    - ALL
    - boost-hardened
    description: A product incorrectly assigns a privilege to a particular actor,
      creating an unintended sphere of control for that actor.
    group: top10-insecure-design
    name: CWE-266
    pretty_name: 'CWE-266: Incorrect Privilege Assignment'
    ref: https://cwe.mitre.org/data/definitions/266.html
  CWE-267:
    categories:
    - ALL
    - boost-hardened
    description: A particular privilege, role, capability, or right can be used to
      perform unsafe actions that were not intended, even when it is assigned to the
      correct entity.
    group: top10-insecure-design
    name: CWE-267
    pretty_name: 'CWE-267: Privilege Defined With Unsafe Actions'
    ref: https://cwe.mitre.org/data/definitions/267.html
  CWE-268:
    categories:
    - ALL
    - boost-hardened
    description: Two distinct privileges, roles, capabilities, or rights can be combined
      in a way that allows an entity to perform unsafe actions that would not be allowed
      without that combination.
    group: top10-insecure-design
    name: CWE-268
    pretty_name: 'CWE-268: Privilege Chaining'
    ref: https://cwe.mitre.org/data/definitions/268.html
  CWE-269:
    categories:
    - ALL
    - cwe-269
    - boost-hardened
    - owasp-top-10
    description: The product does not properly assign, modify, track, or check privileges
      for an actor, creating an unintended sphere of control for that actor.
    group: top10-insecure-design
    name: CWE-269
    pretty_name: 'CWE-269: Improper Privilege Management'
    ref: https://cwe.mitre.org/data/definitions/269.html
  CWE-27:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize multiple
      internal "../" sequences that can resolve to a location that is outside of that
      directory.
    group: top10-broken-access-control
    name: CWE-27
    pretty_name: 'CWE-27: Path Traversal: ''dir/../../filename'''
    ref: https://cwe.mitre.org/data/definitions/27.html
  CWE-270:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly manage privileges while it is switching
      between different contexts that have different privileges or spheres of control.
    group: top10-insecure-design
    name: CWE-270
    pretty_name: 'CWE-270: Privilege Context Switching Error'
    ref: https://cwe.mitre.org/data/definitions/270.html
  CWE-271:
    categories:
    - ALL
    - boost-hardened
    description: The product does not drop privileges before passing control of a
      resource to an actor that does not have those privileges.
    group: top10-insecure-design
    name: CWE-271
    pretty_name: 'CWE-271: Privilege Dropping / Lowering Errors'
    ref: https://cwe.mitre.org/data/definitions/271.html
  CWE-272:
    categories:
    - ALL
    - boost-hardened
    description: The elevated privilege level required to perform operations such
      as chroot() should be dropped immediately after the operation is performed.
    group: top10-insecure-design
    name: CWE-272
    pretty_name: 'CWE-272: Least Privilege Violation'
    ref: https://cwe.mitre.org/data/definitions/272.html
  CWE-273:
    categories:
    - ALL
    - boost-hardened
    description: The product attempts to drop privileges but does not check or incorrectly
      checks to see if the drop succeeded.
    group: top10-insecure-design
    name: CWE-273
    pretty_name: 'CWE-273: Improper Check for Dropped Privileges'
    ref: https://cwe.mitre.org/data/definitions/273.html
  CWE-274:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles when it has insufficient
      privileges to perform an operation, leading to resultant weaknesses.
    group: top10-insecure-design
    name: CWE-274
    pretty_name: 'CWE-274: Improper Handling of Insufficient Privileges'
    ref: https://cwe.mitre.org/data/definitions/274.html
  CWE-276:
    categories:
    - ALL
    - cwe-276
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: During installation, installed file permissions are set to allow
      anyone to modify those files.
    group: top10-broken-access-control
    name: CWE-276
    pretty_name: 'CWE-276: Incorrect Default Permissions'
    ref: https://cwe.mitre.org/data/definitions/276.html
  CWE-277:
    categories:
    - ALL
    - boost-hardened
    description: A product defines a set of insecure permissions that are inherited
      by objects that are created by the program.
    group: top10-broken-access-control
    name: CWE-277
    pretty_name: 'CWE-277: Insecure Inherited Permissions'
    ref: https://cwe.mitre.org/data/definitions/277.html
  CWE-278:
    categories:
    - ALL
    - boost-hardened
    description: A product inherits a set of insecure permissions for an object, e.g.
      when copying from an archive file, without user awareness or involvement.
    group: top10-broken-access-control
    name: CWE-278
    pretty_name: 'CWE-278: Insecure Preserved Inherited Permissions'
    ref: https://cwe.mitre.org/data/definitions/278.html
  CWE-279:
    categories:
    - ALL
    - boost-hardened
    description: While it is executing, the product sets the permissions of an object
      in a way that violates the intended permissions that have been specified by
      the user.
    group: top10-broken-access-control
    name: CWE-279
    pretty_name: 'CWE-279: Incorrect Execution-Assigned Permissions'
    ref: https://cwe.mitre.org/data/definitions/279.html
  CWE-28:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize "..\"
      sequences that can resolve to a location that is outside of that directory.
    group: top10-broken-access-control
    name: CWE-28
    pretty_name: 'CWE-28: Path Traversal: ''..\filedir'''
    ref: https://cwe.mitre.org/data/definitions/28.html
  CWE-280:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles when it has insufficient
      privileges to access resources or functionality as specified by their permissions.
      This may cause it to follow unexpected code paths that may leave the product
      in an invalid state.
    group: top10-insecure-design
    name: CWE-280
    pretty_name: 'CWE-280: Improper Handling of Insufficient Permissions or Privileges '
    ref: https://cwe.mitre.org/data/definitions/280.html
  CWE-281:
    categories:
    - ALL
    - boost-hardened
    description: The product does not preserve permissions or incorrectly preserves
      permissions when copying, restoring, or sharing objects, which can cause them
      to have less restrictive permissions than intended.
    group: top10-broken-access-control
    name: CWE-281
    pretty_name: 'CWE-281: Improper Preservation of Permissions'
    ref: https://cwe.mitre.org/data/definitions/281.html
  CWE-282:
    categories:
    - ALL
    - boost-hardened
    description: The product assigns the wrong ownership, or does not properly verify
      the ownership, of an object or resource.
    group: top10-broken-access-control
    name: CWE-282
    pretty_name: 'CWE-282: Improper Ownership Management'
    ref: https://cwe.mitre.org/data/definitions/282.html
  CWE-283:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly verify that a critical resource is
      owned by the proper entity.
    group: top10-broken-access-control
    name: CWE-283
    pretty_name: 'CWE-283: Unverified Ownership'
    ref: https://cwe.mitre.org/data/definitions/283.html
  CWE-284:
    categories:
    - ALL
    - cwe-284
    - boost-hardened
    - owasp-top-10
    description: The product does not restrict or incorrectly restricts access to
      a resource from an unauthorized actor.
    group: top10-broken-access-control
    name: CWE-284
    pretty_name: 'CWE-284: Improper Access Control'
    ref: https://cwe.mitre.org/data/definitions/284.html
  CWE-285:
    categories:
    - ALL
    - cwe-285
    - boost-hardened
    - owasp-top-10
    description: The product does not perform or incorrectly performs an authorization
      check when an actor attempts to access a resource or perform an action.
    group: top10-broken-access-control
    name: CWE-285
    pretty_name: 'CWE-285: Improper Authorization'
    ref: https://cwe.mitre.org/data/definitions/285.html
  CWE-286:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly manage a user within its environment.
    group: top10-broken-access-control
    name: CWE-286
    pretty_name: 'CWE-286: Incorrect User Management'
    ref: https://cwe.mitre.org/data/definitions/286.html
  CWE-287:
    categories:
    - ALL
    - cwe-287
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: When an actor claims to have a given identity, the product does not
      prove or insufficiently proves that the claim is correct.
    group: top10-id-authn-failures
    name: CWE-287
    pretty_name: 'CWE-287: Improper Authentication'
    ref: https://cwe.mitre.org/data/definitions/287.html
    recommended: true
  CWE-288:
    categories:
    - ALL
    - boost-hardened
    description: A product requires authentication, but the product has an alternate
      path or channel that does not require authentication.
    group: top10-id-authn-failures
    name: CWE-288
    pretty_name: 'CWE-288: Authentication Bypass Using an Alternate Path or Channel'
    ref: https://cwe.mitre.org/data/definitions/288.html
  CWE-289:
    categories:
    - ALL
    - boost-hardened
    description: The product performs authentication based on the name of a resource
      being accessed, or the name of the actor performing the access, but it does
      not properly check all possible names for that resource or actor.
    group: top10-id-authn-failures
    name: CWE-289
    pretty_name: 'CWE-289: Authentication Bypass by Alternate Name'
    ref: https://cwe.mitre.org/data/definitions/289.html
  CWE-29:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize '\..\filename'
      (leading backslash dot dot) sequences that can resolve to a location that is
      outside of that directory.
    group: top10-broken-access-control
    name: CWE-29
    pretty_name: 'CWE-29: Path Traversal: ''\..\filename'''
    ref: https://cwe.mitre.org/data/definitions/29.html
  CWE-290:
    categories:
    - ALL
    - boost-hardened
    description: This attack-focused weakness is caused by incorrectly implemented
      authentication schemes that are subject to spoofing attacks.
    group: top10-id-authn-failures
    name: CWE-290
    pretty_name: 'CWE-290: Authentication Bypass by Spoofing'
    ref: https://cwe.mitre.org/data/definitions/290.html
  CWE-291:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an IP address for authentication.
    group: top10-id-authn-failures
    name: CWE-291
    pretty_name: 'CWE-291: Reliance on IP Address for Authentication'
    ref: https://cwe.mitre.org/data/definitions/291.html
  CWE-293:
    categories:
    - ALL
    - boost-hardened
    description: The referer field in HTTP requests can be easily modified and, as
      such, is not a valid means of message integrity checking.
    group: top10-id-authn-failures
    name: CWE-293
    pretty_name: 'CWE-293: Using Referer Field for Authentication'
    ref: https://cwe.mitre.org/data/definitions/293.html
  CWE-294:
    categories:
    - ALL
    - boost-hardened
    description: A capture-replay flaw exists when the design of the product makes
      it possible for a malicious user to sniff network traffic and bypass authentication
      by replaying it to the server in question to the same effect as the original
      message (or with minor changes).
    group: top10-id-authn-failures
    name: CWE-294
    pretty_name: 'CWE-294: Authentication Bypass by Capture-replay'
    ref: https://cwe.mitre.org/data/definitions/294.html
  CWE-295:
    categories:
    - ALL
    - cwe-295
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product does not validate, or incorrectly validates, a certificate.
    group: top10-id-authn-failures
    name: CWE-295
    pretty_name: 'CWE-295: Improper Certificate Validation'
    ref: https://cwe.mitre.org/data/definitions/295.html
    recommended: true
  CWE-296:
    categories:
    - ALL
    - boost-hardened
    description: The product does not follow, or incorrectly follows, the chain of
      trust for a certificate back to a trusted root certificate, resulting in incorrect
      trust of any resource that is associated with that certificate.
    group: top10-crypto-failures
    name: CWE-296
    pretty_name: 'CWE-296: Improper Following of a Certificate''s Chain of Trust'
    ref: https://cwe.mitre.org/data/definitions/296.html
  CWE-297:
    categories:
    - ALL
    - cwe-297
    - boost-hardened
    - owasp-top-10
    description: The product communicates with a host that provides a certificate,
      but the product does not properly ensure that the certificate is actually associated
      with that host.
    group: top10-id-authn-failures
    name: CWE-297
    pretty_name: 'CWE-297: Improper Validation of Certificate with Host Mismatch'
    ref: https://cwe.mitre.org/data/definitions/297.html
  CWE-298:
    categories:
    - ALL
    - boost-hardened
    description: A certificate expiration is not validated or is incorrectly validated,
      so trust may be assigned to certificates that have been abandoned due to age.
    group: top10-id-authn-failures
    name: CWE-298
    pretty_name: 'CWE-298: Improper Validation of Certificate Expiration'
    ref: https://cwe.mitre.org/data/definitions/298.html
  CWE-299:
    categories:
    - ALL
    - boost-hardened
    description: The product does not check or incorrectly checks the revocation status
      of a certificate, which may cause it to use a certificate that has been compromised.
    group: top10-id-authn-failures
    name: CWE-299
    pretty_name: 'CWE-299: Improper Check for Certificate Revocation'
    ref: https://cwe.mitre.org/data/definitions/299.html
  CWE-30:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize '\dir\..\filename'
      (leading backslash dot dot) sequences that can resolve to a location that is
      outside of that directory.
    group: top10-broken-access-control
    name: CWE-30
    pretty_name: 'CWE-30: Path Traversal: ''\dir\..\filename'''
    ref: https://cwe.mitre.org/data/definitions/30.html
  CWE-300:
    categories:
    - ALL
    - boost-hardened
    description: The product does not adequately verify the identity of actors at
      both ends of a communication channel, or does not adequately ensure the integrity
      of the channel, in a way that allows the channel to be accessed or influenced
      by an actor that is not an endpoint.
    group: top10-id-authn-failures
    name: CWE-300
    pretty_name: 'CWE-300: Channel Accessible by Non-Endpoint'
    ref: https://cwe.mitre.org/data/definitions/300.html
  CWE-301:
    categories:
    - ALL
    - boost-hardened
    description: Simple authentication protocols are subject to reflection attacks
      if a malicious user can use the target machine to impersonate a trusted user.
    group: top10-id-authn-failures
    name: CWE-301
    pretty_name: 'CWE-301: Reflection Attack in an Authentication Protocol'
    ref: https://cwe.mitre.org/data/definitions/301.html
  CWE-302:
    categories:
    - ALL
    - boost-hardened
    description: The authentication scheme or implementation uses key data elements
      that are assumed to be immutable, but can be controlled or modified by the attacker.
    group: top10-id-authn-failures
    name: CWE-302
    pretty_name: 'CWE-302: Authentication Bypass by Assumed-Immutable Data'
    ref: https://cwe.mitre.org/data/definitions/302.html
  CWE-303:
    categories:
    - ALL
    - boost-hardened
    description: The requirements for the product dictate the use of an established
      authentication algorithm, but the implementation of the algorithm is incorrect.
    group: top10-id-authn-failures
    name: CWE-303
    pretty_name: 'CWE-303: Incorrect Implementation of Authentication Algorithm'
    ref: https://cwe.mitre.org/data/definitions/303.html
  CWE-304:
    categories:
    - ALL
    - boost-hardened
    description: The product implements an authentication technique, but it skips
      a step that weakens the technique.
    group: top10-id-authn-failures
    name: CWE-304
    pretty_name: 'CWE-304: Missing Critical Step in Authentication'
    ref: https://cwe.mitre.org/data/definitions/304.html
  CWE-305:
    categories:
    - ALL
    - boost-hardened
    description: The authentication algorithm is sound, but the implemented mechanism
      can be bypassed as the result of a separate weakness that is primary to the
      authentication error.
    group: top10-id-authn-failures
    name: CWE-305
    pretty_name: 'CWE-305: Authentication Bypass by Primary Weakness'
    ref: https://cwe.mitre.org/data/definitions/305.html
  CWE-306:
    categories:
    - ALL
    - cwe-306
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product does not perform any authentication for functionality
      that requires a provable user identity or consumes a significant amount of resources.
    group: top10-id-authn-failures
    name: CWE-306
    pretty_name: 'CWE-306: Missing Authentication for Critical Function'
    ref: https://cwe.mitre.org/data/definitions/306.html
  CWE-307:
    categories:
    - ALL
    - boost-hardened
    description: The product does not implement sufficient measures to prevent multiple
      failed authentication attempts within a short time frame, making it more susceptible
      to brute force attacks.
    group: top10-id-authn-failures
    name: CWE-307
    pretty_name: 'CWE-307: Improper Restriction of Excessive Authentication Attempts'
    ref: https://cwe.mitre.org/data/definitions/307.html
  CWE-308:
    categories:
    - ALL
    - boost-hardened
    description: The use of single-factor authentication can lead to unnecessary risk
      of compromise when compared with the benefits of a dual-factor authentication
      scheme.
    group: top10-id-authn-failures
    name: CWE-308
    pretty_name: 'CWE-308: Use of Single-factor Authentication'
    ref: https://cwe.mitre.org/data/definitions/308.html
  CWE-309:
    categories:
    - ALL
    - boost-hardened
    description: The use of password systems as the primary means of authentication
      may be subject to several flaws or shortcomings, each reducing the effectiveness
      of the mechanism.
    group: top10-id-authn-failures
    name: CWE-309
    pretty_name: 'CWE-309: Use of Password System for Primary Authentication'
    ref: https://cwe.mitre.org/data/definitions/309.html
  CWE-31:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize 'dir\..\..\filename'
      (multiple internal backslash dot dot) sequences that can resolve to a location
      that is outside of that directory.
    group: top10-broken-access-control
    name: CWE-31
    pretty_name: 'CWE-31: Path Traversal: ''dir\..\..\filename'''
    ref: https://cwe.mitre.org/data/definitions/31.html
  CWE-311:
    categories:
    - ALL
    - cwe-311
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product does not encrypt sensitive or critical information before
      storage or transmission.
    group: top10-insecure-design
    name: CWE-311
    pretty_name: 'CWE-311: Missing Encryption of Sensitive Data'
    ref: https://cwe.mitre.org/data/definitions/311.html
    recommended: true
  CWE-312:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive information in cleartext within a resource
      that might be accessible to another control sphere.
    group: top10-insecure-design
    name: CWE-312
    pretty_name: 'CWE-312: Cleartext Storage of Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/312.html
  CWE-313:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive information in cleartext in a file,
      or on disk.
    group: top10-insecure-design
    name: CWE-313
    pretty_name: 'CWE-313: Cleartext Storage in a File or on Disk'
    ref: https://cwe.mitre.org/data/definitions/313.html
  CWE-314:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive information in cleartext in the registry.
    group: top10-insecure-design
    name: CWE-314
    pretty_name: 'CWE-314: Cleartext Storage in the Registry'
    ref: https://cwe.mitre.org/data/definitions/314.html
  CWE-315:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive information in cleartext in a cookie.
    group: top10-security-misconfiguration
    name: CWE-315
    pretty_name: 'CWE-315: Cleartext Storage of Sensitive Information in a Cookie'
    ref: https://cwe.mitre.org/data/definitions/315.html
  CWE-316:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive information in cleartext in memory.
    group: top10-insecure-design
    name: CWE-316
    pretty_name: 'CWE-316: Cleartext Storage of Sensitive Information in Memory'
    ref: https://cwe.mitre.org/data/definitions/316.html
  CWE-317:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive information in cleartext within the
      GUI.
    group: top10-insecure-design
    name: CWE-317
    pretty_name: 'CWE-317: Cleartext Storage of Sensitive Information in GUI'
    ref: https://cwe.mitre.org/data/definitions/317.html
  CWE-318:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive information in cleartext in an executable.
    group: top10-insecure-design
    name: CWE-318
    pretty_name: 'CWE-318: Cleartext Storage of Sensitive Information in Executable'
    ref: https://cwe.mitre.org/data/definitions/318.html
  CWE-319:
    categories:
    - ALL
    - cwe-319
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product transmits sensitive or security-critical data in cleartext
      in a communication channel that can be sniffed by unauthorized actors.
    group: top10-crypto-failures
    name: CWE-319
    pretty_name: 'CWE-319: Cleartext Transmission of Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/319.html
    recommended: true
  CWE-32:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize '...'
      (triple dot) sequences that can resolve to a location that is outside of that
      directory.
    group: top10-broken-access-control
    name: CWE-32
    pretty_name: 'CWE-32: Path Traversal: ''...'' (Triple Dot)'
    ref: https://cwe.mitre.org/data/definitions/32.html
  CWE-321:
    categories:
    - ALL
    - boost-hardened
    description: The use of a hard-coded cryptographic key significantly increases
      the possibility that encrypted data may be recovered.
    group: top10-crypto-failures
    name: CWE-321
    pretty_name: 'CWE-321: Use of Hard-coded Cryptographic Key'
    ref: https://cwe.mitre.org/data/definitions/321.html
  CWE-322:
    categories:
    - ALL
    - boost-hardened
    description: The product performs a key exchange with an actor without verifying
      the identity of that actor.
    group: top10-crypto-failures
    name: CWE-322
    pretty_name: 'CWE-322: Key Exchange without Entity Authentication'
    ref: https://cwe.mitre.org/data/definitions/322.html
  CWE-323:
    categories:
    - ALL
    - boost-hardened
    description: Nonces should be used for the present occasion and only once.
    group: top10-crypto-failures
    name: CWE-323
    pretty_name: 'CWE-323: Reusing a Nonce, Key Pair in Encryption'
    ref: https://cwe.mitre.org/data/definitions/323.html
  CWE-324:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a cryptographic key or password past its expiration
      date, which diminishes its safety significantly by increasing the timing window
      for cracking attacks against that key.
    group: top10-crypto-failures
    name: CWE-324
    pretty_name: 'CWE-324: Use of a Key Past its Expiration Date'
    ref: https://cwe.mitre.org/data/definitions/324.html
  CWE-325:
    categories:
    - ALL
    - boost-hardened
    description: The product does not implement a required step in a cryptographic
      algorithm, resulting in weaker encryption than advertised by the algorithm.
    group: top10-crypto-failures
    name: CWE-325
    pretty_name: 'CWE-325: Missing Cryptographic Step'
    ref: https://cwe.mitre.org/data/definitions/325.html
  CWE-326:
    categories:
    - ALL
    - cwe-326
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product stores or transmits sensitive data using an encryption
      scheme that is theoretically sound, but is not strong enough for the level of
      protection required.
    group: top10-crypto-failures
    name: CWE-326
    pretty_name: 'CWE-326: Inadequate Encryption Strength'
    ref: https://cwe.mitre.org/data/definitions/326.html
    recommended: true
  CWE-327:
    categories:
    - ALL
    - cwe-327
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product uses a broken or risky cryptographic algorithm or protocol.
    group: top10-crypto-failures
    name: CWE-327
    pretty_name: 'CWE-327: Use of a Broken or Risky Cryptographic Algorithm'
    ref: https://cwe.mitre.org/data/definitions/327.html
    recommended: true
  CWE-328:
    categories:
    - ALL
    - cwe-328
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product uses an algorithm that produces a digest (output value)
      that does not meet security expectations for a hash function that allows an
      adversary to reasonably determine the original input (preimage attack), find
      another input that can produce the same hash (2nd preimage attack), or find
      multiple inputs that evaluate to the same hash (birthday attack).
    group: top10-crypto-failures
    name: CWE-328
    pretty_name: 'CWE-328: Use of Weak Hash'
    ref: https://cwe.mitre.org/data/definitions/328.html
    recommended: true
  CWE-329:
    categories:
    - ALL
    - boost-hardened
    description: The product generates and uses a predictable initialization Vector
      (IV) with Cipher Block Chaining (CBC) Mode, which causes algorithms to be susceptible
      to dictionary attacks when they are encrypted under the same key.
    group: top10-crypto-failures
    name: CWE-329
    pretty_name: 'CWE-329: Generation of Predictable IV with CBC Mode'
    ref: https://cwe.mitre.org/data/definitions/329.html
  CWE-33:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize '....'
      (multiple dot) sequences that can resolve to a location that is outside of that
      directory.
    group: top10-broken-access-control
    name: CWE-33
    pretty_name: 'CWE-33: Path Traversal: ''....'' (Multiple Dot)'
    ref: https://cwe.mitre.org/data/definitions/33.html
  CWE-330:
    categories:
    - ALL
    - boost-hardened
    description: The product uses insufficiently random numbers or values in a security
      context that depends on unpredictable numbers.
    group: top10-crypto-failures
    name: CWE-330
    pretty_name: 'CWE-330: Use of Insufficiently Random Values'
    ref: https://cwe.mitre.org/data/definitions/330.html
  CWE-331:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an algorithm or scheme that produces insufficient
      entropy, leaving patterns or clusters of values that are more likely to occur
      than others.
    group: top10-crypto-failures
    name: CWE-331
    pretty_name: 'CWE-331: Insufficient Entropy'
    ref: https://cwe.mitre.org/data/definitions/331.html
  CWE-332:
    categories:
    - ALL
    - boost-hardened
    description: The lack of entropy available for, or used by, a Pseudo-Random Number
      Generator (PRNG) can be a stability and security threat.
    group: top10-crypto-failures
    name: CWE-332
    pretty_name: 'CWE-332: Insufficient Entropy in PRNG'
    ref: https://cwe.mitre.org/data/definitions/332.html
  CWE-333:
    categories:
    - ALL
    - boost-hardened
    description: True random number generators (TRNG) generally have a limited source
      of entropy and therefore can fail or block.
    group: top10-crypto-failures
    name: CWE-333
    pretty_name: 'CWE-333: Improper Handling of Insufficient Entropy in TRNG'
    ref: https://cwe.mitre.org/data/definitions/333.html
  CWE-334:
    categories:
    - ALL
    - boost-hardened
    description: The number of possible random values is smaller than needed by the
      product, making it more susceptible to brute force attacks.
    group: top10-crypto-failures
    name: CWE-334
    pretty_name: 'CWE-334: Small Space of Random Values'
    ref: https://cwe.mitre.org/data/definitions/334.html
  CWE-335:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a Pseudo-Random Number Generator (PRNG) but does
      not correctly manage seeds.
    group: top10-crypto-failures
    name: CWE-335
    pretty_name: 'CWE-335: Incorrect Usage of Seeds in Pseudo-Random Number Generator
      (PRNG)'
    ref: https://cwe.mitre.org/data/definitions/335.html
  CWE-336:
    categories:
    - ALL
    - boost-hardened
    description: A Pseudo-Random Number Generator (PRNG) uses the same seed each time
      the product is initialized.
    group: top10-crypto-failures
    name: CWE-336
    pretty_name: 'CWE-336: Same Seed in Pseudo-Random Number Generator (PRNG)'
    ref: https://cwe.mitre.org/data/definitions/336.html
  CWE-337:
    categories:
    - ALL
    - boost-hardened
    description: A Pseudo-Random Number Generator (PRNG) is initialized from a predictable
      seed, such as the process ID or system time.
    group: top10-crypto-failures
    name: CWE-337
    pretty_name: 'CWE-337: Predictable Seed in Pseudo-Random Number Generator (PRNG)'
    ref: https://cwe.mitre.org/data/definitions/337.html
  CWE-338:
    categories:
    - ALL
    - cwe-338
    - boost-hardened
    - owasp-top-10
    description: The product uses a Pseudo-Random Number Generator (PRNG) in a security
      context, but the PRNG's algorithm is not cryptographically strong.
    group: top10-crypto-failures
    name: CWE-338
    pretty_name: 'CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator
      (PRNG)'
    ref: https://cwe.mitre.org/data/definitions/338.html
  CWE-339:
    categories:
    - ALL
    - boost-hardened
    description: A Pseudo-Random Number Generator (PRNG) uses a relatively small seed
      space, which makes it more susceptible to brute force attacks.
    group: top10-crypto-failures
    name: CWE-339
    pretty_name: 'CWE-339: Small Seed Space in PRNG'
    ref: https://cwe.mitre.org/data/definitions/339.html
  CWE-34:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize '....//'
      (doubled dot dot slash) sequences that can resolve to a location that is outside
      of that directory.
    group: top10-broken-access-control
    name: CWE-34
    pretty_name: 'CWE-34: Path Traversal: ''....//'''
    ref: https://cwe.mitre.org/data/definitions/34.html
  CWE-340:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a scheme that generates numbers or identifiers that
      are more predictable than required.
    group: top10-crypto-failures
    name: CWE-340
    pretty_name: 'CWE-340: Generation of Predictable Numbers or Identifiers'
    ref: https://cwe.mitre.org/data/definitions/340.html
  CWE-341:
    categories:
    - ALL
    - boost-hardened
    description: A number or object is predictable based on observations that the
      attacker can make about the state of the system or network, such as time, process
      ID, etc.
    group: top10-crypto-failures
    name: CWE-341
    pretty_name: 'CWE-341: Predictable from Observable State'
    ref: https://cwe.mitre.org/data/definitions/341.html
  CWE-342:
    categories:
    - ALL
    - boost-hardened
    description: An exact value or random number can be precisely predicted by observing
      previous values.
    group: top10-crypto-failures
    name: CWE-342
    pretty_name: 'CWE-342: Predictable Exact Value from Previous Values'
    ref: https://cwe.mitre.org/data/definitions/342.html
  CWE-343:
    categories:
    - ALL
    - boost-hardened
    description: The product's random number generator produces a series of values
      which, when observed, can be used to infer a relatively small range of possibilities
      for the next value that could be generated.
    group: top10-crypto-failures
    name: CWE-343
    pretty_name: 'CWE-343: Predictable Value Range from Previous Values'
    ref: https://cwe.mitre.org/data/definitions/343.html
  CWE-344:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a constant value, name, or reference, but this value
      can (or should) vary across different environments.
    group: top10-crypto-failures
    name: CWE-344
    pretty_name: 'CWE-344: Use of Invariant Value in Dynamically Changing Context'
    ref: https://cwe.mitre.org/data/definitions/344.html
  CWE-345:
    categories:
    - ALL
    - cwe-345
    - boost-hardened
    - owasp-top-10
    description: The product does not sufficiently verify the origin or authenticity
      of data, in a way that causes it to accept invalid data.
    group: top10-software-data-integrity-failures
    name: CWE-345
    pretty_name: 'CWE-345: Insufficient Verification of Data Authenticity'
    ref: https://cwe.mitre.org/data/definitions/345.html
  CWE-346:
    categories:
    - ALL
    - cwe-346
    - boost-hardened
    - owasp-top-10
    description: The product does not properly verify that the source of data or communication
      is valid.
    group: top10-id-authn-failures
    name: CWE-346
    pretty_name: 'CWE-346: Origin Validation Error'
    ref: https://cwe.mitre.org/data/definitions/346.html
  CWE-347:
    categories:
    - ALL
    - boost-hardened
    description: The product does not verify, or incorrectly verifies, the cryptographic
      signature for data.
    group: top10-crypto-failures
    name: CWE-347
    pretty_name: 'CWE-347: Improper Verification of Cryptographic Signature'
    ref: https://cwe.mitre.org/data/definitions/347.html
  CWE-348:
    categories:
    - ALL
    - boost-hardened
    description: The product has two different sources of the same data or information,
      but it uses the source that has less support for verification, is less trusted,
      or is less resistant to attack.
    group: top10-software-data-integrity-failures
    name: CWE-348
    pretty_name: 'CWE-348: Use of Less Trusted Source'
    ref: https://cwe.mitre.org/data/definitions/348.html
  CWE-349:
    categories:
    - ALL
    - boost-hardened
    description: The product, when processing trusted data, accepts any untrusted
      data that is also included with the trusted data, treating the untrusted data
      as if it were trusted.
    group: top10-software-data-integrity-failures
    name: CWE-349
    pretty_name: 'CWE-349: Acceptance of Extraneous Untrusted Data With Trusted Data'
    ref: https://cwe.mitre.org/data/definitions/349.html
  CWE-35:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize '.../...//'
      (doubled triple dot slash) sequences that can resolve to a location that is
      outside of that directory.
    group: top10-broken-access-control
    name: CWE-35
    pretty_name: 'CWE-35: Path Traversal: ''.../...//'''
    ref: https://cwe.mitre.org/data/definitions/35.html
  CWE-350:
    categories:
    - ALL
    - boost-hardened
    description: The product performs reverse DNS resolution on an IP address to obtain
      the hostname and make a security decision, but it does not properly ensure that
      the IP address is truly associated with the hostname.
    group: top10-id-authn-failures
    name: CWE-350
    pretty_name: 'CWE-350: Reliance on Reverse DNS Resolution for a Security-Critical
      Action'
    ref: https://cwe.mitre.org/data/definitions/350.html
  CWE-351:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly distinguish between different types
      of elements in a way that leads to insecure behavior.
    group: top10-software-data-integrity-failures
    name: CWE-351
    pretty_name: 'CWE-351: Insufficient Type Distinction'
    ref: https://cwe.mitre.org/data/definitions/351.html
  CWE-352:
    categories:
    - ALL
    - cwe-352
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The web application does not, or can not, sufficiently verify whether
      a well-formed, valid, consistent request was intentionally provided by the user
      who submitted the request.
    group: top10-broken-access-control
    name: CWE-352
    pretty_name: 'CWE-352: Cross-Site Request Forgery (CSRF)'
    ref: https://cwe.mitre.org/data/definitions/352.html
    recommended: true
  CWE-353:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a transmission protocol that does not include a
      mechanism for verifying the integrity of the data during transmission, such
      as a checksum.
    group: top10-software-data-integrity-failures
    name: CWE-353
    pretty_name: 'CWE-353: Missing Support for Integrity Check'
    ref: https://cwe.mitre.org/data/definitions/353.html
  CWE-354:
    categories:
    - ALL
    - boost-hardened
    description: The product does not validate or incorrectly validates the integrity
      check values or "checksums" of a message. This may prevent it from detecting
      if the data has been modified or corrupted in transmission.
    group: top10-software-data-integrity-failures
    name: CWE-354
    pretty_name: 'CWE-354: Improper Validation of Integrity Check Value'
    ref: https://cwe.mitre.org/data/definitions/354.html
  CWE-356:
    categories:
    - ALL
    - boost-hardened
    description: The product's user interface does not warn the user before undertaking
      an unsafe action on behalf of that user. This makes it easier for attackers
      to trick users into inflicting damage to their system.
    group: top10-insecure-design
    name: CWE-356
    pretty_name: 'CWE-356: Product UI does not Warn User of Unsafe Actions'
    ref: https://cwe.mitre.org/data/definitions/356.html
  CWE-357:
    categories:
    - ALL
    - boost-hardened
    description: The user interface provides a warning to a user regarding dangerous
      or sensitive operations, but the warning is not noticeable enough to warrant
      attention.
    group: top10-insecure-design
    name: CWE-357
    pretty_name: 'CWE-357: Insufficient UI Warning of Dangerous Operations'
    ref: https://cwe.mitre.org/data/definitions/357.html
  CWE-358:
    categories:
    - ALL
    - boost-hardened
    description: The product does not implement or incorrectly implements one or more
      security-relevant checks as specified by the design of a standardized algorithm,
      protocol, or technique.
    group: top10-insecure-design
    name: CWE-358
    pretty_name: 'CWE-358: Improperly Implemented Security Check for Standard'
    ref: https://cwe.mitre.org/data/definitions/358.html
  CWE-359:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly prevent a person's private, personal
      information from being accessed by actors who either (1) are not explicitly
      authorized to access the information or (2) do not have the implicit consent
      of the person about whom the information is collected.
    group: top10-broken-access-control
    name: CWE-359
    pretty_name: 'CWE-359: Exposure of Private Personal Information to an Unauthorized
      Actor'
    ref: https://cwe.mitre.org/data/definitions/359.html
  CWE-36:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to construct a pathname that should
      be within a restricted directory, but it does not properly neutralize absolute
      path sequences such as "/abs/path" that can resolve to a location that is outside
      of that directory.
    group: top10-broken-access-control
    name: CWE-36
    pretty_name: 'CWE-36: Absolute Path Traversal'
    ref: https://cwe.mitre.org/data/definitions/36.html
  CWE-360:
    categories:
    - ALL
    - boost-hardened
    description: Security based on event locations are insecure and can be spoofed.
    group: top10-software-data-integrity-failures
    name: CWE-360
    pretty_name: 'CWE-360: Trust of System Event Data'
    ref: https://cwe.mitre.org/data/definitions/360.html
  CWE-362:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a code sequence that can run concurrently with
      other code, and the code sequence requires temporary, exclusive access to a
      shared resource, but a timing window exists in which the shared resource can
      be modified by another code sequence that is operating concurrently.
    group: top10-insecure-design
    name: CWE-362
    pretty_name: 'CWE-362: Concurrent Execution using Shared Resource with Improper
      Synchronization (''Race Condition'')'
    ref: https://cwe.mitre.org/data/definitions/362.html
  CWE-363:
    categories:
    - ALL
    - boost-hardened
    description: The product checks the status of a file or directory before accessing
      it, which produces a race condition in which the file can be replaced with a
      link before the access is performed, causing the product to access the wrong
      file.
    group: top10-insecure-design
    name: CWE-363
    pretty_name: 'CWE-363: Race Condition Enabling Link Following'
    ref: https://cwe.mitre.org/data/definitions/363.html
  CWE-364:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a signal handler that introduces a race condition.
    group: top10-insecure-design
    name: CWE-364
    pretty_name: 'CWE-364: Signal Handler Race Condition'
    ref: https://cwe.mitre.org/data/definitions/364.html
  CWE-366:
    categories:
    - ALL
    - boost-hardened
    description: If two threads of execution use a resource simultaneously, there
      exists the possibility that resources may be used while invalid, in turn making
      the state of execution undefined.
    group: top10-insecure-design
    name: CWE-366
    pretty_name: 'CWE-366: Race Condition within a Thread'
    ref: https://cwe.mitre.org/data/definitions/366.html
  CWE-367:
    categories:
    - ALL
    - boost-hardened
    description: The product checks the state of a resource before using that resource,
      but the resource's state can change between the check and the use in a way that
      invalidates the results of the check. This can cause the product to perform
      invalid actions when the resource is in an unexpected state.
    group: top10-insecure-design
    name: CWE-367
    pretty_name: 'CWE-367: Time-of-check Time-of-use (TOCTOU) Race Condition'
    ref: https://cwe.mitre.org/data/definitions/367.html
  CWE-368:
    categories:
    - ALL
    - boost-hardened
    description: A product performs a series of non-atomic actions to switch between
      contexts that cross privilege or other security boundaries, but a race condition
      allows an attacker to modify or misrepresent the product's behavior during the
      switch.
    group: top10-insecure-design
    name: CWE-368
    pretty_name: 'CWE-368: Context Switching Race Condition'
    ref: https://cwe.mitre.org/data/definitions/368.html
  CWE-369:
    categories:
    - ALL
    - cwe-369
    - boost-hardened
    description: The product divides a value by zero.
    group: top10-insecure-design
    name: CWE-369
    pretty_name: 'CWE-369: Divide By Zero'
    ref: https://cwe.mitre.org/data/definitions/369.html
  CWE-37:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts input in the form of a slash absolute path ('/absolute/pathname/here')
      without appropriate validation, which can allow an attacker to traverse the
      file system to unintended locations or access arbitrary files.
    group: top10-broken-access-control
    name: CWE-37
    pretty_name: 'CWE-37: Path Traversal: ''/absolute/pathname/here'''
    ref: https://cwe.mitre.org/data/definitions/37.html
  CWE-370:
    categories:
    - ALL
    - boost-hardened
    description: The product does not check the revocation status of a certificate
      after its initial revocation check, which can cause the product to perform privileged
      actions even after the certificate is revoked at a later time.
    group: top10-id-authn-failures
    name: CWE-370
    pretty_name: 'CWE-370: Missing Check for Certificate Revocation after Initial
      Check'
    ref: https://cwe.mitre.org/data/definitions/370.html
  CWE-372:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly determine which state it is in, causing
      it to assume it is in state X when in fact it is in state Y, causing it to perform
      incorrect operations in a security-relevant manner.
    group: top10-insecure-design
    name: CWE-372
    pretty_name: 'CWE-372: Incomplete Internal State Distinction'
    ref: https://cwe.mitre.org/data/definitions/372.html
  CWE-374:
    categories:
    - ALL
    - boost-hardened
    description: The product sends non-cloned mutable data as an argument to a method
      or function.
    group: top10-broken-access-control
    name: CWE-374
    pretty_name: 'CWE-374: Passing Mutable Objects to an Untrusted Method'
    ref: https://cwe.mitre.org/data/definitions/374.html
  CWE-375:
    categories:
    - ALL
    - boost-hardened
    description: Sending non-cloned mutable data as a return value may result in that
      data being altered or deleted by the calling function.
    group: top10-broken-access-control
    name: CWE-375
    pretty_name: 'CWE-375: Returning a Mutable Object to an Untrusted Caller'
    ref: https://cwe.mitre.org/data/definitions/375.html
  CWE-377:
    categories:
    - ALL
    - boost-hardened
    description: Creating and using insecure temporary files can leave application
      and system data vulnerable to attack.
    group: top10-broken-access-control
    name: CWE-377
    pretty_name: 'CWE-377: Insecure Temporary File'
    ref: https://cwe.mitre.org/data/definitions/377.html
  CWE-378:
    categories:
    - ALL
    - boost-hardened
    description: Opening temporary files without appropriate measures or controls
      can leave the file, its contents and any function that it impacts vulnerable
      to attack.
    group: top10-broken-access-control
    name: CWE-378
    pretty_name: 'CWE-378: Creation of Temporary File With Insecure Permissions'
    ref: https://cwe.mitre.org/data/definitions/378.html
  CWE-379:
    categories:
    - ALL
    - boost-hardened
    description: The product creates a temporary file in a directory whose permissions
      allow unintended actors to determine the file's existence or otherwise access
      that file.
    group: top10-broken-access-control
    name: CWE-379
    pretty_name: 'CWE-379: Creation of Temporary File in Directory with Insecure Permissions'
    ref: https://cwe.mitre.org/data/definitions/379.html
  CWE-38:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts input in the form of a backslash absolute path
      ('\absolute\pathname\here') without appropriate validation, which can allow
      an attacker to traverse the file system to unintended locations or access arbitrary
      files.
    group: top10-broken-access-control
    name: CWE-38
    pretty_name: 'CWE-38: Path Traversal: ''\absolute\pathname\here'''
    ref: https://cwe.mitre.org/data/definitions/38.html
  CWE-382:
    categories:
    - ALL
    - boost-hardened
    description: A J2EE application uses System.exit(), which also shuts down its
      container.
    group: top10-insecure-design
    name: CWE-382
    pretty_name: 'CWE-382: J2EE Bad Practices: Use of System.exit()'
    ref: https://cwe.mitre.org/data/definitions/382.html
  CWE-383:
    categories:
    - ALL
    - boost-hardened
    description: Thread management in a Web application is forbidden in some circumstances
      and is always highly error prone.
    group: top10-insecure-design
    name: CWE-383
    pretty_name: 'CWE-383: J2EE Bad Practices: Direct Use of Threads'
    ref: https://cwe.mitre.org/data/definitions/383.html
  CWE-384:
    categories:
    - ALL
    - boost-hardened
    description: Authenticating a user, or otherwise establishing a new user session,
      without invalidating any existing session identifier gives an attacker the opportunity
      to steal authenticated sessions.
    group: top10-id-authn-failures
    name: CWE-384
    pretty_name: 'CWE-384: Session Fixation'
    ref: https://cwe.mitre.org/data/definitions/384.html
  CWE-385:
    categories:
    - ALL
    - boost-hardened
    description: Covert timing channels convey information by modulating some aspect
      of system behavior over time, so that the program receiving the information
      can observe system behavior and infer protected information.
    group: top10-insecure-design
    name: CWE-385
    pretty_name: 'CWE-385: Covert Timing Channel'
    ref: https://cwe.mitre.org/data/definitions/385.html
  CWE-386:
    categories:
    - ALL
    - boost-hardened
    description: A constant symbolic reference to an object is used, even though the
      reference can resolve to a different object over time.
    group: top10-broken-access-control
    name: CWE-386
    pretty_name: 'CWE-386: Symbolic Name not Mapping to Correct Object'
    ref: https://cwe.mitre.org/data/definitions/386.html
  CWE-39:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts input that contains a drive letter or Windows
      volume letter ('C:dirname') that potentially redirects access to an unintended
      location or arbitrary file.
    group: top10-broken-access-control
    name: CWE-39
    pretty_name: 'CWE-39: Path Traversal: ''C:dirname'''
    ref: https://cwe.mitre.org/data/definitions/39.html
  CWE-390:
    categories:
    - ALL
    - boost-hardened
    description: The product detects a specific error, but takes no actions to handle
      the error.
    group: top10-insecure-design
    name: CWE-390
    pretty_name: 'CWE-390: Detection of Error Condition Without Action'
    ref: https://cwe.mitre.org/data/definitions/390.html
  CWE-391:
    categories:
    - ALL
    - boost-hardened
    description: '[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252,
      CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow
      an attacker to induce unexpected behavior unnoticed.'
    group: top10-insecure-design
    name: CWE-391
    pretty_name: 'CWE-391: Unchecked Error Condition'
    ref: https://cwe.mitre.org/data/definitions/391.html
  CWE-392:
    categories:
    - ALL
    - boost-hardened
    description: The product encounters an error but does not provide a status code
      or return value to indicate that an error has occurred.
    group: top10-insecure-design
    name: CWE-392
    pretty_name: 'CWE-392: Missing Report of Error Condition'
    ref: https://cwe.mitre.org/data/definitions/392.html
  CWE-393:
    categories:
    - ALL
    - boost-hardened
    description: A function or operation returns an incorrect return value or status
      code that does not indicate an error, but causes the product to modify its behavior
      based on the incorrect result.
    group: top10-insecure-design
    name: CWE-393
    pretty_name: 'CWE-393: Return of Wrong Status Code'
    ref: https://cwe.mitre.org/data/definitions/393.html
  CWE-394:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly check when a function or operation
      returns a value that is legitimate for the function, but is not expected by
      the product.
    group: top10-insecure-design
    name: CWE-394
    pretty_name: 'CWE-394: Unexpected Status Code or Return Value'
    ref: https://cwe.mitre.org/data/definitions/394.html
  CWE-395:
    categories:
    - ALL
    - boost-hardened
    description: Catching NullPointerException should not be used as an alternative
      to programmatic checks to prevent dereferencing a null pointer.
    group: top10-insecure-design
    name: CWE-395
    pretty_name: 'CWE-395: Use of NullPointerException Catch to Detect NULL Pointer
      Dereference'
    ref: https://cwe.mitre.org/data/definitions/395.html
  CWE-396:
    categories:
    - ALL
    - boost-hardened
    description: Catching overly broad exceptions promotes complex error handling
      code that is more likely to contain security vulnerabilities.
    group: top10-insecure-design
    name: CWE-396
    pretty_name: 'CWE-396: Declaration of Catch for Generic Exception'
    ref: https://cwe.mitre.org/data/definitions/396.html
  CWE-397:
    categories:
    - ALL
    - boost-hardened
    description: Throwing overly broad exceptions promotes complex error handling
      code that is more likely to contain security vulnerabilities.
    group: top10-insecure-design
    name: CWE-397
    pretty_name: 'CWE-397: Declaration of Throws for Generic Exception'
    ref: https://cwe.mitre.org/data/definitions/397.html
  CWE-40:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts input that identifies a Windows UNC share ('\\UNC\share\name')
      that potentially redirects access to an unintended location or arbitrary file.
    group: top10-broken-access-control
    name: CWE-40
    pretty_name: 'CWE-40: Path Traversal: ''\\UNC\share\name\'' (Windows UNC Share)'
    ref: https://cwe.mitre.org/data/definitions/40.html
  CWE-400:
    categories:
    - ALL
    - cwe-400
    - cwe-top-25
    description: The product does not properly control the allocation and maintenance
      of a limited resource, thereby enabling an actor to influence the amount of
      resources consumed, eventually leading to the exhaustion of available resources.
    group: top10-insecure-design
    name: CWE-400
    pretty_name: 'CWE-400: Uncontrolled Resource Consumption'
    ref: https://cwe.mitre.org/data/definitions/400.html
  CWE-401:
    categories:
    - ALL
    - boost-hardened
    description: The product does not sufficiently track and release allocated memory
      after it has been used, which slowly consumes remaining memory.
    group: top10-insecure-design
    name: CWE-401
    pretty_name: 'CWE-401: Missing Release of Memory after Effective Lifetime'
    ref: https://cwe.mitre.org/data/definitions/401.html
  CWE-402:
    categories:
    - ALL
    - boost-hardened
    description: The product makes resources available to untrusted parties when those
      resources are only intended to be accessed by the product.
    group: top10-broken-access-control
    name: CWE-402
    pretty_name: 'CWE-402: Transmission of Private Resources into a New Sphere (''Resource
      Leak'')'
    ref: https://cwe.mitre.org/data/definitions/402.html
  CWE-403:
    categories:
    - ALL
    - boost-hardened
    description: A process does not close sensitive file descriptors before invoking
      a child process, which allows the child to perform unauthorized I/O operations
      using those descriptors.
    group: top10-broken-access-control
    name: CWE-403
    pretty_name: 'CWE-403: Exposure of File Descriptor to Unintended Control Sphere
      (''File Descriptor Leak'')'
    ref: https://cwe.mitre.org/data/definitions/403.html
  CWE-404:
    categories:
    - ALL
    - boost-hardened
    description: The product does not release or incorrectly releases a resource before
      it is made available for re-use.
    group: top10-insecure-design
    name: CWE-404
    pretty_name: 'CWE-404: Improper Resource Shutdown or Release'
    ref: https://cwe.mitre.org/data/definitions/404.html
  CWE-405:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly control situations in which an adversary
      can cause the product to consume or produce excessive resources without requiring
      the adversary to invest equivalent work or otherwise prove authorization, i.e.,
      the adversary's influence is "asymmetric."
    group: top10-insecure-design
    name: CWE-405
    pretty_name: 'CWE-405: Asymmetric Resource Consumption (Amplification)'
    ref: https://cwe.mitre.org/data/definitions/405.html
  CWE-406:
    categories:
    - ALL
    - boost-hardened
    description: The product does not sufficiently monitor or control transmitted
      network traffic volume, so that an actor can cause the product to transmit more
      traffic than should be allowed for that actor.
    group: top10-insecure-design
    name: CWE-406
    pretty_name: 'CWE-406: Insufficient Control of Network Message Volume (Network
      Amplification)'
    ref: https://cwe.mitre.org/data/definitions/406.html
  CWE-407:
    categories:
    - ALL
    - boost-hardened
    description: An algorithm in a product has an inefficient worst-case computational
      complexity that may be detrimental to system performance and can be triggered
      by an attacker, typically using crafted manipulations that ensure that the worst
      case is being reached.
    group: top10-insecure-design
    name: CWE-407
    pretty_name: 'CWE-407: Inefficient Algorithmic Complexity'
    ref: https://cwe.mitre.org/data/definitions/407.html
  CWE-408:
    categories:
    - ALL
    - boost-hardened
    description: The product allows an entity to perform a legitimate but expensive
      operation before authentication or authorization has taken place.
    group: top10-insecure-design
    name: CWE-408
    pretty_name: 'CWE-408: Incorrect Behavior Order: Early Amplification'
    ref: https://cwe.mitre.org/data/definitions/408.html
  CWE-409:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles a compressed input
      with a very high compression ratio that produces a large output.
    group: top10-insecure-design
    name: CWE-409
    pretty_name: 'CWE-409: Improper Handling of Highly Compressed Data (Data Amplification)'
    ref: https://cwe.mitre.org/data/definitions/409.html
  CWE-41:
    categories:
    - ALL
    - boost-hardened
    description: The product is vulnerable to file system contents disclosure through
      path equivalence. Path equivalence involves the use of special characters in
      file and directory names. The associated manipulations are intended to generate
      multiple names for the same object.
    group: top10-broken-access-control
    name: CWE-41
    pretty_name: 'CWE-41: Improper Resolution of Path Equivalence'
    ref: https://cwe.mitre.org/data/definitions/41.html
  CWE-410:
    categories:
    - ALL
    - boost-hardened
    description: The product's resource pool is not large enough to handle peak demand,
      which allows an attacker to prevent others from accessing the resource by using
      a (relatively) large number of requests for resources.
    group: top10-insecure-design
    name: CWE-410
    pretty_name: 'CWE-410: Insufficient Resource Pool'
    ref: https://cwe.mitre.org/data/definitions/410.html
  CWE-412:
    categories:
    - ALL
    - boost-hardened
    description: The product properly checks for the existence of a lock, but the
      lock can be externally controlled or influenced by an actor that is outside
      of the intended sphere of control.
    group: top10-insecure-design
    name: CWE-412
    pretty_name: 'CWE-412: Unrestricted Externally Accessible Lock'
    ref: https://cwe.mitre.org/data/definitions/412.html
  CWE-413:
    categories:
    - ALL
    - boost-hardened
    description: The product does not lock or does not correctly lock a resource when
      the product must have exclusive access to the resource.
    group: top10-insecure-design
    name: CWE-413
    pretty_name: 'CWE-413: Improper Resource Locking'
    ref: https://cwe.mitre.org/data/definitions/413.html
  CWE-414:
    categories:
    - ALL
    - boost-hardened
    description: A product does not check to see if a lock is present before performing
      sensitive operations on a resource.
    group: top10-insecure-design
    name: CWE-414
    pretty_name: 'CWE-414: Missing Lock Check'
    ref: https://cwe.mitre.org/data/definitions/414.html
  CWE-415:
    categories:
    - ALL
    - boost-hardened
    description: The product calls free() twice on the same memory address, potentially
      leading to modification of unexpected memory locations.
    group: top10-insecure-design
    name: CWE-415
    pretty_name: 'CWE-415: Double Free'
    ref: https://cwe.mitre.org/data/definitions/415.html
  CWE-416:
    categories:
    - ALL
    - boost-hardened
    description: Referencing memory after it has been freed can cause a program to
      crash, use unexpected values, or execute code.
    group: top10-insecure-design
    name: CWE-416
    pretty_name: 'CWE-416: Use After Free'
    ref: https://cwe.mitre.org/data/definitions/416.html
  CWE-419:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a primary channel for administration or restricted
      functionality, but it does not properly protect the channel.
    group: top10-insecure-design
    name: CWE-419
    pretty_name: 'CWE-419: Unprotected Primary Channel'
    ref: https://cwe.mitre.org/data/definitions/419.html
  CWE-42:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of trailing dot ('filedir.')
      without appropriate validation, which can lead to ambiguous path resolution
      and allow an attacker to traverse the file system to unintended locations or
      access arbitrary files.
    group: top10-broken-access-control
    name: CWE-42
    pretty_name: 'CWE-42: Path Equivalence: ''filename.'' (Trailing Dot)'
    ref: https://cwe.mitre.org/data/definitions/42.html
  CWE-420:
    categories:
    - ALL
    - boost-hardened
    description: The product protects a primary channel, but it does not use the same
      level of protection for an alternate channel.
    group: top10-broken-access-control
    name: CWE-420
    pretty_name: 'CWE-420: Unprotected Alternate Channel'
    ref: https://cwe.mitre.org/data/definitions/420.html
  CWE-421:
    categories:
    - ALL
    - boost-hardened
    description: The product opens an alternate channel to communicate with an authorized
      user, but the channel is accessible to other actors.
    group: top10-broken-access-control
    name: CWE-421
    pretty_name: 'CWE-421: Race Condition During Access to Alternate Channel'
    ref: https://cwe.mitre.org/data/definitions/421.html
  CWE-422:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly verify the source of a message in the
      Windows Messaging System while running at elevated privileges, creating an alternate
      channel through which an attacker can directly send a message to the product.
    group: top10-broken-access-control
    name: CWE-422
    pretty_name: 'CWE-422: Unprotected Windows Messaging Channel (''Shatter'')'
    ref: https://cwe.mitre.org/data/definitions/422.html
  CWE-424:
    categories:
    - ALL
    - boost-hardened
    description: The product does not sufficiently protect all possible paths that
      a user can take to access restricted functionality or resources.
    group: top10-insecure-design
    name: CWE-424
    pretty_name: 'CWE-424: Improper Protection of Alternate Path'
    ref: https://cwe.mitre.org/data/definitions/424.html
  CWE-425:
    categories:
    - ALL
    - boost-hardened
    description: The web application does not adequately enforce appropriate authorization
      on all restricted URLs, scripts, or files.
    group: top10-broken-access-control
    name: CWE-425
    pretty_name: 'CWE-425: Direct Request (''Forced Browsing'')'
    ref: https://cwe.mitre.org/data/definitions/425.html
  CWE-426:
    categories:
    - ALL
    - boost-hardened
    description: The product searches for critical resources using an externally-supplied
      search path that can point to resources that are not under the product's direct
      control.
    group: top10-software-data-integrity-failures
    name: CWE-426
    pretty_name: 'CWE-426: Untrusted Search Path'
    ref: https://cwe.mitre.org/data/definitions/426.html
  CWE-427:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a fixed or controlled search path to find resources,
      but one or more locations in that path can be under the control of unintended
      actors.
    group: top10-broken-access-control
    name: CWE-427
    pretty_name: 'CWE-427: Uncontrolled Search Path Element'
    ref: https://cwe.mitre.org/data/definitions/427.html
  CWE-428:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a search path that contains an unquoted element,
      in which the element contains whitespace or other separators. This can cause
      the product to access resources in a parent path.
    group: top10-broken-access-control
    name: CWE-428
    pretty_name: 'CWE-428: Unquoted Search Path or Element'
    ref: https://cwe.mitre.org/data/definitions/428.html
  CWE-43:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of multiple trailing dot
      ('filedir....') without appropriate validation, which can lead to ambiguous
      path resolution and allow an attacker to traverse the file system to unintended
      locations or access arbitrary files.
    group: top10-broken-access-control
    name: CWE-43
    pretty_name: 'CWE-43: Path Equivalence: ''filename....'' (Multiple Trailing Dot)'
    ref: https://cwe.mitre.org/data/definitions/43.html
  CWE-430:
    categories:
    - ALL
    - boost-hardened
    description: The wrong "handler" is assigned to process an object.
    group: top10-insecure-design
    name: CWE-430
    pretty_name: 'CWE-430: Deployment of Wrong Handler'
    ref: https://cwe.mitre.org/data/definitions/430.html
  CWE-431:
    categories:
    - ALL
    - boost-hardened
    description: A handler is not available or implemented.
    group: top10-insecure-design
    name: CWE-431
    pretty_name: 'CWE-431: Missing Handler'
    ref: https://cwe.mitre.org/data/definitions/431.html
  CWE-432:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a signal handler that shares state with other signal
      handlers, but it does not properly mask or prevent those signal handlers from
      being invoked while the original signal handler is still running.
    group: top10-insecure-design
    name: CWE-432
    pretty_name: 'CWE-432: Dangerous Signal Handler not Disabled During Sensitive
      Operations'
    ref: https://cwe.mitre.org/data/definitions/432.html
  CWE-433:
    categories:
    - ALL
    - boost-hardened
    description: The product stores raw content or supporting code under the web document
      root with an extension that is not specifically handled by the server.
    group: top10-broken-access-control
    name: CWE-433
    pretty_name: 'CWE-433: Unparsed Raw Web Content Delivery'
    ref: https://cwe.mitre.org/data/definitions/433.html
  CWE-434:
    categories:
    - ALL
    - cwe-434
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product allows the attacker to upload or transfer files of dangerous
      types that can be automatically processed within the product's environment.
    group: top10-insecure-design
    name: CWE-434
    pretty_name: 'CWE-434: Unrestricted Upload of File with Dangerous Type'
    ref: https://cwe.mitre.org/data/definitions/434.html
  CWE-435:
    categories:
    - ALL
    - boost-hardened
    description: An interaction error occurs when two entities have correct behavior
      when running independently of each other, but when they are integrated as components
      in a larger system or process, they introduce incorrect behaviors that may cause
      resultant weaknesses.
    group: top10-insecure-design
    name: CWE-435
    pretty_name: 'CWE-435: Improper Interaction Between Multiple Correctly-Behaving
      Entities'
    ref: https://cwe.mitre.org/data/definitions/435.html
  CWE-436:
    categories:
    - ALL
    - boost-hardened
    description: Product A handles inputs or steps differently than Product B, which
      causes A to perform incorrect actions based on its perception of B's state.
    group: top10-insecure-design
    name: CWE-436
    pretty_name: 'CWE-436: Interpretation Conflict'
    ref: https://cwe.mitre.org/data/definitions/436.html
  CWE-437:
    categories:
    - ALL
    - boost-hardened
    description: A product acts as an intermediary or monitor between two or more
      endpoints, but it does not have a complete model of an endpoint's features,
      behaviors, or state, potentially causing the product to perform incorrect actions
      based on this incomplete model.
    group: top10-insecure-design
    name: CWE-437
    pretty_name: 'CWE-437: Incomplete Model of Endpoint Features'
    ref: https://cwe.mitre.org/data/definitions/437.html
  CWE-439:
    categories:
    - ALL
    - boost-hardened
    description: A's behavior or functionality changes with a new version of A, or
      a new environment, which is not known (or manageable) by B.
    group: top10-insecure-design
    name: CWE-439
    pretty_name: 'CWE-439: Behavioral Change in New Version or Environment'
    ref: https://cwe.mitre.org/data/definitions/439.html
  CWE-44:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of internal dot ('file.ordir')
      without appropriate validation, which can lead to ambiguous path resolution
      and allow an attacker to traverse the file system to unintended locations or
      access arbitrary files.
    group: top10-broken-access-control
    name: CWE-44
    pretty_name: 'CWE-44: Path Equivalence: ''file.name'' (Internal Dot)'
    ref: https://cwe.mitre.org/data/definitions/44.html
  CWE-440:
    categories:
    - ALL
    - boost-hardened
    description: A feature, API, or function does not perform according to its specification.
    group: top10-insecure-design
    name: CWE-440
    pretty_name: 'CWE-440: Expected Behavior Violation'
    ref: https://cwe.mitre.org/data/definitions/440.html
  CWE-441:
    categories:
    - ALL
    - boost-hardened
    description: The product receives a request, message, or directive from an upstream
      component, but the product does not sufficiently preserve the original source
      of the request before forwarding the request to an external actor that is outside
      of the product's control sphere. This causes the product to appear to be the
      source of the request, leading it to act as a proxy or other intermediary between
      the upstream component and the external actor.
    group: top10-broken-access-control
    name: CWE-441
    pretty_name: 'CWE-441: Unintended Proxy or Intermediary (''Confused Deputy'')'
    ref: https://cwe.mitre.org/data/definitions/441.html
  CWE-444:
    categories:
    - ALL
    - boost-hardened
    description: The product acts as an intermediary HTTP agent (such as a proxy or
      firewall) in the data flow between two entities such as a client and server,
      but it does not interpret malformed HTTP requests or responses in ways that
      are consistent with how the messages will be processed by those entities that
      are at the ultimate destination.
    group: top10-insecure-design
    name: CWE-444
    pretty_name: 'CWE-444: Inconsistent Interpretation of HTTP Requests (''HTTP Request/Response
      Smuggling'')'
    ref: https://cwe.mitre.org/data/definitions/444.html
  CWE-446:
    categories:
    - ALL
    - boost-hardened
    description: The user interface does not correctly enable or configure a security
      feature, but the interface provides feedback that causes the user to believe
      that the feature is in a secure state.
    group: top10-insecure-design
    name: CWE-446
    pretty_name: 'CWE-446: UI Discrepancy for Security Feature'
    ref: https://cwe.mitre.org/data/definitions/446.html
  CWE-447:
    categories:
    - ALL
    - boost-hardened
    description: A UI function for a security feature appears to be supported and
      gives feedback to the user that suggests that it is supported, but the underlying
      functionality is not implemented.
    group: top10-insecure-design
    name: CWE-447
    pretty_name: 'CWE-447: Unimplemented or Unsupported Feature in UI'
    ref: https://cwe.mitre.org/data/definitions/447.html
  CWE-448:
    categories:
    - ALL
    - boost-hardened
    description: A UI function is obsolete and the product does not warn the user.
    group: top10-insecure-design
    name: CWE-448
    pretty_name: 'CWE-448: Obsolete Feature in UI'
    ref: https://cwe.mitre.org/data/definitions/448.html
  CWE-449:
    categories:
    - ALL
    - boost-hardened
    description: The UI performs the wrong action with respect to the user's request.
    group: top10-insecure-design
    name: CWE-449
    pretty_name: 'CWE-449: The UI Performs the Wrong Action'
    ref: https://cwe.mitre.org/data/definitions/449.html
  CWE-45:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of multiple internal dot
      ('file...dir') without appropriate validation, which can lead to ambiguous path
      resolution and allow an attacker to traverse the file system to unintended locations
      or access arbitrary files.
    group: top10-broken-access-control
    name: CWE-45
    pretty_name: 'CWE-45: Path Equivalence: ''file...name'' (Multiple Internal Dot)'
    ref: https://cwe.mitre.org/data/definitions/45.html
  CWE-450:
    categories:
    - ALL
    - boost-hardened
    description: The UI has multiple interpretations of user input but does not prompt
      the user when it selects the less secure interpretation.
    group: top10-insecure-design
    name: CWE-450
    pretty_name: 'CWE-450: Multiple Interpretations of UI Input'
    ref: https://cwe.mitre.org/data/definitions/450.html
  CWE-451:
    categories:
    - ALL
    - boost-hardened
    description: The user interface (UI) does not properly represent critical information
      to the user, allowing the information - or its source - to be obscured or spoofed.
      This is often a component in phishing attacks.
    group: top10-insecure-design
    name: CWE-451
    pretty_name: 'CWE-451: User Interface (UI) Misrepresentation of Critical Information'
    ref: https://cwe.mitre.org/data/definitions/451.html
  CWE-453:
    categories:
    - ALL
    - boost-hardened
    description: The product, by default, initializes an internal variable with an
      insecure or less secure value than is possible.
    group: top10-insecure-design
    name: CWE-453
    pretty_name: 'CWE-453: Insecure Default Variable Initialization'
    ref: https://cwe.mitre.org/data/definitions/453.html
  CWE-454:
    categories:
    - ALL
    - boost-hardened
    description: The product initializes critical internal variables or data stores
      using inputs that can be modified by untrusted actors.
    group: top10-insecure-design
    name: CWE-454
    pretty_name: 'CWE-454: External Initialization of Trusted Variables or Data Stores'
    ref: https://cwe.mitre.org/data/definitions/454.html
  CWE-455:
    categories:
    - ALL
    - boost-hardened
    description: The product does not exit or otherwise modify its operation when
      security-relevant errors occur during initialization, such as when a configuration
      file has a format error or a hardware security module (HSM) cannot be activated,
      which can cause the product to execute in a less secure fashion than intended
      by the administrator.
    group: top10-insecure-design
    name: CWE-455
    pretty_name: 'CWE-455: Non-exit on Failed Initialization'
    ref: https://cwe.mitre.org/data/definitions/455.html
  CWE-456:
    categories:
    - ALL
    - boost-hardened
    description: The product does not initialize critical variables, which causes
      the execution environment to use unexpected values.
    group: top10-insecure-design
    name: CWE-456
    pretty_name: 'CWE-456: Missing Initialization of a Variable'
    ref: https://cwe.mitre.org/data/definitions/456.html
  CWE-457:
    categories:
    - ALL
    - boost-hardened
    description: The code uses a variable that has not been initialized, leading to
      unpredictable or unintended results.
    group: top10-insecure-design
    name: CWE-457
    pretty_name: 'CWE-457: Use of Uninitialized Variable'
    ref: https://cwe.mitre.org/data/definitions/457.html
  CWE-459:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly "clean up" and remove temporary or
      supporting resources after they have been used.
    group: top10-insecure-design
    name: CWE-459
    pretty_name: 'CWE-459: Incomplete Cleanup'
    ref: https://cwe.mitre.org/data/definitions/459.html
  CWE-46:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of trailing space ('filedir
      ') without appropriate validation, which can lead to ambiguous path resolution
      and allow an attacker to traverse the file system to unintended locations or
      access arbitrary files.
    group: top10-broken-access-control
    name: CWE-46
    pretty_name: 'CWE-46: Path Equivalence: ''filename '' (Trailing Space)'
    ref: https://cwe.mitre.org/data/definitions/46.html
  CWE-460:
    categories:
    - ALL
    - boost-hardened
    description: The product does not clean up its state or incorrectly cleans up
      its state when an exception is thrown, leading to unexpected state or control
      flow.
    group: top10-insecure-design
    name: CWE-460
    pretty_name: 'CWE-460: Improper Cleanup on Thrown Exception'
    ref: https://cwe.mitre.org/data/definitions/460.html
  CWE-462:
    categories:
    - ALL
    - boost-hardened
    description: Duplicate keys in associative lists can lead to non-unique keys being
      mistaken for an error.
    group: top10-injection
    name: CWE-462
    pretty_name: 'CWE-462: Duplicate Key in Associative List (Alist)'
    ref: https://cwe.mitre.org/data/definitions/462.html
  CWE-463:
    categories:
    - ALL
    - boost-hardened
    description: The accidental deletion of a data-structure sentinel can cause serious
      programming logic problems.
    group: top10-injection
    name: CWE-463
    pretty_name: 'CWE-463: Deletion of Data Structure Sentinel'
    ref: https://cwe.mitre.org/data/definitions/463.html
  CWE-464:
    categories:
    - ALL
    - boost-hardened
    description: The accidental addition of a data-structure sentinel can cause serious
      programming logic problems.
    group: top10-injection
    name: CWE-464
    pretty_name: 'CWE-464: Addition of Data Structure Sentinel'
    ref: https://cwe.mitre.org/data/definitions/464.html
  CWE-466:
    categories:
    - ALL
    - boost-hardened
    description: A function can return a pointer to memory that is outside of the
      buffer that the pointer is expected to reference.
    group: top10-insecure-design
    name: CWE-466
    pretty_name: 'CWE-466: Return of Pointer Value Outside of Expected Range'
    ref: https://cwe.mitre.org/data/definitions/466.html
  CWE-467:
    categories:
    - ALL
    - boost-hardened
    description: The code calls sizeof() on a malloced pointer type, which always
      returns the wordsize/8. This can produce an unexpected result if the programmer
      intended to determine how much memory has been allocated.
    group: top10-insecure-design
    name: CWE-467
    pretty_name: 'CWE-467: Use of sizeof() on a Pointer Type'
    ref: https://cwe.mitre.org/data/definitions/467.html
  CWE-468:
    categories:
    - ALL
    - boost-hardened
    description: In C and C++, one may often accidentally refer to the wrong memory
      due to the semantics of when math operations are implicitly scaled.
    group: top10-insecure-design
    name: CWE-468
    pretty_name: 'CWE-468: Incorrect Pointer Scaling'
    ref: https://cwe.mitre.org/data/definitions/468.html
  CWE-469:
    categories:
    - ALL
    - boost-hardened
    description: The product subtracts one pointer from another in order to determine
      size, but this calculation can be incorrect if the pointers do not exist in
      the same memory chunk.
    group: top10-insecure-design
    name: CWE-469
    pretty_name: 'CWE-469: Use of Pointer Subtraction to Determine Size'
    ref: https://cwe.mitre.org/data/definitions/469.html
  CWE-47:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of leading space (' filedir')
      without appropriate validation, which can lead to ambiguous path resolution
      and allow an attacker to traverse the file system to unintended locations or
      access arbitrary files.
    group: top10-broken-access-control
    name: CWE-47
    pretty_name: 'CWE-47: Path Equivalence: '' filename'' (Leading Space)'
    ref: https://cwe.mitre.org/data/definitions/47.html
  CWE-470:
    categories:
    - ALL
    - cwe-470
    - boost-hardened
    - owasp-top-10
    description: The product uses external input with reflection to select which classes
      or code to use, but it does not sufficiently prevent the input from selecting
      improper classes or code.
    group: top10-injection
    name: CWE-470
    pretty_name: 'CWE-470: Use of Externally-Controlled Input to Select Classes or
      Code (''Unsafe Reflection'')'
    ref: https://cwe.mitre.org/data/definitions/470.html
  CWE-471:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly protect an assumed-immutable element
      from being modified by an attacker.
    group: top10-injection
    name: CWE-471
    pretty_name: 'CWE-471: Modification of Assumed-Immutable Data (MAID)'
    ref: https://cwe.mitre.org/data/definitions/471.html
  CWE-472:
    categories:
    - ALL
    - boost-hardened
    description: The web application does not sufficiently verify inputs that are
      assumed to be immutable but are actually externally controllable, such as hidden
      form fields.
    group: top10-insecure-design
    name: CWE-472
    pretty_name: 'CWE-472: External Control of Assumed-Immutable Web Parameter'
    ref: https://cwe.mitre.org/data/definitions/472.html
  CWE-473:
    categories:
    - ALL
    - boost-hardened
    description: A PHP application does not properly protect against the modification
      of variables from external sources, such as query parameters or cookies. This
      can expose the application to numerous weaknesses that would not exist otherwise.
    group: top10-injection
    name: CWE-473
    pretty_name: 'CWE-473: PHP External Variable Modification'
    ref: https://cwe.mitre.org/data/definitions/473.html
  CWE-474:
    categories:
    - ALL
    - boost-hardened
    description: The code uses a function that has inconsistent implementations across
      operating systems and versions.
    group: top10-insecure-design
    name: CWE-474
    pretty_name: 'CWE-474: Use of Function with Inconsistent Implementations'
    ref: https://cwe.mitre.org/data/definitions/474.html
  CWE-475:
    categories:
    - ALL
    - boost-hardened
    description: The behavior of this function is undefined unless its control parameter
      is set to a specific value.
    group: top10-insecure-design
    name: CWE-475
    pretty_name: 'CWE-475: Undefined Behavior for Input to API'
    ref: https://cwe.mitre.org/data/definitions/475.html
  CWE-476:
    categories:
    - ALL
    - boost-hardened
    description: A NULL pointer dereference occurs when the application dereferences
      a pointer that it expects to be valid, but is NULL, typically causing a crash
      or exit.
    group: top10-insecure-design
    name: CWE-476
    pretty_name: 'CWE-476: NULL Pointer Dereference'
    ref: https://cwe.mitre.org/data/definitions/476.html
  CWE-477:
    categories:
    - ALL
    - boost-hardened
    description: The code uses deprecated or obsolete functions, which suggests that
      the code has not been actively reviewed or maintained.
    group: top10-insecure-design
    name: CWE-477
    pretty_name: 'CWE-477: Use of Obsolete Function'
    ref: https://cwe.mitre.org/data/definitions/477.html
  CWE-478:
    categories:
    - ALL
    - boost-hardened
    description: The code does not have a default case in an expression with multiple
      conditions, such as a switch statement.
    group: top10-insecure-design
    name: CWE-478
    pretty_name: 'CWE-478: Missing Default Case in Multiple Condition Expression'
    ref: https://cwe.mitre.org/data/definitions/478.html
  CWE-479:
    categories:
    - ALL
    - boost-hardened
    description: The product defines a signal handler that calls a non-reentrant function.
    group: top10-insecure-design
    name: CWE-479
    pretty_name: 'CWE-479: Signal Handler Use of a Non-reentrant Function'
    ref: https://cwe.mitre.org/data/definitions/479.html
  CWE-48:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of internal space ('file(SPACE)name')
      without appropriate validation, which can lead to ambiguous path resolution
      and allow an attacker to traverse the file system to unintended locations or
      access arbitrary files.
    group: top10-broken-access-control
    name: CWE-48
    pretty_name: 'CWE-48: Path Equivalence: ''file name'' (Internal Whitespace)'
    ref: https://cwe.mitre.org/data/definitions/48.html
  CWE-480:
    categories:
    - ALL
    - boost-hardened
    description: The product accidentally uses the wrong operator, which changes the
      logic in security-relevant ways.
    group: top10-insecure-design
    name: CWE-480
    pretty_name: 'CWE-480: Use of Incorrect Operator'
    ref: https://cwe.mitre.org/data/definitions/480.html
  CWE-481:
    categories:
    - ALL
    - boost-hardened
    description: The code uses an operator for assignment when the intention was to
      perform a comparison.
    group: top10-insecure-design
    name: CWE-481
    pretty_name: 'CWE-481: Assigning instead of Comparing'
    ref: https://cwe.mitre.org/data/definitions/481.html
  CWE-482:
    categories:
    - ALL
    - boost-hardened
    description: The code uses an operator for comparison when the intention was to
      perform an assignment.
    group: top10-insecure-design
    name: CWE-482
    pretty_name: 'CWE-482: Comparing instead of Assigning'
    ref: https://cwe.mitre.org/data/definitions/482.html
  CWE-483:
    categories:
    - ALL
    - boost-hardened
    description: The code does not explicitly delimit a block that is intended to
      contain 2 or more statements, creating a logic error.
    group: top10-insecure-design
    name: CWE-483
    pretty_name: 'CWE-483: Incorrect Block Delimitation'
    ref: https://cwe.mitre.org/data/definitions/483.html
  CWE-484:
    categories:
    - ALL
    - boost-hardened
    description: The product omits a break statement within a switch or similar construct,
      causing code associated with multiple conditions to execute. This can cause
      problems when the programmer only intended to execute code associated with one
      condition.
    group: top10-insecure-design
    name: CWE-484
    pretty_name: 'CWE-484: Omitted Break Statement in Switch'
    ref: https://cwe.mitre.org/data/definitions/484.html
  CWE-486:
    categories:
    - ALL
    - boost-hardened
    description: The product compares classes by name, which can cause it to use the
      wrong class when multiple classes can have the same name.
    group: top10-insecure-design
    name: CWE-486
    pretty_name: 'CWE-486: Comparison of Classes by Name'
    ref: https://cwe.mitre.org/data/definitions/486.html
  CWE-487:
    categories:
    - ALL
    - boost-hardened
    description: Java packages are not inherently closed; therefore, relying on them
      for code security is not a good practice.
    group: top10-insecure-design
    name: CWE-487
    pretty_name: 'CWE-487: Reliance on Package-level Scope'
    ref: https://cwe.mitre.org/data/definitions/487.html
  CWE-488:
    categories:
    - ALL
    - boost-hardened
    description: The product does not sufficiently enforce boundaries between the
      states of different sessions, causing data to be provided to, or used by, the
      wrong session.
    group: top10-broken-access-control
    name: CWE-488
    pretty_name: 'CWE-488: Exposure of Data Element to Wrong Session'
    ref: https://cwe.mitre.org/data/definitions/488.html
  CWE-489:
    categories:
    - ALL
    - cwe-489
    - boost-baseline
    - boost-hardened
    description: The product is deployed to unauthorized actors with debugging code
      still enabled or active, which can create unintended entry points or expose
      sensitive information.
    group: top10-security-misconfiguration
    name: CWE-489
    pretty_name: 'CWE-489: Active Debug Code'
    ref: https://cwe.mitre.org/data/definitions/489.html
    recommended: true
  CWE-49:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of trailing slash ('filedir/')
      without appropriate validation, which can lead to ambiguous path resolution
      and allow an attacker to traverse the file system to unintended locations or
      access arbitrary files.
    group: top10-broken-access-control
    name: CWE-49
    pretty_name: 'CWE-49: Path Equivalence: ''filename/'' (Trailing Slash)'
    ref: https://cwe.mitre.org/data/definitions/49.html
  CWE-491:
    categories:
    - ALL
    - boost-hardened
    description: A class has a cloneable() method that is not declared final, which
      allows an object to be created without calling the constructor. This can cause
      the object to be in an unexpected state.
    group: top10-broken-access-control
    name: CWE-491
    pretty_name: 'CWE-491: Public cloneable() Method Without Final (''Object Hijack'')'
    ref: https://cwe.mitre.org/data/definitions/491.html
  CWE-492:
    categories:
    - ALL
    - boost-hardened
    description: Inner classes are translated into classes that are accessible at
      package scope and may expose code that the programmer intended to keep private
      to attackers.
    group: top10-broken-access-control
    name: CWE-492
    pretty_name: 'CWE-492: Use of Inner Class Containing Sensitive Data'
    ref: https://cwe.mitre.org/data/definitions/492.html
  CWE-493:
    categories:
    - ALL
    - boost-hardened
    description: The product has a critical public variable that is not final, which
      allows the variable to be modified to contain unexpected values.
    group: top10-broken-access-control
    name: CWE-493
    pretty_name: 'CWE-493: Critical Public Variable Without Final Modifier'
    ref: https://cwe.mitre.org/data/definitions/493.html
  CWE-494:
    categories:
    - ALL
    - cwe-494
    - boost-hardened
    - owasp-top-10
    description: The product downloads source code or an executable from a remote
      location and executes the code without sufficiently verifying the origin and
      integrity of the code.
    group: top10-software-data-integrity-failures
    name: CWE-494
    pretty_name: 'CWE-494: Download of Code Without Integrity Check'
    ref: https://cwe.mitre.org/data/definitions/494.html
  CWE-495:
    categories:
    - ALL
    - boost-hardened
    description: The product has a method that is declared public, but returns a reference
      to a private data structure, which could then be modified in unexpected ways.
    group: top10-insecure-design
    name: CWE-495
    pretty_name: 'CWE-495: Private Data Structure Returned From A Public Method'
    ref: https://cwe.mitre.org/data/definitions/495.html
  CWE-496:
    categories:
    - ALL
    - boost-hardened
    description: Assigning public data to a private array is equivalent to giving
      public access to the array.
    group: top10-insecure-design
    name: CWE-496
    pretty_name: 'CWE-496: Public Data Assigned to Private Array-Typed Field'
    ref: https://cwe.mitre.org/data/definitions/496.html
  CWE-497:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly prevent sensitive system-level information
      from being accessed by unauthorized actors who do not have the same level of
      access to the underlying system as the product does.
    group: top10-broken-access-control
    name: CWE-497
    pretty_name: 'CWE-497: Exposure of Sensitive System Information to an Unauthorized
      Control Sphere'
    ref: https://cwe.mitre.org/data/definitions/497.html
  CWE-498:
    categories:
    - ALL
    - boost-hardened
    description: The code contains a class with sensitive data, but the class is cloneable.
      The data can then be accessed by cloning the class.
    group: top10-broken-access-control
    name: CWE-498
    pretty_name: 'CWE-498: Cloneable Class Containing Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/498.html
  CWE-499:
    categories:
    - ALL
    - boost-hardened
    description: The code contains a class with sensitive data, but the class does
      not explicitly deny serialization. The data can be accessed by serializing the
      class through another class.
    group: top10-broken-access-control
    name: CWE-499
    pretty_name: 'CWE-499: Serializable Class Containing Sensitive Data'
    ref: https://cwe.mitre.org/data/definitions/499.html
  CWE-5:
    categories:
    - ALL
    - boost-hardened
    description: Information sent over a network can be compromised while in transit.
      An attacker may be able to read or modify the contents if the data are sent
      in plaintext or are weakly encrypted.
    group: top10-crypto-failures
    name: CWE-5
    pretty_name: 'CWE-5: J2EE Misconfiguration: Data Transmission Without Encryption'
    ref: https://cwe.mitre.org/data/definitions/5.html
  CWE-50:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of multiple leading slash
      ('//multiple/leading/slash') without appropriate validation, which can lead
      to ambiguous path resolution and allow an attacker to traverse the file system
      to unintended locations or access arbitrary files.
    group: top10-broken-access-control
    name: CWE-50
    pretty_name: 'CWE-50: Path Equivalence: ''//multiple/leading/slash'''
    ref: https://cwe.mitre.org/data/definitions/50.html
  CWE-500:
    categories:
    - ALL
    - boost-hardened
    description: An object contains a public static field that is not marked final,
      which might allow it to be modified in unexpected ways.
    group: top10-broken-access-control
    name: CWE-500
    pretty_name: 'CWE-500: Public Static Field Not Marked Final'
    ref: https://cwe.mitre.org/data/definitions/500.html
  CWE-501:
    categories:
    - ALL
    - boost-hardened
    description: The product mixes trusted and untrusted data in the same data structure
      or structured message.
    group: top10-insecure-design
    name: CWE-501
    pretty_name: 'CWE-501: Trust Boundary Violation'
    ref: https://cwe.mitre.org/data/definitions/501.html
  CWE-502:
    categories:
    - ALL
    - cwe-502
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product deserializes untrusted data without sufficiently verifying
      that the resulting data will be valid.
    group: top10-software-data-integrity-failures
    name: CWE-502
    pretty_name: 'CWE-502: Deserialization of Untrusted Data'
    ref: https://cwe.mitre.org/data/definitions/502.html
    recommended: true
  CWE-506:
    categories:
    - ALL
    - boost-hardened
    description: The product contains code that appears to be malicious in nature.
    group: top10-insecure-design
    name: CWE-506
    pretty_name: 'CWE-506: Embedded Malicious Code'
    ref: https://cwe.mitre.org/data/definitions/506.html
  CWE-507:
    categories:
    - ALL
    - boost-hardened
    description: The product appears to contain benign or useful functionality, but
      it also contains code that is hidden from normal operation that violates the
      intended security policy of the user or the system administrator.
    group: top10-insecure-design
    name: CWE-507
    pretty_name: 'CWE-507: Trojan Horse'
    ref: https://cwe.mitre.org/data/definitions/507.html
  CWE-508:
    categories:
    - ALL
    - boost-hardened
    description: Non-replicating malicious code only resides on the target system
      or product that is attacked; it does not attempt to spread to other systems.
    group: top10-insecure-design
    name: CWE-508
    pretty_name: 'CWE-508: Non-Replicating Malicious Code'
    ref: https://cwe.mitre.org/data/definitions/508.html
  CWE-509:
    categories:
    - ALL
    - boost-hardened
    description: Replicating malicious code, including viruses and worms, will attempt
      to attack other systems once it has successfully compromised the target system
      or the product.
    group: top10-insecure-design
    name: CWE-509
    pretty_name: 'CWE-509: Replicating Malicious Code (Virus or Worm)'
    ref: https://cwe.mitre.org/data/definitions/509.html
  CWE-51:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of multiple internal slash
      ('/multiple//internal/slash/') without appropriate validation, which can lead
      to ambiguous path resolution and allow an attacker to traverse the file system
      to unintended locations or access arbitrary files.
    group: top10-broken-access-control
    name: CWE-51
    pretty_name: 'CWE-51: Path Equivalence: ''/multiple//internal/slash'''
    ref: https://cwe.mitre.org/data/definitions/51.html
  CWE-510:
    categories:
    - ALL
    - boost-hardened
    description: A trapdoor is a hidden piece of code that responds to a special input,
      allowing its user access to resources without passing through the normal security
      enforcement mechanism.
    group: top10-insecure-design
    name: CWE-510
    pretty_name: 'CWE-510: Trapdoor'
    ref: https://cwe.mitre.org/data/definitions/510.html
  CWE-511:
    categories:
    - ALL
    - boost-hardened
    description: The product contains code that is designed to disrupt the legitimate
      operation of the product (or its environment) when a certain time passes, or
      when a certain logical condition is met.
    group: top10-insecure-design
    name: CWE-511
    pretty_name: 'CWE-511: Logic/Time Bomb'
    ref: https://cwe.mitre.org/data/definitions/511.html
  CWE-512:
    categories:
    - ALL
    - boost-hardened
    description: The product collects personally identifiable information about a
      human user or the user's activities, but the product accesses this information
      using other resources besides itself, and it does not require that user's explicit
      approval or direct input into the product.
    group: top10-insecure-design
    name: CWE-512
    pretty_name: 'CWE-512: Spyware'
    ref: https://cwe.mitre.org/data/definitions/512.html
  CWE-514:
    categories:
    - ALL
    - boost-hardened
    description: A covert channel is a path that can be used to transfer information
      in a way not intended by the system's designers.
    group: top10-insecure-design
    name: CWE-514
    pretty_name: 'CWE-514: Covert Channel'
    ref: https://cwe.mitre.org/data/definitions/514.html
  CWE-515:
    categories:
    - ALL
    - boost-hardened
    description: A covert storage channel transfers information through the setting
      of bits by one program and the reading of those bits by another. What distinguishes
      this case from that of ordinary operation is that the bits are used to convey
      encoded information.
    group: top10-insecure-design
    name: CWE-515
    pretty_name: 'CWE-515: Covert Storage Channel'
    ref: https://cwe.mitre.org/data/definitions/515.html
  CWE-52:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of multiple trailing slash
      ('/multiple/trailing/slash//') without appropriate validation, which can lead
      to ambiguous path resolution and allow an attacker to traverse the file system
      to unintended locations or access arbitrary files.
    group: top10-broken-access-control
    name: CWE-52
    pretty_name: 'CWE-52: Path Equivalence: ''/multiple/trailing/slash//'''
    ref: https://cwe.mitre.org/data/definitions/52.html
  CWE-520:
    categories:
    - ALL
    - boost-hardened
    description: Allowing a .NET application to run at potentially escalated levels
      of access to the underlying operating and file systems can be dangerous and
      result in various forms of attacks.
    group: top10-security-misconfiguration
    name: CWE-520
    pretty_name: 'CWE-520: .NET Misconfiguration: Use of Impersonation'
    ref: https://cwe.mitre.org/data/definitions/520.html
  CWE-521:
    categories:
    - ALL
    - boost-hardened
    description: The product does not require that users should have strong passwords,
      which makes it easier for attackers to compromise user accounts.
    group: top10-id-authn-failures
    name: CWE-521
    pretty_name: 'CWE-521: Weak Password Requirements'
    ref: https://cwe.mitre.org/data/definitions/521.html
  CWE-522:
    categories:
    - ALL
    - cwe-522
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product transmits or stores authentication credentials, but it
      uses an insecure method that is susceptible to unauthorized interception and/or
      retrieval.
    group: top10-insecure-design
    name: CWE-522
    pretty_name: 'CWE-522: Insufficiently Protected Credentials'
    ref: https://cwe.mitre.org/data/definitions/522.html
    recommended: true
  CWE-523:
    categories:
    - ALL
    - boost-hardened
    description: Login pages do not use adequate measures to protect the user name
      and password while they are in transit from the client to the server.
    group: top10-crypto-failures
    name: CWE-523
    pretty_name: 'CWE-523: Unprotected Transport of Credentials'
    ref: https://cwe.mitre.org/data/definitions/523.html
  CWE-524:
    categories:
    - ALL
    - boost-hardened
    description: The code uses a cache that contains sensitive information, but the
      cache can be read by an actor outside of the intended control sphere.
    group: top10-broken-access-control
    name: CWE-524
    pretty_name: 'CWE-524: Use of Cache Containing Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/524.html
  CWE-525:
    categories:
    - ALL
    - boost-hardened
    description: The web application does not use an appropriate caching policy that
      specifies the extent to which each web page and associated form fields should
      be cached.
    group: top10-insecure-design
    name: CWE-525
    pretty_name: 'CWE-525: Use of Web Browser Cache Containing Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/525.html
  CWE-526:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an environment variable to store unencrypted sensitive
      information.
    group: top10-security-misconfiguration
    name: CWE-526
    pretty_name: 'CWE-526: Cleartext Storage of Sensitive Information in an Environment
      Variable'
    ref: https://cwe.mitre.org/data/definitions/526.html
  CWE-527:
    categories:
    - ALL
    - boost-hardened
    description: The product stores a CVS, git, or other repository in a directory,
      archive, or other resource that is stored, transferred, or otherwise made accessible
      to unauthorized actors.
    group: top10-broken-access-control
    name: CWE-527
    pretty_name: 'CWE-527: Exposure of Version-Control Repository to an Unauthorized
      Control Sphere'
    ref: https://cwe.mitre.org/data/definitions/527.html
  CWE-528:
    categories:
    - ALL
    - boost-hardened
    description: The product generates a core dump file in a directory, archive, or
      other resource that is stored, transferred, or otherwise made accessible to
      unauthorized actors.
    group: top10-broken-access-control
    name: CWE-528
    pretty_name: 'CWE-528: Exposure of Core Dump File to an Unauthorized Control Sphere'
    ref: https://cwe.mitre.org/data/definitions/528.html
  CWE-529:
    categories:
    - ALL
    - boost-hardened
    description: The product stores access control list files in a directory or other
      container that is accessible to actors outside of the intended control sphere.
    group: top10-broken-access-control
    name: CWE-529
    pretty_name: 'CWE-529: Exposure of Access Control List Files to an Unauthorized
      Control Sphere'
    ref: https://cwe.mitre.org/data/definitions/529.html
  CWE-53:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of multiple internal backslash
      ('\multiple\trailing\\slash') without appropriate validation, which can lead
      to ambiguous path resolution and allow an attacker to traverse the file system
      to unintended locations or access arbitrary files.
    group: top10-broken-access-control
    name: CWE-53
    pretty_name: 'CWE-53: Path Equivalence: ''\multiple\\internal\backslash'''
    ref: https://cwe.mitre.org/data/definitions/53.html
  CWE-530:
    categories:
    - ALL
    - boost-hardened
    description: A backup file is stored in a directory or archive that is made accessible
      to unauthorized actors.
    group: top10-broken-access-control
    name: CWE-530
    pretty_name: 'CWE-530: Exposure of Backup File to an Unauthorized Control Sphere'
    ref: https://cwe.mitre.org/data/definitions/530.html
  CWE-531:
    categories:
    - ALL
    - boost-hardened
    description: Accessible test applications can pose a variety of security risks.
      Since developers or administrators rarely consider that someone besides themselves
      would even know about the existence of these applications, it is common for
      them to contain sensitive information or functions.
    group: top10-broken-access-control
    name: CWE-531
    pretty_name: 'CWE-531: Inclusion of Sensitive Information in Test Code'
    ref: https://cwe.mitre.org/data/definitions/531.html
  CWE-532:
    categories:
    - ALL
    - boost-hardened
    description: Information written to log files can be of a sensitive nature and
      give valuable guidance to an attacker or expose sensitive user information.
    group: top10-security-logging-monitoring-failures
    name: CWE-532
    pretty_name: 'CWE-532: Insertion of Sensitive Information into Log File'
    ref: https://cwe.mitre.org/data/definitions/532.html
  CWE-535:
    categories:
    - ALL
    - boost-hardened
    description: A command shell error message indicates that there exists an unhandled
      exception in the web application code. In many cases, an attacker can leverage
      the conditions that cause these errors in order to gain unauthorized access
      to the system.
    group: top10-insecure-design
    name: CWE-535
    pretty_name: 'CWE-535: Exposure of Information Through Shell Error Message'
    ref: https://cwe.mitre.org/data/definitions/535.html
  CWE-536:
    categories:
    - ALL
    - boost-hardened
    description: A servlet error message indicates that there exists an unhandled
      exception in your web application code and may provide useful information to
      an attacker.
    group: top10-insecure-design
    name: CWE-536
    pretty_name: 'CWE-536: Servlet Runtime Error Message Containing Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/536.html
  CWE-537:
    categories:
    - ALL
    - boost-hardened
    description: In many cases, an attacker can leverage the conditions that cause
      unhandled exception errors in order to gain unauthorized access to the system.
    group: top10-security-misconfiguration
    name: CWE-537
    pretty_name: 'CWE-537: Java Runtime Error Message Containing Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/537.html
  CWE-538:
    categories:
    - ALL
    - boost-hardened
    description: The product places sensitive information into files or directories
      that are accessible to actors who are allowed to have access to the files, but
      not to the sensitive information.
    group: top10-broken-access-control
    name: CWE-538
    pretty_name: 'CWE-538: Insertion of Sensitive Information into Externally-Accessible
      File or Directory'
    ref: https://cwe.mitre.org/data/definitions/538.html
  CWE-539:
    categories:
    - ALL
    - boost-hardened
    description: The web application uses persistent cookies, but the cookies contain
      sensitive information.
    group: top10-insecure-design
    name: CWE-539
    pretty_name: 'CWE-539: Use of Persistent Cookies Containing Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/539.html
  CWE-54:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of trailing backslash
      ('filedir\') without appropriate validation, which can lead to ambiguous path
      resolution and allow an attacker to traverse the file system to unintended locations
      or access arbitrary files.
    group: top10-broken-access-control
    name: CWE-54
    pretty_name: 'CWE-54: Path Equivalence: ''filedir\'' (Trailing Backslash)'
    ref: https://cwe.mitre.org/data/definitions/54.html
  CWE-540:
    categories:
    - ALL
    - boost-hardened
    description: Source code on a web server or repository often contains sensitive
      information and should generally not be accessible to users.
    group: top10-broken-access-control
    name: CWE-540
    pretty_name: 'CWE-540: Inclusion of Sensitive Information in Source Code'
    ref: https://cwe.mitre.org/data/definitions/540.html
  CWE-541:
    categories:
    - ALL
    - boost-hardened
    description: If an include file source is accessible, the file can contain usernames
      and passwords, as well as sensitive information pertaining to the application
      and system.
    group: top10-security-misconfiguration
    name: CWE-541
    pretty_name: 'CWE-541: Inclusion of Sensitive Information in an Include File'
    ref: https://cwe.mitre.org/data/definitions/541.html
  CWE-543:
    categories:
    - ALL
    - boost-hardened
    description: The product uses the singleton pattern when creating a resource within
      a multithreaded environment.
    group: top10-insecure-design
    name: CWE-543
    pretty_name: 'CWE-543: Use of Singleton Pattern Without Synchronization in a Multithreaded
      Context'
    ref: https://cwe.mitre.org/data/definitions/543.html
  CWE-544:
    categories:
    - ALL
    - boost-hardened
    description: The product does not use a standardized method for handling errors
      throughout the code, which might introduce inconsistent error handling and resultant
      weaknesses.
    group: top10-insecure-design
    name: CWE-544
    pretty_name: 'CWE-544: Missing Standardized Error Handling Mechanism'
    ref: https://cwe.mitre.org/data/definitions/544.html
  CWE-546:
    categories:
    - ALL
    - boost-hardened
    description: The code contains comments that suggest the presence of bugs, incomplete
      functionality, or weaknesses.
    group: top10-insecure-design
    name: CWE-546
    pretty_name: 'CWE-546: Suspicious Comment'
    ref: https://cwe.mitre.org/data/definitions/546.html
  CWE-547:
    categories:
    - ALL
    - boost-hardened
    description: The product uses hard-coded constants instead of symbolic names for
      security-critical values, which increases the likelihood of mistakes during
      code maintenance or security policy change.
    group: top10-security-misconfiguration
    name: CWE-547
    pretty_name: 'CWE-547: Use of Hard-coded, Security-relevant Constants'
    ref: https://cwe.mitre.org/data/definitions/547.html
  CWE-548:
    categories:
    - ALL
    - boost-hardened
    description: A directory listing is inappropriately exposed, yielding potentially
      sensitive information to attackers.
    group: top10-broken-access-control
    name: CWE-548
    pretty_name: 'CWE-548: Exposure of Information Through Directory Listing'
    ref: https://cwe.mitre.org/data/definitions/548.html
  CWE-549:
    categories:
    - ALL
    - boost-hardened
    description: The product does not mask passwords during entry, increasing the
      potential for attackers to observe and capture passwords.
    group: top10-insecure-design
    name: CWE-549
    pretty_name: 'CWE-549: Missing Password Field Masking'
    ref: https://cwe.mitre.org/data/definitions/549.html
  CWE-55:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of single dot directory
      exploit ('/./') without appropriate validation, which can lead to ambiguous
      path resolution and allow an attacker to traverse the file system to unintended
      locations or access arbitrary files.
    group: top10-broken-access-control
    name: CWE-55
    pretty_name: 'CWE-55: Path Equivalence: ''/./'' (Single Dot Directory)'
    ref: https://cwe.mitre.org/data/definitions/55.html
  CWE-550:
    categories:
    - ALL
    - boost-hardened
    description: Certain conditions, such as network failure, will cause a server
      error message to be displayed.
    group: top10-insecure-design
    name: CWE-550
    pretty_name: 'CWE-550: Server-generated Error Message Containing Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/550.html
  CWE-551:
    categories:
    - ALL
    - boost-hardened
    description: If a web server does not fully parse requested URLs before it examines
      them for authorization, it may be possible for an attacker to bypass authorization
      protection.
    group: top10-broken-access-control
    name: CWE-551
    pretty_name: 'CWE-551: Incorrect Behavior Order: Authorization Before Parsing
      and Canonicalization'
    ref: https://cwe.mitre.org/data/definitions/551.html
  CWE-552:
    categories:
    - ALL
    - boost-hardened
    description: The product makes files or directories accessible to unauthorized
      actors, even though they should not be.
    group: top10-broken-access-control
    name: CWE-552
    pretty_name: 'CWE-552: Files or Directories Accessible to External Parties'
    ref: https://cwe.mitre.org/data/definitions/552.html
  CWE-553:
    categories:
    - ALL
    - boost-hardened
    description: A possible shell file exists in /cgi-bin/ or other accessible directories.
      This is extremely dangerous and can be used by an attacker to execute commands
      on the web server.
    group: top10-broken-access-control
    name: CWE-553
    pretty_name: 'CWE-553: Command Shell in Externally Accessible Directory'
    ref: https://cwe.mitre.org/data/definitions/553.html
  CWE-554:
    categories:
    - ALL
    - boost-hardened
    description: The ASP.NET application does not use an input validation framework.
    group: top10-insecure-design
    name: CWE-554
    pretty_name: 'CWE-554: ASP.NET Misconfiguration: Not Using Input Validation Framework'
    ref: https://cwe.mitre.org/data/definitions/554.html
  CWE-555:
    categories:
    - ALL
    - boost-hardened
    description: The J2EE application stores a plaintext password in a configuration
      file.
    group: top10-security-misconfiguration
    name: CWE-555
    pretty_name: 'CWE-555: J2EE Misconfiguration: Plaintext Password in Configuration
      File'
    ref: https://cwe.mitre.org/data/definitions/555.html
  CWE-556:
    categories:
    - ALL
    - boost-hardened
    description: Configuring an ASP.NET application to run with impersonated credentials
      may give the application unnecessary privileges.
    group: top10-insecure-design
    name: CWE-556
    pretty_name: 'CWE-556: ASP.NET Misconfiguration: Use of Identity Impersonation'
    ref: https://cwe.mitre.org/data/definitions/556.html
  CWE-558:
    categories:
    - ALL
    - boost-hardened
    description: The product uses the getlogin() function in a multithreaded context,
      potentially causing it to return incorrect values.
    group: top10-insecure-design
    name: CWE-558
    pretty_name: 'CWE-558: Use of getlogin() in Multithreaded Application'
    ref: https://cwe.mitre.org/data/definitions/558.html
  CWE-56:
    categories:
    - ALL
    - boost-hardened
    description: The product accepts path input in the form of asterisk wildcard ('filedir*')
      without appropriate validation, which can lead to ambiguous path resolution
      and allow an attacker to traverse the file system to unintended locations or
      access arbitrary files.
    group: top10-broken-access-control
    name: CWE-56
    pretty_name: 'CWE-56: Path Equivalence: ''filedir*'' (Wildcard)'
    ref: https://cwe.mitre.org/data/definitions/56.html
  CWE-560:
    categories:
    - ALL
    - boost-hardened
    description: The product calls umask() with an incorrect argument that is specified
      as if it is an argument to chmod().
    group: top10-insecure-design
    name: CWE-560
    pretty_name: 'CWE-560: Use of umask() with chmod-style Argument'
    ref: https://cwe.mitre.org/data/definitions/560.html
  CWE-561:
    categories:
    - ALL
    - boost-hardened
    description: The product contains dead code, which can never be executed.
    group: top10-insecure-design
    name: CWE-561
    pretty_name: 'CWE-561: Dead Code'
    ref: https://cwe.mitre.org/data/definitions/561.html
  CWE-562:
    categories:
    - ALL
    - boost-hardened
    description: A function returns the address of a stack variable, which will cause
      unintended program behavior, typically in the form of a crash.
    group: top10-insecure-design
    name: CWE-562
    pretty_name: 'CWE-562: Return of Stack Variable Address'
    ref: https://cwe.mitre.org/data/definitions/562.html
  CWE-563:
    categories:
    - ALL
    - boost-hardened
    description: The variable's value is assigned but never used, making it a dead
      store.
    group: top10-insecure-design
    name: CWE-563
    pretty_name: 'CWE-563: Assignment to Variable without Use'
    ref: https://cwe.mitre.org/data/definitions/563.html
  CWE-564:
    categories:
    - ALL
    - boost-hardened
    description: Using Hibernate to execute a dynamic SQL statement built with user-controlled
      input can allow an attacker to modify the statement's meaning or to execute
      arbitrary SQL commands.
    group: top10-injection
    name: CWE-564
    pretty_name: 'CWE-564: SQL Injection: Hibernate'
    ref: https://cwe.mitre.org/data/definitions/564.html
  CWE-565:
    categories:
    - ALL
    - cwe-565
    - boost-hardened
    - owasp-top-10
    description: The product relies on the existence or values of cookies when performing
      security-critical operations, but it does not properly ensure that the setting
      is valid for the associated user.
    group: top10-software-data-integrity-failures
    name: CWE-565
    pretty_name: 'CWE-565: Reliance on Cookies without Validation and Integrity Checking'
    ref: https://cwe.mitre.org/data/definitions/565.html
  CWE-566:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a database table that includes records that should
      not be accessible to an actor, but it executes a SQL statement with a primary
      key that can be controlled by that actor.
    group: top10-broken-access-control
    name: CWE-566
    pretty_name: 'CWE-566: Authorization Bypass Through User-Controlled SQL Primary
      Key'
    ref: https://cwe.mitre.org/data/definitions/566.html
  CWE-567:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly synchronize shared data, such as static
      variables across threads, which can lead to undefined behavior and unpredictable
      data changes.
    group: top10-insecure-design
    name: CWE-567
    pretty_name: 'CWE-567: Unsynchronized Access to Shared Data in a Multithreaded
      Context'
    ref: https://cwe.mitre.org/data/definitions/567.html
  CWE-568:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a finalize() method that does not call super.finalize().
    group: top10-insecure-design
    name: CWE-568
    pretty_name: 'CWE-568: finalize() Method Without super.finalize()'
    ref: https://cwe.mitre.org/data/definitions/568.html
  CWE-57:
    categories:
    - ALL
    - boost-hardened
    description: The product contains protection mechanisms to restrict access to
      'realdir/filename', but it constructs pathnames using external input in the
      form of 'fakedir/../realdir/filename' that are not handled by those mechanisms.
      This allows attackers to perform unauthorized actions against the targeted file.
    group: top10-broken-access-control
    name: CWE-57
    pretty_name: 'CWE-57: Path Equivalence: ''fakedir/../realdir/filename'''
    ref: https://cwe.mitre.org/data/definitions/57.html
  CWE-570:
    categories:
    - ALL
    - boost-hardened
    description: The product contains an expression that will always evaluate to false.
    group: top10-insecure-design
    name: CWE-570
    pretty_name: 'CWE-570: Expression is Always False'
    ref: https://cwe.mitre.org/data/definitions/570.html
  CWE-571:
    categories:
    - ALL
    - boost-hardened
    description: The product contains an expression that will always evaluate to true.
    group: top10-insecure-design
    name: CWE-571
    pretty_name: 'CWE-571: Expression is Always True'
    ref: https://cwe.mitre.org/data/definitions/571.html
  CWE-572:
    categories:
    - ALL
    - boost-hardened
    description: The product calls a thread's run() method instead of calling start(),
      which causes the code to run in the thread of the caller instead of the callee.
    group: top10-insecure-design
    name: CWE-572
    pretty_name: 'CWE-572: Call to Thread run() instead of start()'
    ref: https://cwe.mitre.org/data/definitions/572.html
  CWE-573:
    categories:
    - ALL
    - boost-hardened
    description: The product does not follow or incorrectly follows the specifications
      as required by the implementation language, environment, framework, protocol,
      or platform.
    group: top10-insecure-design
    name: CWE-573
    pretty_name: 'CWE-573: Improper Following of Specification by Caller'
    ref: https://cwe.mitre.org/data/definitions/573.html
  CWE-574:
    categories:
    - ALL
    - boost-hardened
    description: The product violates the Enterprise JavaBeans (EJB) specification
      by using thread synchronization primitives.
    group: top10-insecure-design
    name: CWE-574
    pretty_name: 'CWE-574: EJB Bad Practices: Use of Synchronization Primitives'
    ref: https://cwe.mitre.org/data/definitions/574.html
  CWE-575:
    categories:
    - ALL
    - boost-hardened
    description: The product violates the Enterprise JavaBeans (EJB) specification
      by using AWT/Swing.
    group: top10-insecure-design
    name: CWE-575
    pretty_name: 'CWE-575: EJB Bad Practices: Use of AWT Swing'
    ref: https://cwe.mitre.org/data/definitions/575.html
  CWE-576:
    categories:
    - ALL
    - boost-hardened
    description: The product violates the Enterprise JavaBeans (EJB) specification
      by using the java.io package.
    group: top10-insecure-design
    name: CWE-576
    pretty_name: 'CWE-576: EJB Bad Practices: Use of Java I/O'
    ref: https://cwe.mitre.org/data/definitions/576.html
  CWE-577:
    categories:
    - ALL
    - boost-hardened
    description: The product violates the Enterprise JavaBeans (EJB) specification
      by using sockets.
    group: top10-insecure-design
    name: CWE-577
    pretty_name: 'CWE-577: EJB Bad Practices: Use of Sockets'
    ref: https://cwe.mitre.org/data/definitions/577.html
  CWE-578:
    categories:
    - ALL
    - boost-hardened
    description: The product violates the Enterprise JavaBeans (EJB) specification
      by using the class loader.
    group: top10-insecure-design
    name: CWE-578
    pretty_name: 'CWE-578: EJB Bad Practices: Use of Class Loader'
    ref: https://cwe.mitre.org/data/definitions/578.html
  CWE-579:
    categories:
    - ALL
    - boost-hardened
    description: The product stores a non-serializable object as an HttpSession attribute,
      which can hurt reliability.
    group: top10-insecure-design
    name: CWE-579
    pretty_name: 'CWE-579: J2EE Bad Practices: Non-serializable Object Stored in Session'
    ref: https://cwe.mitre.org/data/definitions/579.html
  CWE-58:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a protection mechanism that restricts access
      to a long filename on a Windows operating system, but it does not properly restrict
      access to the equivalent short "8.3" filename.
    group: top10-broken-access-control
    name: CWE-58
    pretty_name: 'CWE-58: Path Equivalence: Windows 8.3 Filename'
    ref: https://cwe.mitre.org/data/definitions/58.html
  CWE-580:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a clone() method that does not call super.clone()
      to obtain the new object.
    group: top10-insecure-design
    name: CWE-580
    pretty_name: 'CWE-580: clone() Method Without super.clone()'
    ref: https://cwe.mitre.org/data/definitions/580.html
  CWE-581:
    categories:
    - ALL
    - boost-hardened
    description: The product does not maintain equal hashcodes for equal objects.
    group: top10-insecure-design
    name: CWE-581
    pretty_name: 'CWE-581: Object Model Violation: Just One of Equals and Hashcode
      Defined'
    ref: https://cwe.mitre.org/data/definitions/581.html
  CWE-582:
    categories:
    - ALL
    - boost-hardened
    description: The product declares an array public, final, and static, which is
      not sufficient to prevent the array's contents from being modified.
    group: top10-broken-access-control
    name: CWE-582
    pretty_name: 'CWE-582: Array Declared Public, Final, and Static'
    ref: https://cwe.mitre.org/data/definitions/582.html
  CWE-583:
    categories:
    - ALL
    - boost-hardened
    description: The product violates secure coding principles for mobile code by
      declaring a finalize() method public.
    group: top10-broken-access-control
    name: CWE-583
    pretty_name: 'CWE-583: finalize() Method Declared Public'
    ref: https://cwe.mitre.org/data/definitions/583.html
  CWE-584:
    categories:
    - ALL
    - boost-hardened
    description: The code has a return statement inside a finally block, which will
      cause any thrown exception in the try block to be discarded.
    group: top10-insecure-design
    name: CWE-584
    pretty_name: 'CWE-584: Return Inside Finally Block'
    ref: https://cwe.mitre.org/data/definitions/584.html
  CWE-585:
    categories:
    - ALL
    - boost-hardened
    description: The product contains an empty synchronized block.
    group: top10-insecure-design
    name: CWE-585
    pretty_name: 'CWE-585: Empty Synchronized Block'
    ref: https://cwe.mitre.org/data/definitions/585.html
  CWE-586:
    categories:
    - ALL
    - boost-hardened
    description: The product makes an explicit call to the finalize() method from
      outside the finalizer.
    group: top10-insecure-design
    name: CWE-586
    pretty_name: 'CWE-586: Explicit Call to Finalize()'
    ref: https://cwe.mitre.org/data/definitions/586.html
  CWE-587:
    categories:
    - ALL
    - boost-hardened
    description: The product sets a pointer to a specific address other than NULL
      or 0.
    group: top10-insecure-design
    name: CWE-587
    pretty_name: 'CWE-587: Assignment of a Fixed Address to a Pointer'
    ref: https://cwe.mitre.org/data/definitions/587.html
  CWE-588:
    categories:
    - ALL
    - boost-hardened
    description: Casting a non-structure type to a structure type and accessing a
      field can lead to memory access errors or data corruption.
    group: top10-insecure-design
    name: CWE-588
    pretty_name: 'CWE-588: Attempt to Access Child of a Non-structure Pointer'
    ref: https://cwe.mitre.org/data/definitions/588.html
  CWE-589:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an API function that does not exist on all versions
      of the target platform. This could cause portability problems or inconsistencies
      that allow denial of service or other consequences.
    group: top10-insecure-design
    name: CWE-589
    pretty_name: 'CWE-589: Call to Non-ubiquitous API'
    ref: https://cwe.mitre.org/data/definitions/589.html
  CWE-59:
    categories:
    - ALL
    - boost-hardened
    description: The product attempts to access a file based on the filename, but
      it does not properly prevent that filename from identifying a link or shortcut
      that resolves to an unintended resource.
    group: top10-broken-access-control
    name: CWE-59
    pretty_name: 'CWE-59: Improper Link Resolution Before File Access (''Link Following'')'
    ref: https://cwe.mitre.org/data/definitions/59.html
  CWE-590:
    categories:
    - ALL
    - boost-hardened
    description: The product calls free() on a pointer to memory that was not allocated
      using associated heap allocation functions such as malloc(), calloc(), or realloc().
    group: top10-insecure-design
    name: CWE-590
    pretty_name: 'CWE-590: Free of Memory not on the Heap'
    ref: https://cwe.mitre.org/data/definitions/590.html
  CWE-591:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive data in memory that is not locked, or
      that has been incorrectly locked, which might cause the memory to be written
      to swap files on disk by the virtual memory manager. This can make the data
      more accessible to external actors.
    group: top10-insecure-design
    name: CWE-591
    pretty_name: 'CWE-591: Sensitive Data Storage in Improperly Locked Memory'
    ref: https://cwe.mitre.org/data/definitions/591.html
  CWE-593:
    categories:
    - ALL
    - boost-hardened
    description: The product modifies the SSL context after connection creation has
      begun.
    group: top10-insecure-design
    name: CWE-593
    pretty_name: 'CWE-593: Authentication Bypass: OpenSSL CTX Object Modified after
      SSL Objects are Created'
    ref: https://cwe.mitre.org/data/definitions/593.html
  CWE-594:
    categories:
    - ALL
    - boost-hardened
    description: When the J2EE container attempts to write unserializable objects
      to disk there is no guarantee that the process will complete successfully.
    group: top10-insecure-design
    name: CWE-594
    pretty_name: 'CWE-594: J2EE Framework: Saving Unserializable Objects to Disk'
    ref: https://cwe.mitre.org/data/definitions/594.html
  CWE-595:
    categories:
    - ALL
    - boost-hardened
    description: The product compares object references instead of the contents of
      the objects themselves, preventing it from detecting equivalent objects.
    group: top10-insecure-design
    name: CWE-595
    pretty_name: 'CWE-595: Comparison of Object References Instead of Object Contents'
    ref: https://cwe.mitre.org/data/definitions/595.html
  CWE-597:
    categories:
    - ALL
    - boost-hardened
    description: The product uses the wrong operator when comparing a string, such
      as using "==" when the .equals() method should be used instead.
    group: top10-insecure-design
    name: CWE-597
    pretty_name: 'CWE-597: Use of Wrong Operator in String Comparison'
    ref: https://cwe.mitre.org/data/definitions/597.html
  CWE-598:
    categories:
    - ALL
    - boost-hardened
    description: The web application uses the HTTP GET method to process a request
      and includes sensitive information in the query string of that request.
    group: top10-insecure-design
    name: CWE-598
    pretty_name: 'CWE-598: Use of GET Request Method With Sensitive Query Strings'
    ref: https://cwe.mitre.org/data/definitions/598.html
  CWE-599:
    categories:
    - ALL
    - boost-hardened
    description: The product uses OpenSSL and trusts or uses a certificate without
      using the SSL_get_verify_result() function to ensure that the certificate satisfies
      all necessary security requirements.
    group: top10-id-authn-failures
    name: CWE-599
    pretty_name: 'CWE-599: Missing Validation of OpenSSL Certificate'
    ref: https://cwe.mitre.org/data/definitions/599.html
  CWE-6:
    categories:
    - ALL
    - boost-hardened
    description: The J2EE application is configured to use an insufficient session
      ID length.
    group: top10-crypto-failures
    name: CWE-6
    pretty_name: 'CWE-6: J2EE Misconfiguration: Insufficient Session-ID Length'
    ref: https://cwe.mitre.org/data/definitions/6.html
  CWE-600:
    categories:
    - ALL
    - boost-hardened
    description: The Servlet does not catch all exceptions, which may reveal sensitive
      debugging information.
    group: top10-insecure-design
    name: CWE-600
    pretty_name: 'CWE-600: Uncaught Exception in Servlet '
    ref: https://cwe.mitre.org/data/definitions/600.html
  CWE-601:
    categories:
    - ALL
    - cwe-601
    - owasp-top-10
    description: A web application accepts a user-controlled input that specifies
      a link to an external site, and uses that link in a Redirect. This simplifies
      phishing attacks.
    group: top10-broken-access-control
    name: CWE-601
    pretty_name: 'CWE-601: URL Redirection to Untrusted Site (''Open Redirect'')'
    ref: https://cwe.mitre.org/data/definitions/601.html
  CWE-602:
    categories:
    - ALL
    - boost-hardened
    description: The product is composed of a server that relies on the client to
      implement a mechanism that is intended to protect the server.
    group: top10-insecure-design
    name: CWE-602
    pretty_name: 'CWE-602: Client-Side Enforcement of Server-Side Security'
    ref: https://cwe.mitre.org/data/definitions/602.html
  CWE-603:
    categories:
    - ALL
    - boost-hardened
    description: A client/server product performs authentication within client code
      but not in server code, allowing server-side authentication to be bypassed via
      a modified client that omits the authentication check.
    group: top10-id-authn-failures
    name: CWE-603
    pretty_name: 'CWE-603: Use of Client-Side Authentication'
    ref: https://cwe.mitre.org/data/definitions/603.html
  CWE-605:
    categories:
    - ALL
    - boost-hardened
    description: When multiple sockets are allowed to bind to the same port, other
      services on that port may be stolen or spoofed.
    group: top10-insecure-design
    name: CWE-605
    pretty_name: 'CWE-605: Multiple Binds to the Same Port'
    ref: https://cwe.mitre.org/data/definitions/605.html
  CWE-606:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly check inputs that are used for loop
      conditions, potentially leading to a denial of service or other consequences
      because of excessive looping.
    group: top10-injection
    name: CWE-606
    pretty_name: 'CWE-606: Unchecked Input for Loop Condition'
    ref: https://cwe.mitre.org/data/definitions/606.html
  CWE-607:
    categories:
    - ALL
    - boost-hardened
    description: A public or protected static final field references a mutable object,
      which allows the object to be changed by malicious code, or accidentally from
      another package.
    group: top10-injection
    name: CWE-607
    pretty_name: 'CWE-607: Public Static Final Field References Mutable Object'
    ref: https://cwe.mitre.org/data/definitions/607.html
  CWE-608:
    categories:
    - ALL
    - boost-hardened
    description: An ActionForm class contains a field that has not been declared private,
      which can be accessed without using a setter or getter.
    group: top10-broken-access-control
    name: CWE-608
    pretty_name: 'CWE-608: Struts: Non-private Field in ActionForm Class'
    ref: https://cwe.mitre.org/data/definitions/608.html
  CWE-609:
    categories:
    - ALL
    - boost-hardened
    description: The product uses double-checked locking to access a resource without
      the overhead of explicit synchronization, but the locking is insufficient.
    group: top10-insecure-design
    name: CWE-609
    pretty_name: 'CWE-609: Double-Checked Locking'
    ref: https://cwe.mitre.org/data/definitions/609.html
  CWE-61:
    categories:
    - ALL
    - boost-hardened
    description: The product, when opening a file or directory, does not sufficiently
      account for when the file is a symbolic link that resolves to a target outside
      of the intended control sphere. This could allow an attacker to cause the product
      to operate on unauthorized files.
    group: top10-broken-access-control
    name: CWE-61
    pretty_name: 'CWE-61: UNIX Symbolic Link (Symlink) Following'
    ref: https://cwe.mitre.org/data/definitions/61.html
  CWE-610:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an externally controlled name or reference that
      resolves to a resource that is outside of the intended control sphere.
    group: top10-injection
    name: CWE-610
    pretty_name: 'CWE-610: Externally Controlled Reference to a Resource in Another
      Sphere'
    ref: https://cwe.mitre.org/data/definitions/610.html
  CWE-611:
    categories:
    - ALL
    - cwe-611
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product processes an XML document that can contain XML entities
      with URIs that resolve to documents outside of the intended sphere of control,
      causing the product to embed incorrect documents into its output.
    group: top10-security-misconfiguration
    name: CWE-611
    pretty_name: 'CWE-611: Improper Restriction of XML External Entity Reference'
    ref: https://cwe.mitre.org/data/definitions/611.html
    recommended: true
  CWE-612:
    categories:
    - ALL
    - boost-hardened
    description: The product creates a search index of private or sensitive documents,
      but it does not properly limit index access to actors who are authorized to
      see the original information.
    group: top10-broken-access-control
    name: CWE-612
    pretty_name: 'CWE-612: Improper Authorization of Index Containing Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/612.html
  CWE-613:
    categories:
    - ALL
    - boost-hardened
    description: According to WASC, "Insufficient Session Expiration is when a web
      site permits an attacker to reuse old session credentials or session IDs for
      authorization."
    group: top10-id-authn-failures
    name: CWE-613
    pretty_name: 'CWE-613: Insufficient Session Expiration'
    ref: https://cwe.mitre.org/data/definitions/613.html
  CWE-614:
    categories:
    - ALL
    - cwe-614
    - boost-hardened
    - owasp-top-10
    description: The Secure attribute for sensitive cookies in HTTPS sessions is not
      set, which could cause the user agent to send those cookies in plaintext over
      an HTTP session.
    group: top10-security-misconfiguration
    name: CWE-614
    pretty_name: 'CWE-614: Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute'
    ref: https://cwe.mitre.org/data/definitions/614.html
  CWE-615:
    categories:
    - ALL
    - boost-hardened
    description: 'While adding general comments is very useful, some programmers tend
      to leave important data, such as: filenames related to the web application,
      old links or links which were not meant to be browsed by users, old code fragments,
      etc.'
    group: top10-broken-access-control
    name: CWE-615
    pretty_name: 'CWE-615: Inclusion of Sensitive Information in Source Code Comments'
    ref: https://cwe.mitre.org/data/definitions/615.html
  CWE-616:
    categories:
    - ALL
    - boost-hardened
    description: The PHP application uses an old method for processing uploaded files
      by referencing the four global variables that are set for each file (e.g. $varname,
      $varname_size, $varname_name, $varname_type). These variables could be overwritten
      by attackers, causing the application to process unauthorized files.
    group: top10-software-data-integrity-failures
    name: CWE-616
    pretty_name: 'CWE-616: Incomplete Identification of Uploaded File Variables (PHP)'
    ref: https://cwe.mitre.org/data/definitions/616.html
  CWE-617:
    categories:
    - ALL
    - boost-hardened
    description: The product contains an assert() or similar statement that can be
      triggered by an attacker, which leads to an application exit or other behavior
      that is more severe than necessary.
    group: top10-insecure-design
    name: CWE-617
    pretty_name: 'CWE-617: Reachable Assertion'
    ref: https://cwe.mitre.org/data/definitions/617.html
  CWE-618:
    categories:
    - ALL
    - boost-hardened
    description: An ActiveX control is intended for use in a web browser, but it exposes
      dangerous methods that perform actions that are outside of the browser's security
      model (e.g. the zone or domain).
    group: top10-broken-access-control
    name: CWE-618
    pretty_name: 'CWE-618: Exposed Unsafe ActiveX Method'
    ref: https://cwe.mitre.org/data/definitions/618.html
  CWE-619:
    categories:
    - ALL
    - boost-hardened
    description: If a database cursor is not closed properly, then it could become
      accessible to other users while retaining the same privileges that were originally
      assigned, leaving the cursor "dangling."
    group: top10-broken-access-control
    name: CWE-619
    pretty_name: 'CWE-619: Dangling Database Cursor (''Cursor Injection'')'
    ref: https://cwe.mitre.org/data/definitions/619.html
  CWE-62:
    categories:
    - ALL
    - boost-hardened
    description: The product, when opening a file or directory, does not sufficiently
      account for when the name is associated with a hard link to a target that is
      outside of the intended control sphere. This could allow an attacker to cause
      the product to operate on unauthorized files.
    group: top10-broken-access-control
    name: CWE-62
    pretty_name: 'CWE-62: UNIX Hard Link'
    ref: https://cwe.mitre.org/data/definitions/62.html
  CWE-620:
    categories:
    - ALL
    - boost-hardened
    description: When setting a new password for a user, the product does not require
      knowledge of the original password, or using another form of authentication.
    group: top10-id-authn-failures
    name: CWE-620
    pretty_name: 'CWE-620: Unverified Password Change'
    ref: https://cwe.mitre.org/data/definitions/620.html
  CWE-621:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to determine the names of variables
      into which information is extracted, without verifying that the names of the
      specified variables are valid. This could cause the program to overwrite unintended
      variables.
    group: top10-injection
    name: CWE-621
    pretty_name: 'CWE-621: Variable Extraction Error'
    ref: https://cwe.mitre.org/data/definitions/621.html
  CWE-622:
    categories:
    - ALL
    - boost-hardened
    description: The product adds hooks to user-accessible API functions, but it does
      not properly validate the arguments. This could lead to resultant vulnerabilities.
    group: top10-injection
    name: CWE-622
    pretty_name: 'CWE-622: Improper Validation of Function Hook Arguments'
    ref: https://cwe.mitre.org/data/definitions/622.html
  CWE-623:
    categories:
    - ALL
    - boost-hardened
    description: An ActiveX control is intended for restricted use, but it has been
      marked as safe-for-scripting.
    group: top10-insecure-design
    name: CWE-623
    pretty_name: 'CWE-623: Unsafe ActiveX Control Marked Safe For Scripting'
    ref: https://cwe.mitre.org/data/definitions/623.html
  CWE-624:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a regular expression that either (1) contains an
      executable component with user-controlled inputs, or (2) allows a user to enable
      execution by inserting pattern modifiers.
    group: top10-injection
    name: CWE-624
    pretty_name: 'CWE-624: Executable Regular Expression Error'
    ref: https://cwe.mitre.org/data/definitions/624.html
  CWE-625:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a regular expression that does not sufficiently
      restrict the set of allowed values.
    group: top10-insecure-design
    name: CWE-625
    pretty_name: 'CWE-625: Permissive Regular Expression'
    ref: https://cwe.mitre.org/data/definitions/625.html
  CWE-626:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle null bytes or NUL characters
      when passing data between different representations or components.
    group: top10-injection
    name: CWE-626
    pretty_name: 'CWE-626: Null Byte Interaction Error (Poison Null Byte)'
    ref: https://cwe.mitre.org/data/definitions/626.html
  CWE-627:
    categories:
    - ALL
    - boost-hardened
    description: In a language where the user can influence the name of a variable
      at runtime, if the variable names are not controlled, an attacker can read or
      write to arbitrary variables, or access arbitrary functions.
    group: top10-injection
    name: CWE-627
    pretty_name: 'CWE-627: Dynamic Variable Evaluation'
    ref: https://cwe.mitre.org/data/definitions/627.html
  CWE-628:
    categories:
    - ALL
    - boost-hardened
    description: The product calls a function, procedure, or routine with arguments
      that are not correctly specified, leading to always-incorrect behavior and resultant
      weaknesses.
    group: top10-insecure-design
    name: CWE-628
    pretty_name: 'CWE-628: Function Call with Incorrectly Specified Arguments'
    ref: https://cwe.mitre.org/data/definitions/628.html
  CWE-636:
    categories:
    - ALL
    - boost-hardened
    description: When the product encounters an error condition or failure, its design
      requires it to fall back to a state that is less secure than other options that
      are available, such as selecting the weakest encryption algorithm or using the
      most permissive access control restrictions.
    group: top10-insecure-design
    name: CWE-636
    pretty_name: 'CWE-636: Not Failing Securely (''Failing Open'')'
    ref: https://cwe.mitre.org/data/definitions/636.html
  CWE-637:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a more complex mechanism than necessary, which could
      lead to resultant weaknesses when the mechanism is not correctly understood,
      modeled, configured, implemented, or used.
    group: top10-insecure-design
    name: CWE-637
    pretty_name: 'CWE-637: Unnecessary Complexity in Protection Mechanism (Not Using
      ''Economy of Mechanism'')'
    ref: https://cwe.mitre.org/data/definitions/637.html
  CWE-638:
    categories:
    - ALL
    - boost-hardened
    description: The product does not perform access checks on a resource every time
      the resource is accessed by an entity, which can create resultant weaknesses
      if that entity's rights or privileges change over time.
    group: top10-insecure-design
    name: CWE-638
    pretty_name: 'CWE-638: Not Using Complete Mediation'
    ref: https://cwe.mitre.org/data/definitions/638.html
  CWE-639:
    categories:
    - ALL
    - boost-hardened
    description: The system's authorization functionality does not prevent one user
      from gaining access to another user's data or record by modifying the key value
      identifying the data.
    group: top10-broken-access-control
    name: CWE-639
    pretty_name: 'CWE-639: Authorization Bypass Through User-Controlled Key'
    ref: https://cwe.mitre.org/data/definitions/639.html
  CWE-64:
    categories:
    - ALL
    - boost-hardened
    description: The product, when opening a file or directory, does not sufficiently
      handle when the file is a Windows shortcut (.LNK) whose target is outside of
      the intended control sphere. This could allow an attacker to cause the product
      to operate on unauthorized files.
    group: top10-broken-access-control
    name: CWE-64
    pretty_name: 'CWE-64: Windows Shortcut Following (.LNK)'
    ref: https://cwe.mitre.org/data/definitions/64.html
  CWE-640:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a mechanism for users to recover or change their
      passwords without knowing the original password, but the mechanism is weak.
    group: top10-id-authn-failures
    name: CWE-640
    pretty_name: 'CWE-640: Weak Password Recovery Mechanism for Forgotten Password'
    ref: https://cwe.mitre.org/data/definitions/640.html
  CWE-641:
    categories:
    - ALL
    - boost-hardened
    description: The product constructs the name of a file or other resource using
      input from an upstream component, but it does not restrict or incorrectly restricts
      the resulting name.
    group: top10-injection
    name: CWE-641
    pretty_name: 'CWE-641: Improper Restriction of Names for Files and Other Resources'
    ref: https://cwe.mitre.org/data/definitions/641.html
  CWE-642:
    categories:
    - ALL
    - boost-hardened
    description: The product stores security-critical state information about its
      users, or the product itself, in a location that is accessible to unauthorized
      actors.
    group: top10-insecure-design
    name: CWE-642
    pretty_name: 'CWE-642: External Control of Critical State Data'
    ref: https://cwe.mitre.org/data/definitions/642.html
  CWE-643:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to dynamically construct an XPath
      expression used to retrieve data from an XML database, but it does not neutralize
      or incorrectly neutralizes that input. This allows an attacker to control the
      structure of the query.
    group: top10-injection
    name: CWE-643
    pretty_name: 'CWE-643: Improper Neutralization of Data within XPath Expressions
      (''XPath Injection'')'
    ref: https://cwe.mitre.org/data/definitions/643.html
  CWE-644:
    categories:
    - ALL
    - boost-hardened
    description: The product does not neutralize or incorrectly neutralizes web scripting
      syntax in HTTP headers that can be used by web browser components that can process
      raw headers, such as Flash.
    group: top10-injection
    name: CWE-644
    pretty_name: 'CWE-644: Improper Neutralization of HTTP Headers for Scripting Syntax'
    ref: https://cwe.mitre.org/data/definitions/644.html
  CWE-645:
    categories:
    - ALL
    - boost-hardened
    description: The product contains an account lockout protection mechanism, but
      the mechanism is too restrictive and can be triggered too easily, which allows
      attackers to deny service to legitimate users by causing their accounts to be
      locked out.
    group: top10-id-authn-failures
    name: CWE-645
    pretty_name: 'CWE-645: Overly Restrictive Account Lockout Mechanism'
    ref: https://cwe.mitre.org/data/definitions/645.html
  CWE-646:
    categories:
    - ALL
    - boost-hardened
    description: The product allows a file to be uploaded, but it relies on the file
      name or extension of the file to determine the appropriate behaviors. This could
      be used by attackers to cause the file to be misclassified and processed in
      a dangerous fashion.
    group: top10-insecure-design
    name: CWE-646
    pretty_name: 'CWE-646: Reliance on File Name or Extension of Externally-Supplied
      File'
    ref: https://cwe.mitre.org/data/definitions/646.html
  CWE-647:
    categories:
    - ALL
    - boost-hardened
    description: The product defines policy namespaces and makes authorization decisions
      based on the assumption that a URL is canonical. This can allow a non-canonical
      URL to bypass the authorization.
    group: top10-broken-access-control
    name: CWE-647
    pretty_name: 'CWE-647: Use of Non-Canonical URL Paths for Authorization Decisions'
    ref: https://cwe.mitre.org/data/definitions/647.html
  CWE-648:
    categories:
    - ALL
    - boost-hardened
    description: The product does not conform to the API requirements for a function
      call that requires extra privileges. This could allow attackers to gain privileges
      by causing the function to be called incorrectly.
    group: top10-insecure-design
    name: CWE-648
    pretty_name: 'CWE-648: Incorrect Use of Privileged APIs'
    ref: https://cwe.mitre.org/data/definitions/648.html
  CWE-649:
    categories:
    - ALL
    - boost-hardened
    description: The product uses obfuscation or encryption of inputs that should
      not be mutable by an external actor, but the product does not use integrity
      checks to detect if those inputs have been modified.
    group: top10-software-data-integrity-failures
    name: CWE-649
    pretty_name: 'CWE-649: Reliance on Obfuscation or Encryption of Security-Relevant
      Inputs without Integrity Checking'
    ref: https://cwe.mitre.org/data/definitions/649.html
  CWE-65:
    categories:
    - ALL
    - boost-hardened
    description: The product, when opening a file or directory, does not sufficiently
      handle when the name is associated with a hard link to a target that is outside
      of the intended control sphere. This could allow an attacker to cause the product
      to operate on unauthorized files.
    group: top10-broken-access-control
    name: CWE-65
    pretty_name: 'CWE-65: Windows Hard Link'
    ref: https://cwe.mitre.org/data/definitions/65.html
  CWE-650:
    categories:
    - ALL
    - boost-hardened
    description: The server contains a protection mechanism that assumes that any
      URI that is accessed using HTTP GET will not cause a state change to the associated
      resource. This might allow attackers to bypass intended access restrictions
      and conduct resource modification and deletion attacks, since some applications
      allow GET to modify state.
    group: top10-insecure-design
    name: CWE-650
    pretty_name: 'CWE-650: Trusting HTTP Permission Methods on the Server Side'
    ref: https://cwe.mitre.org/data/definitions/650.html
  CWE-651:
    categories:
    - ALL
    - boost-hardened
    description: The Web services architecture may require exposing a Web Service
      Definition Language (WSDL) file that contains information on the publicly accessible
      services and how callers of these services should interact with them (e.g. what
      parameters they expect and what types they return).
    group: top10-broken-access-control
    name: CWE-651
    pretty_name: 'CWE-651: Exposure of WSDL File Containing Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/651.html
  CWE-652:
    categories:
    - ALL
    - boost-hardened
    description: The product uses external input to dynamically construct an XQuery
      expression used to retrieve data from an XML database, but it does not neutralize
      or incorrectly neutralizes that input. This allows an attacker to control the
      structure of the query.
    group: top10-injection
    name: CWE-652
    pretty_name: 'CWE-652: Improper Neutralization of Data within XQuery Expressions
      (''XQuery Injection'')'
    ref: https://cwe.mitre.org/data/definitions/652.html
  CWE-653:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly compartmentalize or isolate functionality,
      processes, or resources that require different privilege levels, rights, or
      permissions.
    group: top10-insecure-design
    name: CWE-653
    pretty_name: 'CWE-653: Improper Isolation or Compartmentalization'
    ref: https://cwe.mitre.org/data/definitions/653.html
  CWE-654:
    categories:
    - ALL
    - boost-hardened
    description: A protection mechanism relies exclusively, or to a large extent,
      on the evaluation of a single condition or the integrity of a single object
      or entity in order to make a decision about granting access to restricted resources
      or functionality.
    group: top10-insecure-design
    name: CWE-654
    pretty_name: 'CWE-654: Reliance on a Single Factor in a Security Decision'
    ref: https://cwe.mitre.org/data/definitions/654.html
  CWE-655:
    categories:
    - ALL
    - boost-hardened
    description: The product has a protection mechanism that is too difficult or inconvenient
      to use, encouraging non-malicious users to disable or bypass the mechanism,
      whether by accident or on purpose.
    group: top10-insecure-design
    name: CWE-655
    pretty_name: 'CWE-655: Insufficient Psychological Acceptability'
    ref: https://cwe.mitre.org/data/definitions/655.html
  CWE-656:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a protection mechanism whose strength depends heavily
      on its obscurity, such that knowledge of its algorithms or key data is sufficient
      to defeat the mechanism.
    group: top10-insecure-design
    name: CWE-656
    pretty_name: 'CWE-656: Reliance on Security Through Obscurity'
    ref: https://cwe.mitre.org/data/definitions/656.html
  CWE-657:
    categories:
    - ALL
    - boost-hardened
    description: The product violates well-established principles for secure design.
    group: top10-insecure-design
    name: CWE-657
    pretty_name: 'CWE-657: Violation of Secure Design Principles'
    ref: https://cwe.mitre.org/data/definitions/657.html
  CWE-66:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles a file name that
      identifies a "virtual" resource that is not directly specified within the directory
      that is associated with the file name, causing the product to perform file-based
      operations on a resource that is not a file.
    group: top10-broken-access-control
    name: CWE-66
    pretty_name: 'CWE-66: Improper Handling of File Names that Identify Virtual Resources'
    ref: https://cwe.mitre.org/data/definitions/66.html
  CWE-662:
    categories:
    - ALL
    - boost-hardened
    description: The product utilizes multiple threads or processes to allow temporary
      access to a shared resource that can only be exclusive to one process at a time,
      but it does not properly synchronize these actions, which might cause simultaneous
      accesses of this resource by multiple threads or processes.
    group: top10-insecure-design
    name: CWE-662
    pretty_name: 'CWE-662: Improper Synchronization'
    ref: https://cwe.mitre.org/data/definitions/662.html
  CWE-663:
    categories:
    - ALL
    - boost-hardened
    description: The product calls a non-reentrant function in a concurrent context
      in which a competing code sequence (e.g. thread or signal handler) may have
      an opportunity to call the same function or otherwise influence its state.
    group: top10-insecure-design
    name: CWE-663
    pretty_name: 'CWE-663: Use of a Non-reentrant Function in a Concurrent Context'
    ref: https://cwe.mitre.org/data/definitions/663.html
  CWE-664:
    categories:
    - ALL
    - boost-hardened
    description: The product does not maintain or incorrectly maintains control over
      a resource throughout its lifetime of creation, use, and release.
    group: top10-insecure-design
    name: CWE-664
    pretty_name: 'CWE-664: Improper Control of a Resource Through its Lifetime'
    ref: https://cwe.mitre.org/data/definitions/664.html
  CWE-665:
    categories:
    - ALL
    - boost-hardened
    description: The product does not initialize or incorrectly initializes a resource,
      which might leave the resource in an unexpected state when it is accessed or
      used.
    group: top10-insecure-design
    name: CWE-665
    pretty_name: 'CWE-665: Improper Initialization'
    ref: https://cwe.mitre.org/data/definitions/665.html
  CWE-666:
    categories:
    - ALL
    - boost-hardened
    description: The product performs an operation on a resource at the wrong phase
      of the resource's lifecycle, which can lead to unexpected behaviors.
    group: top10-insecure-design
    name: CWE-666
    pretty_name: 'CWE-666: Operation on Resource in Wrong Phase of Lifetime'
    ref: https://cwe.mitre.org/data/definitions/666.html
  CWE-667:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly acquire or release a lock on a resource,
      leading to unexpected resource state changes and behaviors.
    group: top10-insecure-design
    name: CWE-667
    pretty_name: 'CWE-667: Improper Locking'
    ref: https://cwe.mitre.org/data/definitions/667.html
  CWE-668:
    categories:
    - ALL
    - boost-hardened
    description: The product exposes a resource to the wrong control sphere, providing
      unintended actors with inappropriate access to the resource.
    group: top10-broken-access-control
    name: CWE-668
    pretty_name: 'CWE-668: Exposure of Resource to Wrong Sphere'
    ref: https://cwe.mitre.org/data/definitions/668.html
  CWE-669:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly transfer a resource/behavior to another
      sphere, or improperly imports a resource/behavior from another sphere, in a
      manner that provides unintended control over that resource.
    group: top10-insecure-design
    name: CWE-669
    pretty_name: 'CWE-669: Incorrect Resource Transfer Between Spheres'
    ref: https://cwe.mitre.org/data/definitions/669.html
  CWE-67:
    categories:
    - ALL
    - boost-hardened
    description: The product constructs pathnames from user input, but it does not
      handle or incorrectly handles a pathname containing a Windows device name such
      as AUX or CON. This typically leads to denial of service or an information exposure
      when the application attempts to process the pathname as a regular file.
    group: top10-broken-access-control
    name: CWE-67
    pretty_name: 'CWE-67: Improper Handling of Windows Device Names'
    ref: https://cwe.mitre.org/data/definitions/67.html
  CWE-670:
    categories:
    - ALL
    - boost-hardened
    description: The code contains a control flow path that does not reflect the algorithm
      that the path is intended to implement, leading to incorrect behavior any time
      this path is navigated.
    group: top10-insecure-design
    name: CWE-670
    pretty_name: 'CWE-670: Always-Incorrect Control Flow Implementation'
    ref: https://cwe.mitre.org/data/definitions/670.html
  CWE-671:
    categories:
    - ALL
    - boost-hardened
    description: The product uses security features in a way that prevents the product's
      administrator from tailoring security settings to reflect the environment in
      which the product is being used. This introduces resultant weaknesses or prevents
      it from operating at a level of security that is desired by the administrator.
    group: top10-insecure-design
    name: CWE-671
    pretty_name: 'CWE-671: Lack of Administrator Control over Security'
    ref: https://cwe.mitre.org/data/definitions/671.html
  CWE-672:
    categories:
    - ALL
    - boost-hardened
    description: The product uses, accesses, or otherwise operates on a resource after
      that resource has been expired, released, or revoked.
    group: top10-insecure-design
    name: CWE-672
    pretty_name: 'CWE-672: Operation on a Resource after Expiration or Release'
    ref: https://cwe.mitre.org/data/definitions/672.html
  CWE-673:
    categories:
    - ALL
    - boost-hardened
    description: The product does not prevent the definition of control spheres from
      external actors.
    group: top10-insecure-design
    name: CWE-673
    pretty_name: 'CWE-673: External Influence of Sphere Definition'
    ref: https://cwe.mitre.org/data/definitions/673.html
  CWE-674:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly control the amount of recursion that
      takes place, consuming excessive resources, such as allocated memory or the
      program stack.
    group: top10-insecure-design
    name: CWE-674
    pretty_name: 'CWE-674: Uncontrolled Recursion'
    ref: https://cwe.mitre.org/data/definitions/674.html
  CWE-675:
    categories:
    - ALL
    - boost-hardened
    description: The product performs the same operation on a resource two or more
      times, when the operation should only be applied once.
    group: top10-insecure-design
    name: CWE-675
    pretty_name: 'CWE-675: Multiple Operations on Resource in Single-Operation Context'
    ref: https://cwe.mitre.org/data/definitions/675.html
  CWE-676:
    categories:
    - ALL
    - boost-hardened
    description: The product invokes a potentially dangerous function that could introduce
      a vulnerability if it is used incorrectly, but the function can also be used
      safely.
    group: top10-insecure-design
    name: CWE-676
    pretty_name: 'CWE-676: Use of Potentially Dangerous Function'
    ref: https://cwe.mitre.org/data/definitions/676.html
  CWE-680:
    categories:
    - ALL
    - boost-hardened
    description: The product performs a calculation to determine how much memory to
      allocate, but an integer overflow can occur that causes less memory to be allocated
      than expected, leading to a buffer overflow.
    group: top10-insecure-design
    name: CWE-680
    pretty_name: 'CWE-680: Integer Overflow to Buffer Overflow'
    ref: https://cwe.mitre.org/data/definitions/680.html
  CWE-681:
    categories:
    - ALL
    - boost-hardened
    description: When converting from one data type to another, such as long to integer,
      data can be omitted or translated in a way that produces unexpected values.
      If the resulting values are used in a sensitive context, then dangerous behaviors
      may occur.
    group: top10-insecure-design
    name: CWE-681
    pretty_name: 'CWE-681: Incorrect Conversion between Numeric Types'
    ref: https://cwe.mitre.org/data/definitions/681.html
  CWE-682:
    categories:
    - ALL
    - boost-hardened
    description: The product performs a calculation that generates incorrect or unintended
      results that are later used in security-critical decisions or resource management.
    group: top10-insecure-design
    name: CWE-682
    pretty_name: 'CWE-682: Incorrect Calculation'
    ref: https://cwe.mitre.org/data/definitions/682.html
  CWE-683:
    categories:
    - ALL
    - boost-hardened
    description: The product calls a function, procedure, or routine, but the caller
      specifies the arguments in an incorrect order, leading to resultant weaknesses.
    group: top10-insecure-design
    name: CWE-683
    pretty_name: 'CWE-683: Function Call With Incorrect Order of Arguments'
    ref: https://cwe.mitre.org/data/definitions/683.html
  CWE-684:
    categories:
    - ALL
    - boost-hardened
    description: The code does not function according to its published specifications,
      potentially leading to incorrect usage.
    group: top10-insecure-design
    name: CWE-684
    pretty_name: 'CWE-684: Incorrect Provision of Specified Functionality'
    ref: https://cwe.mitre.org/data/definitions/684.html
  CWE-685:
    categories:
    - ALL
    - boost-hardened
    description: The product calls a function, procedure, or routine, but the caller
      specifies too many arguments, or too few arguments, which may lead to undefined
      behavior and resultant weaknesses.
    group: top10-insecure-design
    name: CWE-685
    pretty_name: 'CWE-685: Function Call With Incorrect Number of Arguments'
    ref: https://cwe.mitre.org/data/definitions/685.html
  CWE-686:
    categories:
    - ALL
    - boost-hardened
    description: The product calls a function, procedure, or routine, but the caller
      specifies an argument that is the wrong data type, which may lead to resultant
      weaknesses.
    group: top10-insecure-design
    name: CWE-686
    pretty_name: 'CWE-686: Function Call With Incorrect Argument Type'
    ref: https://cwe.mitre.org/data/definitions/686.html
  CWE-687:
    categories:
    - ALL
    - boost-hardened
    description: The product calls a function, procedure, or routine, but the caller
      specifies an argument that contains the wrong value, which may lead to resultant
      weaknesses.
    group: top10-insecure-design
    name: CWE-687
    pretty_name: 'CWE-687: Function Call With Incorrectly Specified Argument Value'
    ref: https://cwe.mitre.org/data/definitions/687.html
  CWE-688:
    categories:
    - ALL
    - boost-hardened
    description: The product calls a function, procedure, or routine, but the caller
      specifies the wrong variable or reference as one of the arguments, which may
      lead to undefined behavior and resultant weaknesses.
    group: top10-insecure-design
    name: CWE-688
    pretty_name: 'CWE-688: Function Call With Incorrect Variable or Reference as Argument'
    ref: https://cwe.mitre.org/data/definitions/688.html
  CWE-689:
    categories:
    - ALL
    - boost-hardened
    description: The product, while copying or cloning a resource, does not set the
      resource's permissions or access control until the copy is complete, leaving
      the resource exposed to other spheres while the copy is taking place.
    group: top10-insecure-design
    name: CWE-689
    pretty_name: 'CWE-689: Permission Race Condition During Resource Copy'
    ref: https://cwe.mitre.org/data/definitions/689.html
  CWE-69:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly prevent access to, or detect usage
      of, alternate data streams (ADS).
    group: top10-broken-access-control
    name: CWE-69
    pretty_name: 'CWE-69: Improper Handling of Windows ::DATA Alternate Data Stream'
    ref: https://cwe.mitre.org/data/definitions/69.html
  CWE-690:
    categories:
    - ALL
    - boost-hardened
    description: The product does not check for an error after calling a function
      that can return with a NULL pointer if the function fails, which leads to a
      resultant NULL pointer dereference.
    group: top10-insecure-design
    name: CWE-690
    pretty_name: 'CWE-690: Unchecked Return Value to NULL Pointer Dereference'
    ref: https://cwe.mitre.org/data/definitions/690.html
  CWE-691:
    categories:
    - ALL
    - boost-hardened
    description: The code does not sufficiently manage its control flow during execution,
      creating conditions in which the control flow can be modified in unexpected
      ways.
    group: top10-insecure-design
    name: CWE-691
    pretty_name: 'CWE-691: Insufficient Control Flow Management'
    ref: https://cwe.mitre.org/data/definitions/691.html
  CWE-692:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a denylist-based protection mechanism to defend
      against XSS attacks, but the denylist is incomplete, allowing XSS variants to
      succeed.
    group: top10-injection
    name: CWE-692
    pretty_name: 'CWE-692: Incomplete Denylist to Cross-Site Scripting'
    ref: https://cwe.mitre.org/data/definitions/692.html
  CWE-693:
    categories:
    - ALL
    - cwe-693
    description: The product does not use or incorrectly uses a protection mechanism
      that provides sufficient defense against directed attacks against the product.
    group: top10-insecure-design
    name: CWE-693
    pretty_name: 'CWE-693: Protection Mechanism Failure'
    ref: https://cwe.mitre.org/data/definitions/693.html
  CWE-694:
    categories:
    - ALL
    - boost-hardened
    description: The product uses multiple resources that can have the same identifier,
      in a context in which unique identifiers are required.
    group: top10-injection
    name: CWE-694
    pretty_name: 'CWE-694: Use of Multiple Resources with Duplicate Identifier'
    ref: https://cwe.mitre.org/data/definitions/694.html
  CWE-695:
    categories:
    - ALL
    - boost-hardened
    description: The product uses low-level functionality that is explicitly prohibited
      by the framework or specification under which the product is supposed to operate.
    group: top10-insecure-design
    name: CWE-695
    pretty_name: 'CWE-695: Use of Low-Level Functionality'
    ref: https://cwe.mitre.org/data/definitions/695.html
  CWE-696:
    categories:
    - ALL
    - boost-hardened
    description: The product performs multiple related behaviors, but the behaviors
      are performed in the wrong order in ways which may produce resultant weaknesses.
    group: top10-insecure-design
    name: CWE-696
    pretty_name: 'CWE-696: Incorrect Behavior Order'
    ref: https://cwe.mitre.org/data/definitions/696.html
  CWE-697:
    categories:
    - ALL
    - boost-hardened
    description: The product compares two entities in a security-relevant context,
      but the comparison is incorrect, which may lead to resultant weaknesses.
    group: top10-insecure-design
    name: CWE-697
    pretty_name: 'CWE-697: Incorrect Comparison'
    ref: https://cwe.mitre.org/data/definitions/697.html
  CWE-698:
    categories:
    - ALL
    - boost-hardened
    description: The web application sends a redirect to another location, but instead
      of exiting, it executes additional code.
    group: top10-insecure-design
    name: CWE-698
    pretty_name: 'CWE-698: Execution After Redirect (EAR)'
    ref: https://cwe.mitre.org/data/definitions/698.html
  CWE-7:
    categories:
    - ALL
    - boost-hardened
    description: The default error page of a web application should not display sensitive
      information about the product.
    group: top10-security-misconfiguration
    name: CWE-7
    pretty_name: 'CWE-7: J2EE Misconfiguration: Missing Custom Error Page'
    ref: https://cwe.mitre.org/data/definitions/7.html
  CWE-703:
    categories:
    - ALL
    - cwe-703
    - boost-hardened
    description: The product does not properly anticipate or handle exceptional conditions
      that rarely occur during normal operation of the product.
    group: top10-insecure-design
    name: CWE-703
    pretty_name: 'CWE-703: Improper Check or Handling of Exceptional Conditions'
    ref: https://cwe.mitre.org/data/definitions/703.html
  CWE-704:
    categories:
    - ALL
    - cwe-704
    description: The product does not correctly convert an object, resource, or structure
      from one type to a different type.
    group: top10-insecure-design
    name: CWE-704
    pretty_name: 'CWE-704: Incorrect Type Conversion or Cast'
    ref: https://cwe.mitre.org/data/definitions/704.html
  CWE-705:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly return control flow to the proper location
      after it has completed a task or detected an unusual condition.
    group: top10-insecure-design
    name: CWE-705
    pretty_name: 'CWE-705: Incorrect Control Flow Scoping'
    ref: https://cwe.mitre.org/data/definitions/705.html
  CWE-706:
    categories:
    - ALL
    - cwe-706
    - owasp-top-10
    description: The product uses a name or reference to access a resource, but the
      name/reference resolves to a resource that is outside of the intended control
      sphere.
    group: top10-broken-access-control
    name: CWE-706
    pretty_name: 'CWE-706: Use of Incorrectly-Resolved Name or Reference'
    ref: https://cwe.mitre.org/data/definitions/706.html
  CWE-707:
    categories:
    - ALL
    - boost-hardened
    description: The product does not ensure or incorrectly ensures that structured
      messages or data are well-formed and that certain security properties are met
      before being read from an upstream component or sent to a downstream component.
    group: top10-injection
    name: CWE-707
    pretty_name: 'CWE-707: Improper Neutralization'
    ref: https://cwe.mitre.org/data/definitions/707.html
  CWE-708:
    categories:
    - ALL
    - boost-hardened
    description: The product assigns an owner to a resource, but the owner is outside
      of the intended control sphere.
    group: top10-broken-access-control
    name: CWE-708
    pretty_name: 'CWE-708: Incorrect Ownership Assignment'
    ref: https://cwe.mitre.org/data/definitions/708.html
  CWE-710:
    categories:
    - ALL
    - boost-hardened
    description: The product does not follow certain coding rules for development,
      which can lead to resultant weaknesses or increase the severity of the associated
      vulnerabilities.
    group: top10-insecure-design
    name: CWE-710
    pretty_name: 'CWE-710: Improper Adherence to Coding Standards'
    ref: https://cwe.mitre.org/data/definitions/710.html
  CWE-72:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly handle special paths that may identify
      the data or resource fork of a file on the HFS+ file system.
    group: top10-broken-access-control
    name: CWE-72
    pretty_name: 'CWE-72: Improper Handling of Apple HFS+ Alternate Data Stream Path'
    ref: https://cwe.mitre.org/data/definitions/72.html
  CWE-73:
    categories:
    - ALL
    - boost-hardened
    description: The product allows user input to control or influence paths or file
      names that are used in filesystem operations.
    group: top10-insecure-design
    name: CWE-73
    pretty_name: 'CWE-73: External Control of File Name or Path'
    ref: https://cwe.mitre.org/data/definitions/73.html
  CWE-732:
    categories:
    - ALL
    - cwe-732
    - boost-hardened
    description: The product specifies permissions for a security-critical resource
      in a way that allows that resource to be read or modified by unintended actors.
    group: top10-broken-access-control
    name: CWE-732
    pretty_name: 'CWE-732: Incorrect Permission Assignment for Critical Resource'
    ref: https://cwe.mitre.org/data/definitions/732.html
  CWE-733:
    categories:
    - ALL
    - boost-hardened
    description: The developer builds a security-critical protection mechanism into
      the software, but the compiler optimizes the program such that the mechanism
      is removed or modified.
    group: top10-insecure-design
    name: CWE-733
    pretty_name: 'CWE-733: Compiler Optimization Removal or Modification of Security-critical
      Code'
    ref: https://cwe.mitre.org/data/definitions/733.html
  CWE-74:
    categories:
    - ALL
    - cwe-74
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product constructs all or part of a command, data structure,
      or record using externally-influenced input from an upstream component, but
      it does not neutralize or incorrectly neutralizes special elements that could
      modify how it is parsed or interpreted when it is sent to a downstream component.
    group: top10-injection
    name: CWE-74
    pretty_name: 'CWE-74: Improper Neutralization of Special Elements in Output Used
      by a Downstream Component (''Injection'')'
    ref: https://cwe.mitre.org/data/definitions/74.html
    recommended: true
  CWE-749:
    categories:
    - ALL
    - boost-hardened
    description: The product provides an Applications Programming Interface (API)
      or similar interface for interaction with external actors, but the interface
      includes a dangerous method or function that is not properly restricted.
    group: top10-broken-access-control
    name: CWE-749
    pretty_name: 'CWE-749: Exposed Dangerous Method or Function'
    ref: https://cwe.mitre.org/data/definitions/749.html
  CWE-75:
    categories:
    - ALL
    - boost-hardened
    description: The product does not adequately filter user-controlled input for
      special elements with control implications.
    group: top10-injection
    name: CWE-75
    pretty_name: 'CWE-75: Failure to Sanitize Special Elements into a Different Plane
      (Special Element Injection)'
    ref: https://cwe.mitre.org/data/definitions/75.html
  CWE-754:
    categories:
    - ALL
    - boost-hardened
    description: The product does not check or incorrectly checks for unusual or exceptional
      conditions that are not expected to occur frequently during day to day operation
      of the product.
    group: top10-insecure-design
    name: CWE-754
    pretty_name: 'CWE-754: Improper Check for Unusual or Exceptional Conditions'
    ref: https://cwe.mitre.org/data/definitions/754.html
  CWE-755:
    categories:
    - ALL
    - boost-hardened
    description: The product does not handle or incorrectly handles an exceptional
      condition.
    group: top10-insecure-design
    name: CWE-755
    pretty_name: 'CWE-755: Improper Handling of Exceptional Conditions'
    ref: https://cwe.mitre.org/data/definitions/755.html
  CWE-756:
    categories:
    - ALL
    - boost-hardened
    description: The product does not return custom error pages to the user, possibly
      exposing sensitive information.
    group: top10-security-misconfiguration
    name: CWE-756
    pretty_name: 'CWE-756: Missing Custom Error Page'
    ref: https://cwe.mitre.org/data/definitions/756.html
  CWE-757:
    categories:
    - ALL
    - boost-hardened
    description: A protocol or its implementation supports interaction between multiple
      actors and allows those actors to negotiate which algorithm should be used as
      a protection mechanism such as encryption or authentication, but it does not
      select the strongest algorithm that is available to both parties.
    group: top10-crypto-failures
    name: CWE-757
    pretty_name: 'CWE-757: Selection of Less-Secure Algorithm During Negotiation (''Algorithm
      Downgrade'')'
    ref: https://cwe.mitre.org/data/definitions/757.html
  CWE-758:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an API function, data structure, or other entity
      in a way that relies on properties that are not always guaranteed to hold for
      that entity.
    group: top10-insecure-design
    name: CWE-758
    pretty_name: 'CWE-758: Reliance on Undefined, Unspecified, or Implementation-Defined
      Behavior'
    ref: https://cwe.mitre.org/data/definitions/758.html
  CWE-759:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a one-way cryptographic hash against an input that
      should not be reversible, such as a password, but the product does not also
      use a salt as part of the input.
    group: top10-crypto-failures
    name: CWE-759
    pretty_name: 'CWE-759: Use of a One-Way Hash without a Salt'
    ref: https://cwe.mitre.org/data/definitions/759.html
  CWE-76:
    categories:
    - ALL
    - boost-hardened
    description: The product correctly neutralizes certain special elements, but it
      improperly neutralizes equivalent special elements.
    group: top10-injection
    name: CWE-76
    pretty_name: 'CWE-76: Improper Neutralization of Equivalent Special Elements'
    ref: https://cwe.mitre.org/data/definitions/76.html
  CWE-760:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a one-way cryptographic hash against an input that
      should not be reversible, such as a password, but the product uses a predictable
      salt as part of the input.
    group: top10-crypto-failures
    name: CWE-760
    pretty_name: 'CWE-760: Use of a One-Way Hash with a Predictable Salt'
    ref: https://cwe.mitre.org/data/definitions/760.html
  CWE-761:
    categories:
    - ALL
    - boost-hardened
    description: The product calls free() on a pointer to a memory resource that was
      allocated on the heap, but the pointer is not at the start of the buffer.
    group: top10-insecure-design
    name: CWE-761
    pretty_name: 'CWE-761: Free of Pointer not at Start of Buffer'
    ref: https://cwe.mitre.org/data/definitions/761.html
  CWE-762:
    categories:
    - ALL
    - boost-hardened
    description: The product attempts to return a memory resource to the system, but
      it calls a release function that is not compatible with the function that was
      originally used to allocate that resource.
    group: top10-insecure-design
    name: CWE-762
    pretty_name: 'CWE-762: Mismatched Memory Management Routines'
    ref: https://cwe.mitre.org/data/definitions/762.html
  CWE-763:
    categories:
    - ALL
    - boost-hardened
    description: The product attempts to return a memory resource to the system, but
      it calls the wrong release function or calls the appropriate release function
      incorrectly.
    group: top10-insecure-design
    name: CWE-763
    pretty_name: 'CWE-763: Release of Invalid Pointer or Reference'
    ref: https://cwe.mitre.org/data/definitions/763.html
  CWE-764:
    categories:
    - ALL
    - boost-hardened
    description: The product locks a critical resource more times than intended, leading
      to an unexpected state in the system.
    group: top10-insecure-design
    name: CWE-764
    pretty_name: 'CWE-764: Multiple Locks of a Critical Resource'
    ref: https://cwe.mitre.org/data/definitions/764.html
  CWE-765:
    categories:
    - ALL
    - boost-hardened
    description: The product unlocks a critical resource more times than intended,
      leading to an unexpected state in the system.
    group: top10-insecure-design
    name: CWE-765
    pretty_name: 'CWE-765: Multiple Unlocks of a Critical Resource'
    ref: https://cwe.mitre.org/data/definitions/765.html
  CWE-766:
    categories:
    - ALL
    - boost-hardened
    description: The product declares a critical variable, field, or member to be
      public when intended security policy requires it to be private.
    group: top10-insecure-design
    name: CWE-766
    pretty_name: 'CWE-766: Critical Data Element Declared Public'
    ref: https://cwe.mitre.org/data/definitions/766.html
  CWE-767:
    categories:
    - ALL
    - boost-hardened
    description: The product defines a public method that reads or modifies a private
      variable.
    group: top10-broken-access-control
    name: CWE-767
    pretty_name: 'CWE-767: Access to Critical Private Variable via Public Method'
    ref: https://cwe.mitre.org/data/definitions/767.html
  CWE-768:
    categories:
    - ALL
    - boost-hardened
    description: The product contains a conditional statement with multiple logical
      expressions in which one of the non-leading expressions may produce side effects.
      This may lead to an unexpected state in the program after the execution of the
      conditional, because short-circuiting logic may prevent the side effects from
      occurring.
    group: top10-insecure-design
    name: CWE-768
    pretty_name: 'CWE-768: Incorrect Short Circuit Evaluation'
    ref: https://cwe.mitre.org/data/definitions/768.html
  CWE-77:
    categories:
    - ALL
    - cwe-77
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product constructs all or part of a command using externally-influenced
      input from an upstream component, but it does not neutralize or incorrectly
      neutralizes special elements that could modify the intended command when it
      is sent to a downstream component.
    group: top10-injection
    name: CWE-77
    pretty_name: 'CWE-77: Improper Neutralization of Special Elements used in a Command
      (''Command Injection'')'
    ref: https://cwe.mitre.org/data/definitions/77.html
  CWE-770:
    categories:
    - ALL
    - boost-hardened
    description: The product allocates a reusable resource or group of resources on
      behalf of an actor without imposing any restrictions on the size or number of
      resources that can be allocated, in violation of the intended security policy
      for that actor.
    group: top10-insecure-design
    name: CWE-770
    pretty_name: 'CWE-770: Allocation of Resources Without Limits or Throttling'
    ref: https://cwe.mitre.org/data/definitions/770.html
  CWE-771:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly maintain a reference to a resource
      that has been allocated, which prevents the resource from being reclaimed.
    group: top10-insecure-design
    name: CWE-771
    pretty_name: 'CWE-771: Missing Reference to Active Allocated Resource'
    ref: https://cwe.mitre.org/data/definitions/771.html
  CWE-772:
    categories:
    - ALL
    - boost-hardened
    description: The product does not release a resource after its effective lifetime
      has ended, i.e., after the resource is no longer needed.
    group: top10-insecure-design
    name: CWE-772
    pretty_name: 'CWE-772: Missing Release of Resource after Effective Lifetime'
    ref: https://cwe.mitre.org/data/definitions/772.html
  CWE-773:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly maintain references to a file descriptor
      or handle, which prevents that file descriptor/handle from being reclaimed.
    group: top10-insecure-design
    name: CWE-773
    pretty_name: 'CWE-773: Missing Reference to Active File Descriptor or Handle'
    ref: https://cwe.mitre.org/data/definitions/773.html
  CWE-774:
    categories:
    - ALL
    - boost-hardened
    description: The product allocates file descriptors or handles on behalf of an
      actor without imposing any restrictions on how many descriptors can be allocated,
      in violation of the intended security policy for that actor.
    group: top10-insecure-design
    name: CWE-774
    pretty_name: 'CWE-774: Allocation of File Descriptors or Handles Without Limits
      or Throttling'
    ref: https://cwe.mitre.org/data/definitions/774.html
  CWE-775:
    categories:
    - ALL
    - boost-hardened
    description: The product does not release a file descriptor or handle after its
      effective lifetime has ended, i.e., after the file descriptor/handle is no longer
      needed.
    group: top10-insecure-design
    name: CWE-775
    pretty_name: 'CWE-775: Missing Release of File Descriptor or Handle after Effective
      Lifetime'
    ref: https://cwe.mitre.org/data/definitions/775.html
  CWE-776:
    categories:
    - ALL
    - boost-hardened
    description: The product uses XML documents and allows their structure to be defined
      with a Document Type Definition (DTD), but it does not properly control the
      number of recursive definitions of entities.
    group: top10-security-misconfiguration
    name: CWE-776
    pretty_name: 'CWE-776: Improper Restriction of Recursive Entity References in
      DTDs (''XML Entity Expansion'')'
    ref: https://cwe.mitre.org/data/definitions/776.html
  CWE-777:
    categories:
    - ALL
    - cwe-777
    - boost-hardened
    description: The product uses a regular expression to perform neutralization,
      but the regular expression is not anchored and may allow malicious or malformed
      data to slip through.
    group: top10-insecure-design
    name: CWE-777
    pretty_name: 'CWE-777: Regular Expression without Anchors'
    ref: https://cwe.mitre.org/data/definitions/777.html
  CWE-778:
    categories:
    - ALL
    - cwe-778
    - boost-hardened
    - owasp-top-10
    description: When a security-critical event occurs, the product either does not
      record the event or omits important details about the event when logging it.
    group: top10-security-logging-monitoring-failures
    name: CWE-778
    pretty_name: 'CWE-778: Insufficient Logging'
    ref: https://cwe.mitre.org/data/definitions/778.html
  CWE-779:
    categories:
    - ALL
    - boost-hardened
    description: The product logs too much information, making log files hard to process
      and possibly hindering recovery efforts or forensic analysis after an attack.
    group: top10-insecure-design
    name: CWE-779
    pretty_name: 'CWE-779: Logging of Excessive Data'
    ref: https://cwe.mitre.org/data/definitions/779.html
  CWE-78:
    categories:
    - ALL
    - cwe-78
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product constructs all or part of an OS command using externally-influenced
      input from an upstream component, but it does not neutralize or incorrectly
      neutralizes special elements that could modify the intended OS command when
      it is sent to a downstream component.
    group: top10-injection
    name: CWE-78
    pretty_name: 'CWE-78: Improper Neutralization of Special Elements used in an OS
      Command (''OS Command Injection'')'
    ref: https://cwe.mitre.org/data/definitions/78.html
    recommended: true
  CWE-780:
    categories:
    - ALL
    - boost-hardened
    description: The product uses the RSA algorithm but does not incorporate Optimal
      Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
    group: top10-crypto-failures
    name: CWE-780
    pretty_name: 'CWE-780: Use of RSA Algorithm without OAEP'
    ref: https://cwe.mitre.org/data/definitions/780.html
  CWE-781:
    categories:
    - ALL
    - boost-hardened
    description: The product defines an IOCTL that uses METHOD_NEITHER for I/O, but
      it does not validate or incorrectly validates the addresses that are provided.
    group: top10-injection
    name: CWE-781
    pretty_name: 'CWE-781: Improper Address Validation in IOCTL with METHOD_NEITHER
      I/O Control Code'
    ref: https://cwe.mitre.org/data/definitions/781.html
  CWE-782:
    categories:
    - ALL
    - boost-hardened
    description: The product implements an IOCTL with functionality that should be
      restricted, but it does not properly enforce access control for the IOCTL.
    group: top10-broken-access-control
    name: CWE-782
    pretty_name: 'CWE-782: Exposed IOCTL with Insufficient Access Control'
    ref: https://cwe.mitre.org/data/definitions/782.html
  CWE-783:
    categories:
    - ALL
    - boost-hardened
    description: The product uses an expression in which operator precedence causes
      incorrect logic to be used.
    group: top10-insecure-design
    name: CWE-783
    pretty_name: 'CWE-783: Operator Precedence Logic Error'
    ref: https://cwe.mitre.org/data/definitions/783.html
  CWE-784:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a protection mechanism that relies on the existence
      or values of a cookie, but it does not properly ensure that the cookie is valid
      for the associated user.
    group: top10-software-data-integrity-failures
    name: CWE-784
    pretty_name: 'CWE-784: Reliance on Cookies without Validation and Integrity Checking
      in a Security Decision'
    ref: https://cwe.mitre.org/data/definitions/784.html
  CWE-785:
    categories:
    - ALL
    - boost-hardened
    description: The product invokes a function for normalizing paths or file names,
      but it provides an output buffer that is smaller than the maximum possible size,
      such as PATH_MAX.
    group: top10-insecure-design
    name: CWE-785
    pretty_name: 'CWE-785: Use of Path Manipulation Function without Maximum-sized
      Buffer'
    ref: https://cwe.mitre.org/data/definitions/785.html
  CWE-786:
    categories:
    - ALL
    - boost-hardened
    description: The product reads or writes to a buffer using an index or pointer
      that references a memory location prior to the beginning of the buffer.
    group: top10-insecure-design
    name: CWE-786
    pretty_name: 'CWE-786: Access of Memory Location Before Start of Buffer'
    ref: https://cwe.mitre.org/data/definitions/786.html
  CWE-787:
    categories:
    - ALL
    - boost-hardened
    description: The product writes data past the end, or before the beginning, of
      the intended buffer.
    group: top10-insecure-design
    name: CWE-787
    pretty_name: 'CWE-787: Out-of-bounds Write'
    ref: https://cwe.mitre.org/data/definitions/787.html
  CWE-788:
    categories:
    - ALL
    - boost-hardened
    description: The product reads or writes to a buffer using an index or pointer
      that references a memory location after the end of the buffer.
    group: top10-insecure-design
    name: CWE-788
    pretty_name: 'CWE-788: Access of Memory Location After End of Buffer'
    ref: https://cwe.mitre.org/data/definitions/788.html
  CWE-789:
    categories:
    - ALL
    - boost-hardened
    description: The product allocates memory based on an untrusted, large size value,
      but it does not ensure that the size is within expected limits, allowing arbitrary
      amounts of memory to be allocated.
    group: top10-insecure-design
    name: CWE-789
    pretty_name: 'CWE-789: Memory Allocation with Excessive Size Value'
    ref: https://cwe.mitre.org/data/definitions/789.html
  CWE-79:
    categories:
    - ALL
    - cwe-79
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product does not neutralize or incorrectly neutralizes user-controllable
      input before it is placed in output that is used as a web page that is served
      to other users.
    group: top10-injection
    name: CWE-79
    pretty_name: 'CWE-79: Improper Neutralization of Input During Web Page Generation
      (''Cross-site Scripting'')'
    ref: https://cwe.mitre.org/data/definitions/79.html
    recommended: true
  CWE-790:
    categories:
    - ALL
    - boost-hardened
    description: The product receives data from an upstream component, but does not
      filter or incorrectly filters special elements before sending it to a downstream
      component.
    group: top10-injection
    name: CWE-790
    pretty_name: 'CWE-790: Improper Filtering of Special Elements'
    ref: https://cwe.mitre.org/data/definitions/790.html
  CWE-791:
    categories:
    - ALL
    - boost-hardened
    description: The product receives data from an upstream component, but does not
      completely filter special elements before sending it to a downstream component.
    group: top10-injection
    name: CWE-791
    pretty_name: 'CWE-791: Incomplete Filtering of Special Elements'
    ref: https://cwe.mitre.org/data/definitions/791.html
  CWE-792:
    categories:
    - ALL
    - boost-hardened
    description: The product receives data from an upstream component, but does not
      completely filter one or more instances of special elements before sending it
      to a downstream component.
    group: top10-injection
    name: CWE-792
    pretty_name: 'CWE-792: Incomplete Filtering of One or More Instances of Special
      Elements'
    ref: https://cwe.mitre.org/data/definitions/792.html
  CWE-793:
    categories:
    - ALL
    - boost-hardened
    description: The product receives data from an upstream component, but only filters
      a single instance of a special element before sending it to a downstream component.
    group: top10-injection
    name: CWE-793
    pretty_name: 'CWE-793: Only Filtering One Instance of a Special Element'
    ref: https://cwe.mitre.org/data/definitions/793.html
  CWE-794:
    categories:
    - ALL
    - boost-hardened
    description: The product receives data from an upstream component, but does not
      filter all instances of a special element before sending it to a downstream
      component.
    group: top10-injection
    name: CWE-794
    pretty_name: 'CWE-794: Incomplete Filtering of Multiple Instances of Special Elements'
    ref: https://cwe.mitre.org/data/definitions/794.html
  CWE-795:
    categories:
    - ALL
    - boost-hardened
    description: The product receives data from an upstream component, but only accounts
      for special elements at a specified location, thereby missing remaining special
      elements that may exist before sending it to a downstream component.
    group: top10-injection
    name: CWE-795
    pretty_name: 'CWE-795: Only Filtering Special Elements at a Specified Location'
    ref: https://cwe.mitre.org/data/definitions/795.html
  CWE-796:
    categories:
    - ALL
    - boost-hardened
    description: The product receives data from an upstream component, but only accounts
      for special elements positioned relative to a marker (e.g. "at the beginning/end
      of a string; the second argument"), thereby missing remaining special elements
      that may exist before sending it to a downstream component.
    group: top10-injection
    name: CWE-796
    pretty_name: 'CWE-796: Only Filtering Special Elements Relative to a Marker'
    ref: https://cwe.mitre.org/data/definitions/796.html
  CWE-797:
    categories:
    - ALL
    - boost-hardened
    description: The product receives data from an upstream component, but only accounts
      for special elements at an absolute position (e.g. "byte number 10"), thereby
      missing remaining special elements that may exist before sending it to a downstream
      component.
    group: top10-injection
    name: CWE-797
    pretty_name: 'CWE-797: Only Filtering Special Elements at an Absolute Position'
    ref: https://cwe.mitre.org/data/definitions/797.html
  CWE-798:
    categories:
    - ALL
    - cwe-798
    - stored-secrets
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product contains hard-coded credentials, such as a password or
      cryptographic key, which it uses for its own inbound authentication, outbound
      communication to external components, or encryption of internal data.
    group: top10-id-authn-failures
    name: CWE-798
    pretty_name: 'CWE-798: Use of Hard-coded Credentials'
    ref: https://cwe.mitre.org/data/definitions/798.html
    recommended: true
  CWE-799:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly limit the number or frequency of interactions
      that it has with an actor, such as the number of incoming requests.
    group: top10-insecure-design
    name: CWE-799
    pretty_name: 'CWE-799: Improper Control of Interaction Frequency'
    ref: https://cwe.mitre.org/data/definitions/799.html
  CWE-8:
    categories:
    - ALL
    - boost-hardened
    description: When an application exposes a remote interface for an entity bean,
      it might also expose methods that get or set the bean's data. These methods
      could be leveraged to read sensitive information, or to change data in ways
      that violate the application's expectations, potentially leading to other vulnerabilities.
    group: top10-broken-access-control
    name: CWE-8
    pretty_name: 'CWE-8: J2EE Misconfiguration: Entity Bean Declared Remote'
    ref: https://cwe.mitre.org/data/definitions/8.html
  CWE-80:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special characters such as "<", ">",
      and "&" that could be interpreted as web-scripting elements when they are sent
      to a downstream component that processes web pages.
    group: top10-injection
    name: CWE-80
    pretty_name: 'CWE-80: Improper Neutralization of Script-Related HTML Tags in a
      Web Page (Basic XSS)'
    ref: https://cwe.mitre.org/data/definitions/80.html
  CWE-804:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a CAPTCHA challenge, but the challenge can be guessed
      or automatically recognized by a non-human actor.
    group: top10-broken-access-control
    name: CWE-804
    pretty_name: 'CWE-804: Guessable CAPTCHA'
    ref: https://cwe.mitre.org/data/definitions/804.html
  CWE-805:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a sequential operation to read or write a buffer,
      but it uses an incorrect length value that causes it to access memory that is
      outside of the bounds of the buffer.
    group: top10-insecure-design
    name: CWE-805
    pretty_name: 'CWE-805: Buffer Access with Incorrect Length Value'
    ref: https://cwe.mitre.org/data/definitions/805.html
  CWE-806:
    categories:
    - ALL
    - boost-hardened
    description: The product uses the size of a source buffer when reading from or
      writing to a destination buffer, which may cause it to access memory that is
      outside of the bounds of the buffer.
    group: top10-insecure-design
    name: CWE-806
    pretty_name: 'CWE-806: Buffer Access Using Size of Source Buffer'
    ref: https://cwe.mitre.org/data/definitions/806.html
  CWE-807:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a protection mechanism that relies on the existence
      or values of an input, but the input can be modified by an untrusted actor in
      a way that bypasses the protection mechanism.
    group: top10-insecure-design
    name: CWE-807
    pretty_name: 'CWE-807: Reliance on Untrusted Inputs in a Security Decision'
    ref: https://cwe.mitre.org/data/definitions/807.html
  CWE-81:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes special characters that could be interpreted
      as web-scripting elements when they are sent to an error page.
    group: top10-injection
    name: CWE-81
    pretty_name: 'CWE-81: Improper Neutralization of Script in an Error Message Web
      Page'
    ref: https://cwe.mitre.org/data/definitions/81.html
  CWE-82:
    categories:
    - ALL
    - boost-hardened
    description: The web application does not neutralize or incorrectly neutralizes
      scripting elements within attributes of HTML IMG tags, such as the src attribute.
    group: top10-injection
    name: CWE-82
    pretty_name: 'CWE-82: Improper Neutralization of Script in Attributes of IMG Tags
      in a Web Page'
    ref: https://cwe.mitre.org/data/definitions/82.html
  CWE-820:
    categories:
    - ALL
    - boost-hardened
    description: The product utilizes a shared resource in a concurrent manner but
      does not attempt to synchronize access to the resource.
    group: top10-insecure-design
    name: CWE-820
    pretty_name: 'CWE-820: Missing Synchronization'
    ref: https://cwe.mitre.org/data/definitions/820.html
  CWE-821:
    categories:
    - ALL
    - boost-hardened
    description: The product utilizes a shared resource in a concurrent manner, but
      it does not correctly synchronize access to the resource.
    group: top10-insecure-design
    name: CWE-821
    pretty_name: 'CWE-821: Incorrect Synchronization'
    ref: https://cwe.mitre.org/data/definitions/821.html
  CWE-822:
    categories:
    - ALL
    - boost-hardened
    description: The product obtains a value from an untrusted source, converts this
      value to a pointer, and dereferences the resulting pointer.
    group: top10-insecure-design
    name: CWE-822
    pretty_name: 'CWE-822: Untrusted Pointer Dereference'
    ref: https://cwe.mitre.org/data/definitions/822.html
  CWE-823:
    categories:
    - ALL
    - boost-hardened
    description: The product performs pointer arithmetic on a valid pointer, but it
      uses an offset that can point outside of the intended range of valid memory
      locations for the resulting pointer.
    group: top10-insecure-design
    name: CWE-823
    pretty_name: 'CWE-823: Use of Out-of-range Pointer Offset'
    ref: https://cwe.mitre.org/data/definitions/823.html
  CWE-824:
    categories:
    - ALL
    - boost-hardened
    description: The product accesses or uses a pointer that has not been initialized.
    group: top10-insecure-design
    name: CWE-824
    pretty_name: 'CWE-824: Access of Uninitialized Pointer'
    ref: https://cwe.mitre.org/data/definitions/824.html
  CWE-825:
    categories:
    - ALL
    - boost-hardened
    description: The product dereferences a pointer that contains a location for memory
      that was previously valid, but is no longer valid.
    group: top10-insecure-design
    name: CWE-825
    pretty_name: 'CWE-825: Expired Pointer Dereference'
    ref: https://cwe.mitre.org/data/definitions/825.html
  CWE-826:
    categories:
    - ALL
    - boost-hardened
    description: The product releases a resource that is still intended to be used
      by itself or another actor.
    group: top10-insecure-design
    name: CWE-826
    pretty_name: 'CWE-826: Premature Release of Resource During Expected Lifetime'
    ref: https://cwe.mitre.org/data/definitions/826.html
  CWE-827:
    categories:
    - ALL
    - boost-hardened
    description: The product does not restrict a reference to a Document Type Definition
      (DTD) to the intended control sphere. This might allow attackers to reference
      arbitrary DTDs, possibly causing the product to expose files, consume excessive
      system resources, or execute arbitrary http requests on behalf of the attacker.
    group: top10-broken-access-control
    name: CWE-827
    pretty_name: 'CWE-827: Improper Control of Document Type Definition'
    ref: https://cwe.mitre.org/data/definitions/827.html
  CWE-828:
    categories:
    - ALL
    - boost-hardened
    description: The product defines a signal handler that contains code sequences
      that are not asynchronous-safe, i.e., the functionality is not reentrant, or
      it can be interrupted.
    group: top10-insecure-design
    name: CWE-828
    pretty_name: 'CWE-828: Signal Handler with Functionality that is not Asynchronous-Safe'
    ref: https://cwe.mitre.org/data/definitions/828.html
  CWE-829:
    categories:
    - ALL
    - boost-hardened
    description: The product imports, requires, or includes executable functionality
      (such as a library) from a source that is outside of the intended control sphere.
    group: top10-software-data-integrity-failures
    name: CWE-829
    pretty_name: 'CWE-829: Inclusion of Functionality from Untrusted Control Sphere'
    ref: https://cwe.mitre.org/data/definitions/829.html
  CWE-83:
    categories:
    - ALL
    - boost-hardened
    description: The product does not neutralize or incorrectly neutralizes "javascript:"
      or other URIs from dangerous attributes within tags, such as onmouseover, onload,
      onerror, or style.
    group: top10-injection
    name: CWE-83
    pretty_name: 'CWE-83: Improper Neutralization of Script in Attributes in a Web
      Page'
    ref: https://cwe.mitre.org/data/definitions/83.html
  CWE-830:
    categories:
    - ALL
    - boost-hardened
    description: The product includes web functionality (such as a web widget) from
      another domain, which causes it to operate within the domain of the product,
      potentially granting total access and control of the product to the untrusted
      source.
    group: top10-software-data-integrity-failures
    name: CWE-830
    pretty_name: 'CWE-830: Inclusion of Web Functionality from an Untrusted Source'
    ref: https://cwe.mitre.org/data/definitions/830.html
  CWE-831:
    categories:
    - ALL
    - boost-hardened
    description: The product defines a function that is used as a handler for more
      than one signal.
    group: top10-insecure-design
    name: CWE-831
    pretty_name: 'CWE-831: Signal Handler Function Associated with Multiple Signals'
    ref: https://cwe.mitre.org/data/definitions/831.html
  CWE-832:
    categories:
    - ALL
    - boost-hardened
    description: The product attempts to unlock a resource that is not locked.
    group: top10-insecure-design
    name: CWE-832
    pretty_name: 'CWE-832: Unlock of a Resource that is not Locked'
    ref: https://cwe.mitre.org/data/definitions/832.html
  CWE-833:
    categories:
    - ALL
    - boost-hardened
    description: The product contains multiple threads or executable segments that
      are waiting for each other to release a necessary lock, resulting in deadlock.
    group: top10-insecure-design
    name: CWE-833
    pretty_name: 'CWE-833: Deadlock'
    ref: https://cwe.mitre.org/data/definitions/833.html
  CWE-834:
    categories:
    - ALL
    - boost-hardened
    description: The product performs an iteration or loop without sufficiently limiting
      the number of times that the loop is executed.
    group: top10-insecure-design
    name: CWE-834
    pretty_name: 'CWE-834: Excessive Iteration'
    ref: https://cwe.mitre.org/data/definitions/834.html
  CWE-835:
    categories:
    - ALL
    - boost-hardened
    description: The product contains an iteration or loop with an exit condition
      that cannot be reached, i.e., an infinite loop.
    group: top10-insecure-design
    name: CWE-835
    pretty_name: 'CWE-835: Loop with Unreachable Exit Condition (''Infinite Loop'')'
    ref: https://cwe.mitre.org/data/definitions/835.html
  CWE-836:
    categories:
    - ALL
    - boost-hardened
    description: The product records password hashes in a data store, receives a hash
      of a password from a client, and compares the supplied hash to the hash obtained
      from the data store.
    group: top10-id-authn-failures
    name: CWE-836
    pretty_name: 'CWE-836: Use of Password Hash Instead of Password for Authentication'
    ref: https://cwe.mitre.org/data/definitions/836.html
  CWE-837:
    categories:
    - ALL
    - boost-hardened
    description: The product requires that an actor should only be able to perform
      an action once, or to have only one unique action, but the product does not
      enforce or improperly enforces this restriction.
    group: top10-insecure-design
    name: CWE-837
    pretty_name: 'CWE-837: Improper Enforcement of a Single, Unique Action'
    ref: https://cwe.mitre.org/data/definitions/837.html
  CWE-838:
    categories:
    - ALL
    - boost-hardened
    description: The product uses or specifies an encoding when generating output
      to a downstream component, but the specified encoding is not the same as the
      encoding that is expected by the downstream component.
    group: top10-injection
    name: CWE-838
    pretty_name: 'CWE-838: Inappropriate Encoding for Output Context'
    ref: https://cwe.mitre.org/data/definitions/838.html
  CWE-839:
    categories:
    - ALL
    - boost-hardened
    description: The product checks a value to ensure that it is less than or equal
      to a maximum, but it does not also verify that the value is greater than or
      equal to the minimum.
    group: top10-insecure-design
    name: CWE-839
    pretty_name: 'CWE-839: Numeric Range Comparison Without Minimum Check'
    ref: https://cwe.mitre.org/data/definitions/839.html
  CWE-84:
    categories:
    - ALL
    - boost-hardened
    description: The web application improperly neutralizes user-controlled input
      for executable script disguised with URI encodings.
    group: top10-injection
    name: CWE-84
    pretty_name: 'CWE-84: Improper Neutralization of Encoded URI Schemes in a Web
      Page'
    ref: https://cwe.mitre.org/data/definitions/84.html
  CWE-841:
    categories:
    - ALL
    - boost-hardened
    description: The product supports a session in which more than one behavior must
      be performed by an actor, but it does not properly ensure that the actor performs
      the behaviors in the required sequence.
    group: top10-insecure-design
    name: CWE-841
    pretty_name: 'CWE-841: Improper Enforcement of Behavioral Workflow'
    ref: https://cwe.mitre.org/data/definitions/841.html
  CWE-842:
    categories:
    - ALL
    - boost-hardened
    description: The product or the administrator places a user into an incorrect
      group.
    group: top10-broken-access-control
    name: CWE-842
    pretty_name: 'CWE-842: Placement of User into Incorrect Group'
    ref: https://cwe.mitre.org/data/definitions/842.html
  CWE-843:
    categories:
    - ALL
    - boost-hardened
    description: The product allocates or initializes a resource such as a pointer,
      object, or variable using one type, but it later accesses that resource using
      a type that is incompatible with the original type.
    group: top10-insecure-design
    name: CWE-843
    pretty_name: 'CWE-843: Access of Resource Using Incompatible Type (''Type Confusion'')'
    ref: https://cwe.mitre.org/data/definitions/843.html
  CWE-85:
    categories:
    - ALL
    - boost-hardened
    description: The web application does not filter user-controlled input for executable
      script disguised using doubling of the involved characters.
    group: top10-injection
    name: CWE-85
    pretty_name: 'CWE-85: Doubled Character XSS Manipulations'
    ref: https://cwe.mitre.org/data/definitions/85.html
  CWE-86:
    categories:
    - ALL
    - boost-hardened
    description: The product does not neutralize or incorrectly neutralizes invalid
      characters or byte sequences in the middle of tag names, URI schemes, and other
      identifiers.
    group: top10-injection
    name: CWE-86
    pretty_name: 'CWE-86: Improper Neutralization of Invalid Characters in Identifiers
      in Web Pages'
    ref: https://cwe.mitre.org/data/definitions/86.html
  CWE-862:
    categories:
    - ALL
    - cwe-862
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product does not perform an authorization check when an actor
      attempts to access a resource or perform an action.
    group: top10-broken-access-control
    name: CWE-862
    pretty_name: 'CWE-862: Missing Authorization'
    ref: https://cwe.mitre.org/data/definitions/862.html
  CWE-863:
    categories:
    - ALL
    - boost-hardened
    description: The product performs an authorization check when an actor attempts
      to access a resource or perform an action, but it does not correctly perform
      the check. This allows attackers to bypass intended access restrictions.
    group: top10-broken-access-control
    name: CWE-863
    pretty_name: 'CWE-863: Incorrect Authorization'
    ref: https://cwe.mitre.org/data/definitions/863.html
  CWE-87:
    categories:
    - ALL
    - boost-hardened
    description: The product does not neutralize or incorrectly neutralizes user-controlled
      input for alternate script syntax.
    group: top10-injection
    name: CWE-87
    pretty_name: 'CWE-87: Improper Neutralization of Alternate XSS Syntax'
    ref: https://cwe.mitre.org/data/definitions/87.html
  CWE-88:
    categories:
    - ALL
    - boost-hardened
    description: The product constructs a string for a command to be executed by a
      separate component in another control sphere, but it does not properly delimit
      the intended arguments, options, or switches within that command string.
    group: top10-injection
    name: CWE-88
    pretty_name: 'CWE-88: Improper Neutralization of Argument Delimiters in a Command
      (''Argument Injection'')'
    ref: https://cwe.mitre.org/data/definitions/88.html
  CWE-89:
    categories:
    - ALL
    - cwe-89
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product constructs all or part of an SQL command using externally-influenced
      input from an upstream component, but it does not neutralize or incorrectly
      neutralizes special elements that could modify the intended SQL command when
      it is sent to a downstream component.
    group: top10-injection
    name: CWE-89
    pretty_name: 'CWE-89: Improper Neutralization of Special Elements used in an SQL
      Command (''SQL Injection'')'
    ref: https://cwe.mitre.org/data/definitions/89.html
    recommended: true
  CWE-9:
    categories:
    - ALL
    - boost-hardened
    description: If elevated access rights are assigned to EJB methods, then an attacker
      can take advantage of the permissions to exploit the product.
    group: top10-insecure-design
    name: CWE-9
    pretty_name: 'CWE-9: J2EE Misconfiguration: Weak Access Permissions for EJB Methods'
    ref: https://cwe.mitre.org/data/definitions/9.html
  CWE-90:
    categories:
    - ALL
    - cwe-90
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product constructs all or part of an LDAP query using externally-influenced
      input from an upstream component, but it does not neutralize or incorrectly
      neutralizes special elements that could modify the intended LDAP query when
      it is sent to a downstream component.
    group: top10-injection
    name: CWE-90
    pretty_name: 'CWE-90: Improper Neutralization of Special Elements used in an LDAP
      Query (''LDAP Injection'')'
    ref: https://cwe.mitre.org/data/definitions/90.html
    recommended: true
  CWE-908:
    categories:
    - ALL
    - boost-hardened
    description: The product uses or accesses a resource that has not been initialized.
    group: top10-insecure-design
    name: CWE-908
    pretty_name: 'CWE-908: Use of Uninitialized Resource'
    ref: https://cwe.mitre.org/data/definitions/908.html
  CWE-909:
    categories:
    - ALL
    - boost-hardened
    description: The product does not initialize a critical resource.
    group: top10-insecure-design
    name: CWE-909
    pretty_name: 'CWE-909: Missing Initialization of Resource'
    ref: https://cwe.mitre.org/data/definitions/909.html
  CWE-91:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly neutralize special elements that are
      used in XML, allowing attackers to modify the syntax, content, or commands of
      the XML before it is processed by an end system.
    group: top10-injection
    name: CWE-91
    pretty_name: 'CWE-91: XML Injection (aka Blind XPath Injection)'
    ref: https://cwe.mitre.org/data/definitions/91.html
  CWE-910:
    categories:
    - ALL
    - boost-hardened
    description: The product uses or accesses a file descriptor after it has been
      closed.
    group: top10-insecure-design
    name: CWE-910
    pretty_name: 'CWE-910: Use of Expired File Descriptor'
    ref: https://cwe.mitre.org/data/definitions/910.html
  CWE-911:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a reference count to manage a resource, but it does
      not update or incorrectly updates the reference count.
    group: top10-insecure-design
    name: CWE-911
    pretty_name: 'CWE-911: Improper Update of Reference Count'
    ref: https://cwe.mitre.org/data/definitions/911.html
  CWE-912:
    categories:
    - ALL
    - boost-hardened
    description: The product contains functionality that is not documented, not part
      of the specification, and not accessible through an interface or command sequence
      that is obvious to the product's users or administrators.
    group: top10-insecure-design
    name: CWE-912
    pretty_name: 'CWE-912: Hidden Functionality'
    ref: https://cwe.mitre.org/data/definitions/912.html
  CWE-913:
    categories:
    - ALL
    - cwe-913
    - boost-hardened
    - owasp-top-10
    description: The product does not properly restrict reading from or writing to
      dynamically-managed code resources such as variables, objects, classes, attributes,
      functions, or executable instructions or statements.
    group: top10-broken-access-control
    name: CWE-913
    pretty_name: 'CWE-913: Improper Control of Dynamically-Managed Code Resources'
    ref: https://cwe.mitre.org/data/definitions/913.html
  CWE-914:
    categories:
    - ALL
    - boost-hardened
    description: The product does not properly restrict reading from or writing to
      dynamically-identified variables.
    group: top10-injection
    name: CWE-914
    pretty_name: 'CWE-914: Improper Control of Dynamically-Identified Variables'
    ref: https://cwe.mitre.org/data/definitions/914.html
  CWE-915:
    categories:
    - ALL
    - cwe-915
    - boost-hardened
    - owasp-top-10
    description: The product receives input from an upstream component that specifies
      multiple attributes, properties, or fields that are to be initialized or updated
      in an object, but it does not properly control which attributes can be modified.
    group: top10-software-data-integrity-failures
    name: CWE-915
    pretty_name: 'CWE-915: Improperly Controlled Modification of Dynamically-Determined
      Object Attributes'
    ref: https://cwe.mitre.org/data/definitions/915.html
  CWE-916:
    categories:
    - ALL
    - boost-hardened
    description: The product generates a hash for a password, but it uses a scheme
      that does not provide a sufficient level of computational effort that would
      make password cracking attacks infeasible or expensive.
    group: top10-crypto-failures
    name: CWE-916
    pretty_name: 'CWE-916: Use of Password Hash With Insufficient Computational Effort'
    ref: https://cwe.mitre.org/data/definitions/916.html
  CWE-917:
    categories:
    - ALL
    - boost-hardened
    description: The product constructs all or part of an expression language (EL)
      statement in a framework such as a Java Server Page (JSP) using externally-influenced
      input from an upstream component, but it does not neutralize or incorrectly
      neutralizes special elements that could modify the intended EL statement before
      it is executed.
    group: top10-injection
    name: CWE-917
    pretty_name: 'CWE-917: Improper Neutralization of Special Elements used in an
      Expression Language Statement (''Expression Language Injection'')'
    ref: https://cwe.mitre.org/data/definitions/917.html
  CWE-918:
    categories:
    - ALL
    - cwe-918
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The web server receives a URL or similar request from an upstream
      component and retrieves the contents of this URL, but it does not sufficiently
      ensure that the request is being sent to the expected destination.
    group: top10-server-side-request-forgery
    name: CWE-918
    pretty_name: 'CWE-918: Server-Side Request Forgery (SSRF)'
    ref: https://cwe.mitre.org/data/definitions/918.html
    recommended: true
  CWE-919:
    categories:
    - ALL
    - cwe-top-25
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    group: top10-insecure-design
    name: CWE-919
    pretty_name: CWE-919 - Weaknesses in Mobile Applications
    description: The code introduces a vulnerability in the mobile application.
    ref: https://cwe.mitre.org/data/definitions/919.html
    recommended: true
  CWE-920:
    categories:
    - ALL
    - boost-hardened
    description: The product operates in an environment in which power is a limited
      resource that cannot be automatically replenished, but the product does not
      properly restrict the amount of power that its operation consumes.
    group: top10-insecure-design
    name: CWE-920
    pretty_name: 'CWE-920: Improper Restriction of Power Consumption'
    ref: https://cwe.mitre.org/data/definitions/920.html
  CWE-921:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive information in a file system or device
      that does not have built-in access control.
    group: top10-broken-access-control
    name: CWE-921
    pretty_name: 'CWE-921: Storage of Sensitive Data in a Mechanism without Access
      Control'
    ref: https://cwe.mitre.org/data/definitions/921.html
  CWE-922:
    categories:
    - ALL
    - boost-hardened
    description: The product stores sensitive information without properly limiting
      read or write access by unauthorized actors.
    group: top10-broken-access-control
    name: CWE-922
    pretty_name: 'CWE-922: Insecure Storage of Sensitive Information'
    ref: https://cwe.mitre.org/data/definitions/922.html
  CWE-923:
    categories:
    - ALL
    - boost-hardened
    description: The product establishes a communication channel to (or from) an endpoint
      for privileged or protected operations, but it does not properly ensure that
      it is communicating with the correct endpoint.
    group: top10-broken-access-control
    name: CWE-923
    pretty_name: 'CWE-923: Improper Restriction of Communication Channel to Intended
      Endpoints'
    ref: https://cwe.mitre.org/data/definitions/923.html
  CWE-924:
    categories:
    - ALL
    - boost-hardened
    description: The product establishes a communication channel with an endpoint
      and receives a message from that endpoint, but it does not sufficiently ensure
      that the message was not modified during transmission.
    group: top10-software-data-integrity-failures
    name: CWE-924
    pretty_name: 'CWE-924: Improper Enforcement of Message Integrity During Transmission
      in a Communication Channel'
    ref: https://cwe.mitre.org/data/definitions/924.html
  CWE-925:
    categories:
    - ALL
    - boost-hardened
    description: The Android application uses a Broadcast Receiver that receives an
      Intent but does not properly verify that the Intent came from an authorized
      source.
    group: top10-id-authn-failures
    name: CWE-925
    pretty_name: 'CWE-925: Improper Verification of Intent by Broadcast Receiver'
    ref: https://cwe.mitre.org/data/definitions/925.html
  CWE-926:
    categories:
    - ALL
    - boost-hardened
    description: The Android application exports a component for use by other applications,
      but does not properly restrict which applications can launch the component or
      access the data it contains.
    group: top10-broken-access-control
    name: CWE-926
    pretty_name: 'CWE-926: Improper Export of Android Application Components'
    ref: https://cwe.mitre.org/data/definitions/926.html
  CWE-927:
    categories:
    - ALL
    - boost-hardened
    description: The Android application uses an implicit intent for transmitting
      sensitive data to other applications.
    group: top10-insecure-design
    name: CWE-927
    pretty_name: 'CWE-927: Use of Implicit Intent for Sensitive Communication'
    ref: https://cwe.mitre.org/data/definitions/927.html
  CWE-93:
    categories:
    - ALL
    - boost-hardened
    description: The product uses CRLF (carriage return line feeds) as a special element,
      e.g. to separate lines or records, but it does not neutralize or incorrectly
      neutralizes CRLF sequences from inputs.
    group: top10-injection
    name: CWE-93
    pretty_name: 'CWE-93: Improper Neutralization of CRLF Sequences (''CRLF Injection'')'
    ref: https://cwe.mitre.org/data/definitions/93.html
  CWE-939:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a handler for a custom URL scheme, but it does not
      properly restrict which actors can invoke the handler using the scheme.
    group: top10-broken-access-control
    name: CWE-939
    pretty_name: 'CWE-939: Improper Authorization in Handler for Custom URL Scheme'
    ref: https://cwe.mitre.org/data/definitions/939.html
  CWE-94:
    categories:
    - ALL
    - cwe-94
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    - cwe-top-25
    description: The product constructs all or part of a code segment using externally-influenced
      input from an upstream component, but it does not neutralize or incorrectly
      neutralizes special elements that could modify the syntax or behavior of the
      intended code segment.
    group: top10-injection
    name: CWE-94
    pretty_name: 'CWE-94: Improper Control of Generation of Code (''Code Injection'')'
    ref: https://cwe.mitre.org/data/definitions/94.html
    recommended: true
  CWE-940:
    categories:
    - ALL
    - boost-hardened
    description: The product establishes a communication channel to handle an incoming
      request that has been initiated by an actor, but it does not properly verify
      that the request is coming from the expected origin.
    group: top10-id-authn-failures
    name: CWE-940
    pretty_name: 'CWE-940: Improper Verification of Source of a Communication Channel'
    ref: https://cwe.mitre.org/data/definitions/940.html
  CWE-941:
    categories:
    - ALL
    - boost-hardened
    description: The product creates a communication channel to initiate an outgoing
      request to an actor, but it does not correctly specify the intended destination
      for that actor.
    group: top10-broken-access-control
    name: CWE-941
    pretty_name: 'CWE-941: Incorrectly Specified Destination in a Communication Channel'
    ref: https://cwe.mitre.org/data/definitions/941.html
  CWE-942:
    categories:
    - ALL
    - boost-hardened
    description: The product uses a cross-domain policy file that includes domains
      that should not be trusted.
    group: top10-security-misconfiguration
    name: CWE-942
    pretty_name: 'CWE-942: Permissive Cross-domain Policy with Untrusted Domains'
    ref: https://cwe.mitre.org/data/definitions/942.html
  CWE-943:
    categories:
    - ALL
    - cwe-943
    - boost-baseline
    - boost-hardened
    description: The product generates a query intended to access or manipulate data
      in a data store such as a database, but it does not neutralize or incorrectly
      neutralizes special elements that can modify the intended logic of the query.
    group: top10-injection
    name: CWE-943
    pretty_name: 'CWE-943: Improper Neutralization of Special Elements in Data Query
      Logic'
    ref: https://cwe.mitre.org/data/definitions/943.html
    recommended: true
  CWE-95:
    categories:
    - ALL
    - cwe-95
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes code syntax before using the input
      in a dynamic evaluation call (e.g. "eval").
    group: top10-injection
    name: CWE-95
    pretty_name: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated
      Code (''Eval Injection'')'
    ref: https://cwe.mitre.org/data/definitions/95.html
    recommended: true
  CWE-96:
    categories:
    - ALL
    - cwe-96
    - boost-baseline
    - boost-hardened
    - owasp-top-10
    description: The product receives input from an upstream component, but it does
      not neutralize or incorrectly neutralizes code syntax before inserting the input
      into an executable resource, such as a library, configuration file, or template.
    group: top10-injection
    name: CWE-96
    pretty_name: 'CWE-96: Improper Neutralization of Directives in Statically Saved
      Code (''Static Code Injection'')'
    ref: https://cwe.mitre.org/data/definitions/96.html
    recommended: true
  CWE-97:
    categories:
    - ALL
    - boost-hardened
    description: The product generates a web page, but does not neutralize or incorrectly
      neutralizes user-controllable input that could be interpreted as a server-side
      include (SSI) directive.
    group: top10-injection
    name: CWE-97
    pretty_name: 'CWE-97: Improper Neutralization of Server-Side Includes (SSI) Within
      a Web Page'
    ref: https://cwe.mitre.org/data/definitions/97.html
  CWE-98:
    categories:
    - ALL
    - boost-hardened
    description: The PHP application receives input from an upstream component, but
      it does not restrict or incorrectly restricts the input before its usage in
      "require," "include," or similar functions.
    group: top10-injection
    name: CWE-98
    pretty_name: 'CWE-98: Improper Control of Filename for Include/Require Statement
      in PHP Program (''PHP Remote File Inclusion'')'
    ref: https://cwe.mitre.org/data/definitions/98.html
  CWE-99:
    categories:
    - ALL
    - boost-hardened
    description: The product receives input from an upstream component, but it does
      not restrict or incorrectly restricts the input before it is used as an identifier
      for a resource that may be outside the intended sphere of control.
    group: top10-injection
    name: CWE-99
    pretty_name: 'CWE-99: Improper Control of Resource Identifiers (''Resource Injection'')'
    ref: https://cwe.mitre.org/data/definitions/99.html
default:
  CWE-UNKNOWN:
    categories:
    - ALL
    - boost-hardened
    group: top10-insecure-design
    name: CWE-UNKNOWN
    pretty_name: CWE-UNKNOWN - Original rule did not map to a known CWE rule
    description: The original rule could not be map to a CWE rule
    ref: https://cwe.mitre.org/data/index.html
